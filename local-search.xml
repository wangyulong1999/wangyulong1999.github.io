<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GFS扩容在线磁盘</title>
    <link href="/2023/09/12/GFS%E6%89%A9%E5%AE%B9%E5%B7%B2%E6%9C%89%E7%9A%84%E5%9C%A8%E7%BA%BF%E7%A3%81%E7%9B%98/"/>
    <url>/2023/09/12/GFS%E6%89%A9%E5%AE%B9%E5%B7%B2%E6%9C%89%E7%9A%84%E5%9C%A8%E7%BA%BF%E7%A3%81%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、GFS扩容已有的在线磁盘"><a href="#1、GFS扩容已有的在线磁盘" class="headerlink" title="1、GFS扩容已有的在线磁盘"></a>1、GFS扩容已有的在线磁盘</h3><p>查看现有glusterfs磁盘使用情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Bash">heketi-cli topology info|grep -A 2000 Nodes<br><br>    Nodes:<br>    Storage Hostnames: 192.168.40.102<br>    Devices:<br>    Id:a92a1d705e4c5e99d08eb2081ed9d442   Name:/dev/sdc  State:online    Size (GiB):49      Used (GiB):46      Free (GiB):3       <br>    Storage Hostnames: 192.168.40.101<br>    Devices:<br>    Id:04d52bfab53b6ee20b1026af3a8ff39f   Name:/dev/sdc State:online    Size (GiB):99      Used (GiB):46      Free (GiB):53<br></code></pre></td></tr></table></figure><p>   当需要将 192.168.40.102 主机的&#x2F;dev&#x2F;sdc 磁盘从50G 扩容到100G时，首先在虚拟机或者云服务器将磁盘进行动态扩容到100G</p><p>此时主机磁盘虽然已经有100G 但是gfs集群仍然显示50G </p><p>处理 登录扩容主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Bash">pvdisplay /dev/sdc<br>  --- Physical volume ---<br>  PV Name               /dev/sdc<br>  VG Name               vg_a92a1d705e4c5e99d08eb2081ed9d442<br>  PV Size               50.00 GiB / not usable 132.00 MiB<br>  Allocatable           <span class="hljs-built_in">yes</span> <br>  PE Size               4.00 MiB<br>  Total PE              12767<br>  Free PE               904<br>  Allocated PE          11863<br>  PV UUID               jXZaP5-zSG9-fRYw-oUYT-R3Cn-ddRc-PL5D9<br> 显示仍旧是50G<br> 需要动态加载pv 执行以下命令<br>pvresize /dev/sdc<br>partprobe /dev/sdc<br><br>再次查看/dev/sdc pv已经增加到100G<br>  --- Physical volume ---<br>  PV Name               /dev/sdc<br>  VG Name               vg_a92a1d705e4c5e99d08eb2081ed9d442<br>  PV Size               100.00 GiB / not usable 124.50 MiB<br>  Allocatable           <span class="hljs-built_in">yes</span> <br>  PE Size               4.00 MiB<br>  Total PE              25567<br>  Free PE               13704<br>  Allocated PE          11863<br>  PV UUID               jXZaP5-zSG9-fRYw-oUYT-R3Cn-ddRc-PL5DV9<br></code></pre></td></tr></table></figure><p>此时heketi-cli 查看集群主机的磁盘依旧是50G</p><p>处理 在heketi-cli 主机执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">heketi-cli device resync a92a1d705e4c5e99d08eb2081ed9d442 <span class="hljs-comment">#此Id 为设备device ID</span><br></code></pre></td></tr></table></figure><p>再次查看gls集群磁盘空间已经增加到100G</p><h3 id="2、GFS扩容新增裸盘"><a href="#2、GFS扩容新增裸盘" class="headerlink" title="2、GFS扩容新增裸盘"></a><strong>2、GFS扩容新增裸盘</strong></h3><p>在已有机器上新增一块裸盘(&#x2F;dev&#x2F;sdc)加入gfs集群中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Bash">1、裸盘转换成物理卷<br><span class="hljs-comment">### pvcreate /dev/sdc</span><br>Physical volume <span class="hljs-string">&quot;/dev/sdc&quot;</span> successfully created.<br>2、在有heketi主机上执行命令<br>   通过heketi-cli topology info 查询到node <span class="hljs-built_in">id</span><br>   执行命令  <br>   heketi-cli device add --name=/dev/sdc --node=ae2cbc030855486a74ea592820dbc494<br>3、heketi-cli topology info查询node下已有新增device<br></code></pre></td></tr></table></figure><h3 id="3、修改heketi-db数据"><a href="#3、修改heketi-db数据" class="headerlink" title="3、修改heketi.db数据"></a>3、<strong>修改heketi.db数据</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Bash">systemctl stop heketi<br><span class="hljs-comment">## db文件导出json文件，以便修改</span><br>heketi db <span class="hljs-built_in">export</span> --jsonfile=/var/lib/heketi/db.json --dbfile=/var/lib/heketi/heketi.db<br><span class="hljs-comment">## json文件导入成db文件</span><br>heketi db import  --jsonfile=/var/lib/heketi/db.json --dbfile=/var/lib/heketi/heketi.db<br></code></pre></td></tr></table></figure><h3 id="4、heketi磁盘使用率不匹配问题"><a href="#4、heketi磁盘使用率不匹配问题" class="headerlink" title="4、heketi磁盘使用率不匹配问题"></a>4、heketi磁盘使用率不匹配问题</h3><h6 id="1、登录到-Heketi-pod-并获取节点列表。"><a href="#1、登录到-Heketi-pod-并获取节点列表。" class="headerlink" title="1、登录到 Heketi pod 并获取节点列表。"></a>1、登录到 Heketi pod 并获取节点列表。</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">heketi-cli --user admin --secret admin node list<br></code></pre></td></tr></table></figure><p>命令输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">Id:10cc13f4cd18136fc9b6d2a6d1eac733     Cluster:34fe224a09d8022a3582da817c31a81b<br>Id:157012bb7b0391b2c116b35de8d6e7ba     Cluster:34fe224a09d8022a3582da817c31a81b<br>Id:95c72d452bc2c21b3a1e2fa87e63f902     Cluster:34fe224a09d8022a3582da817c31a81b<br></code></pre></td></tr></table></figure><h6 id="2、获取有关节点上设备的信息。针对每个节点重复此步骤。"><a href="#2、获取有关节点上设备的信息。针对每个节点重复此步骤。" class="headerlink" title="2、获取有关节点上设备的信息。针对每个节点重复此步骤。"></a>2、获取有关节点上设备的信息。针对每个节点重复此步骤。</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL">heketi<span class="hljs-operator">-</span>cli <span class="hljs-comment">--user admin --secret admin node info &lt;node-ID&gt;</span><br></code></pre></td></tr></table></figure><p>命令输出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs SQL">Node Id: <span class="hljs-number">10</span>cc13f4cd18136fc9b6d2a6d1eac733<br>State: online<br>Cluster Id: <span class="hljs-number">34</span>fe224a09d8022a3582da817c31a81b<br>Zone: <span class="hljs-number">1</span><br>Management Hostname: <span class="hljs-number">10.41</span><span class="hljs-number">.4</span><span class="hljs-number">.108</span><br>Storage Hostname: <span class="hljs-number">10.41</span><span class="hljs-number">.4</span><span class="hljs-number">.108</span><br>Devices:<br>Id:c7e93cd3d3d293a78dfb99cb2809f699   Name:<span class="hljs-operator">/</span>dev<span class="hljs-operator">/</span>disk<span class="hljs-operator">/</span><span class="hljs-keyword">by</span><span class="hljs-operator">-</span>path<span class="hljs-operator">/</span>virtio<span class="hljs-operator">-</span>pci<span class="hljs-number">-0000</span>_00_11_0 State:online    Size (GiB):<span class="hljs-number">699</span>      Used (GiB):<span class="hljs-number">497</span>       <span class="hljs-keyword">Free</span> (GiB):<span class="hljs-number">202</span><br>           Bricks:<br>                     Id:<span class="hljs-number">33</span>cb391e0113ec96ccc546a4e4288018   Size (GiB):<span class="hljs-number">100</span>     Path: <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>heketi<span class="hljs-operator">/</span>mounts<span class="hljs-operator">/</span>vg_d991f7315d9e13f9ef4d8044cd474569<span class="hljs-operator">/</span>brick_33cb391e0113ec96ccc546a4e4288018<span class="hljs-operator">/</span>brick<br>                     Id:<span class="hljs-number">41</span>a508db035b042b1d35839f0d40f0c5   Size (GiB):<span class="hljs-number">20</span>     Path: <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>heketi<span class="hljs-operator">/</span>mounts<span class="hljs-operator">/</span>vg_d991f7315d9e13f9ef4d8044cd474569<span class="hljs-operator">/</span>brick_41a508db035b042b1d35839f0d40f0c5<span class="hljs-operator">/</span>brick<br></code></pre></td></tr></table></figure><h6 id="3、获取有关设备上磁盘使用率的信息。针对每个节点上的每个设备重复此步骤。"><a href="#3、获取有关设备上磁盘使用率的信息。针对每个节点上的每个设备重复此步骤。" class="headerlink" title="3、获取有关设备上磁盘使用率的信息。针对每个节点上的每个设备重复此步骤。"></a>3、获取有关设备上磁盘使用率的信息。针对每个节点上的每个设备重复此步骤。</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL">heketi<span class="hljs-operator">-</span>cli <span class="hljs-comment">--user admin --secret admin device info &lt;device-ID&gt;</span><br></code></pre></td></tr></table></figure><p>命令输出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL">Device Id: c7e93cd3d3d293a78dfb99cb2809f699<br>Name: <span class="hljs-operator">/</span>dev<span class="hljs-operator">/</span>disk<span class="hljs-operator">/</span><span class="hljs-keyword">by</span><span class="hljs-operator">-</span>path<span class="hljs-operator">/</span>virtio<span class="hljs-operator">-</span>pci<span class="hljs-number">-0000</span>_00_11_0<br>State: online<br>Size (GiB): <span class="hljs-number">699</span><br>Used (GiB): <span class="hljs-number">497</span><br><span class="hljs-keyword">Free</span> (GiB): <span class="hljs-number">202</span><br>Bricks:<br>Id:<span class="hljs-number">33</span>cb391e0113ec96ccc546a4e4288018   Size (GiB):<span class="hljs-number">100</span>     Path: <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>heketi<span class="hljs-operator">/</span>mounts<span class="hljs-operator">/</span>vg_d991f7315d9e13f9ef4d8044cd474569<span class="hljs-operator">/</span>brick_33cb391e0113ec96ccc546a4e4288018<span class="hljs-operator">/</span>brick<br>Id:<span class="hljs-number">41</span>a508db035b042b1d35839f0d40f0c5   Size (GiB):<span class="hljs-number">20</span>     Path: <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>heketi<span class="hljs-operator">/</span>mounts<span class="hljs-operator">/</span>vg_d991f7315d9e13f9ef4d8044cd474569<span class="hljs-operator">/</span>brick_41a508db035b042b1d35839f0d40f0c5<span class="hljs-operator">/</span>brick<br></code></pre></td></tr></table></figure><h6 id="4、同步设备以反映实际磁盘使用率。针对每个节点上的每个设备重复此步骤。"><a href="#4、同步设备以反映实际磁盘使用率。针对每个节点上的每个设备重复此步骤。" class="headerlink" title="4、同步设备以反映实际磁盘使用率。针对每个节点上的每个设备重复此步骤。"></a>4、同步设备以反映实际磁盘使用率。针对每个节点上的每个设备重复此步骤。</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL">heketi<span class="hljs-operator">-</span>cli <span class="hljs-comment">--user admin --secret admin device resync &lt;device-ID&gt;</span><br></code></pre></td></tr></table></figure><p>命令输出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL">Device  updated<br></code></pre></td></tr></table></figure><h6 id="5、验证已同步磁盘使用率信息。"><a href="#5、验证已同步磁盘使用率信息。" class="headerlink" title="5、验证已同步磁盘使用率信息。"></a>5、验证已同步磁盘使用率信息。</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL">heketi<span class="hljs-operator">-</span>cli <span class="hljs-comment">--user admin --secret admin device info &lt;device-ID&gt;</span><br></code></pre></td></tr></table></figure><p>命令输出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL">Device Id: c7e93cd3d3d293a78dfb99cb2809f699<br>Name: <span class="hljs-operator">/</span>dev<span class="hljs-operator">/</span>disk<span class="hljs-operator">/</span><span class="hljs-keyword">by</span><span class="hljs-operator">-</span>path<span class="hljs-operator">/</span>virtio<span class="hljs-operator">-</span>pci<span class="hljs-number">-0000</span>_00_11_0<br>State: online<br>Size (GiB): <span class="hljs-number">699</span><br>Used (GiB): <span class="hljs-number">120</span><br><span class="hljs-keyword">Free</span> (GiB): <span class="hljs-number">579</span><br>Bricks:<br>Id:<span class="hljs-number">33</span>cb391e0113ec96ccc546a4e4288018   Size (GiB):<span class="hljs-number">100</span>     Path: <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>heketi<span class="hljs-operator">/</span>mounts<span class="hljs-operator">/</span>vg_d991f7315d9e13f9ef4d8044cd474569<span class="hljs-operator">/</span>brick_33cb391e0113ec96ccc546a4e4288018<span class="hljs-operator">/</span>brick<br>Id:<span class="hljs-number">41</span>a508db035b042b1d35839f0d40f0c5   Size (GiB):<span class="hljs-number">20</span>     Path: <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>heketi<span class="hljs-operator">/</span>mounts<span class="hljs-operator">/</span>vg_d991f7315d9e13f9ef4d8044cd474569<span class="hljs-operator">/</span>brick_41a508db035b042b1d35839f0d40f0c5<span class="hljs-operator">/</span>brick<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/12/Ubuntu22.04LTS%20%20%E5%AE%89%E8%A3%85%20ceph%20%E9%9B%86%E7%BE%A4/"/>
    <url>/2023/09/12/Ubuntu22.04LTS%20%20%E5%AE%89%E8%A3%85%20ceph%20%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="title-Ubuntu22-04LTS-安装-ceph-集群"><a href="#title-Ubuntu22-04LTS-安装-ceph-集群" class="headerlink" title="title:Ubuntu22.04LTS  安装 ceph 集群"></a>title:Ubuntu22.04LTS  安装 ceph 集群</h2><h1 id="Ubuntu22-04LTS-安装-ceph-集群"><a href="#Ubuntu22-04LTS-安装-ceph-集群" class="headerlink" title="Ubuntu22.04LTS  安装 ceph 集群"></a>Ubuntu22.04LTS  安装 ceph 集群</h1><p> 在 Ubuntu 22.04 使用 cephadm(容器部署) 安装 ceph 集群，并配置为 k8s 的存储类。 </p><p><strong>ceph官方地址</strong>：  <a href="https://docs.ceph.com/en/latest/">Welcome to Ceph — Ceph Documentation</a> </p><p><strong>端口说明(tcp协议)：</strong></p><table><thead><tr><th>服务</th><th>端口</th><th>说明</th></tr></thead><tbody><tr><td>mon</td><td>6789</td><td>ceph集群互通，k8s集群互通</td></tr><tr><td>osd</td><td>6800-7300</td><td>osd守护进程端口</td></tr><tr><td>mgr</td><td>8443、9283</td><td>8443(web服务) 9283(prometheus metrics)</td></tr><tr><td>prometheus</td><td>9095</td><td></td></tr><tr><td>grafana</td><td>3000</td><td></td></tr><tr><td>node-exporter</td><td>9100</td><td></td></tr><tr><td>alertmanager</td><td>9093</td><td></td></tr></tbody></table><h3 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a><strong>一、准备</strong></h3><h4 id="1、-准备-3-台服务器用于安装-ceph-集群，服务器信息如下："><a href="#1、-准备-3-台服务器用于安装-ceph-集群，服务器信息如下：" class="headerlink" title="1、 准备 3 台服务器用于安装 ceph 集群，服务器信息如下："></a><strong>1、 准备 3 台服务器用于安装 ceph 集群，服务器信息如下：</strong></h4><table><thead><tr><th>主机名</th><th>IP</th><th>配置</th><th>磁盘</th><th>服务</th></tr></thead><tbody><tr><td>ceph-node1</td><td>10.0.51.215</td><td>1 vCPU；2 GiB</td><td>系统盘 20G + 数据盘 50G</td><td>mon、osd，mgr、prometheus、grafana、node-expoter</td></tr><tr><td>ceph-node2</td><td>10.0.51.216</td><td>1 vCPU；2 GiB</td><td>系统盘 20G + 数据盘 50G</td><td>mon、osd，mgr、node-expoter</td></tr><tr><td>ceph-node3</td><td>10.0.51.217</td><td>1 vCPU；2 GiB</td><td>系统盘 20G + 数据盘 50G</td><td>mon、osd、node-expoter</td></tr></tbody></table><h4 id="2、修改主机host文件-每台主机都执行"><a href="#2、修改主机host文件-每台主机都执行" class="headerlink" title="2、修改主机host文件(每台主机都执行)"></a><strong>2、修改主机host文件(每台主机都执行)</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Bash">root@ceph-node1:~<span class="hljs-comment"># cat /etc/hosts</span><br>127.0.0.1 localhost<br>127.0.1.1 ubuntu<br><br><span class="hljs-comment"># The following lines are desirable for IPv6 capable hosts</span><br>::1     ip6-localhost ip6-loopback<br>fe00::0 ip6-localnet<br>ff00::0 ip6-mcastprefix<br>ff02::1 ip6-allnodes<br>ff02::2 ip6-allrouters<br><br>10.0.51.215 ceph-node1<br>10.0.51.216 ceph-node2<br>10.0.51.217 ceph-node3<br></code></pre></td></tr></table></figure><h4 id="3、修改主机hostname-每台主机都执行"><a href="#3、修改主机hostname-每台主机都执行" class="headerlink" title="3、修改主机hostname(每台主机都执行)"></a><strong>3、修改主机hostname(每台主机都执行)</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">10.0.51.215</span><br>hostnamectl set-hostname  ceph-node1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">10.0.51.216</span><br>hostnamectl set-hostname  ceph-node2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">10.0.51.217</span><br>hostnamectl set-hostname  ceph-node3<br></code></pre></td></tr></table></figure><h4 id="4、密钥分发-第一台主机执行"><a href="#4、密钥分发-第一台主机执行" class="headerlink" title="4、密钥分发(第一台主机执行)"></a><strong>4、密钥分发(第一台主机执行)</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ceph-node1创建密钥</span><br>ssh-keygen -t rsa<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置</span><br>sed -i &#x27;s/PermitRootLogin yes/#PermitRootLogin yes/g&#x27; /etc/ssh/sshd_config<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">发送</span><br>ssh-copy-id  ceph-node1<br>ssh-copy-id  ceph-node2<br>ssh-copy-id  ceph-node3<br></code></pre></td></tr></table></figure><h4 id="5、时间同步"><a href="#5、时间同步" class="headerlink" title="5、时间同步"></a><strong>5、时间同步</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置时区 Asia/Shanghai</span><br>timedatectl set-timezone Asia/Shanghai<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看状态</span><br>timedatectl status<br></code></pre></td></tr></table></figure><h4 id="6、安装docker"><a href="#6、安装docker" class="headerlink" title="6、安装docker"></a><strong>6、安装docker</strong></h4><p># 在线安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 下载依赖</span></span><br><br>apt-get update<br>apt-get -y install apt-transport-https ca-certificates curl gnupg-agent software-properties-common<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 导入key</span></span><br>curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 导入源</span></span><br>add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 安装</span></span><br>apt-get -y install docker-ce<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 添加daemon.json</span></span><br>&#123;<br>    &quot;registry-mirrors&quot;: [&quot;https://obou6wyb.mirror.aliyuncs.com&quot;],<br>    &quot;log-driver&quot;:&quot;json-file&quot;,<br>    &quot;log-opts&quot;:&#123;&quot;max-size&quot; :&quot;100m&quot;,&quot;max-file&quot;:&quot;1&quot;&#125;,<br>    &quot;insecure-registries&quot;:[&quot;harbor.ops.bsnbase.com&quot;]<br>&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动并设置开机自启动</span><br>systemctl enable --now docker<br><br>root@ceph-node1:~# docker -v<br>Docker version 24.0.2, build cb74dfc<br></code></pre></td></tr></table></figure><p># 离线安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">https://mirrors.aliyun.com/docker-ce/linux/static/stable/x86_64/docker-24.0.2.tgz<br><br>tar zxf docker-24.0.2.tgz<br>cp docker/* /usr/bin/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">拷贝 docker.service、daemon.json</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br></code></pre></td></tr></table></figure><h4 id="7、下载cephadm离线包"><a href="#7、下载cephadm离线包" class="headerlink" title="7、下载cephadm离线包"></a><strong>7、下载cephadm离线包</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ubuntu22.04默认装有ceph17.2.5的源</span><br>apt update<br>apt-get -y --download-only install -d -o=dir::cache=./ cephadm ceph-common<br>.<br>├── archives<br>│   ├── cephadm_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>│   ├── ceph-common相关包<br>│   ├── lock<br>│   └── partial<br>├── pkgcache.bin<br>└── srcpkgcache.bin<br></code></pre></td></tr></table></figure><h3 id="二、部署"><a href="#二、部署" class="headerlink" title="二、部署"></a><strong>二、部署</strong></h3><p>cephadm部署文档地址: <a href="https://docs.ceph.com/en/latest/cephadm/install/#cephadm-deploying-new-cluster">https://docs.ceph.com/en/latest/cephadm/install/#cephadm-deploying-new-cluster</a></p><h4 id="1、在线安装"><a href="#1、在线安装" class="headerlink" title="1、在线安装"></a><strong>1、在线安装</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 cephadm</span><br>apt install cephadm -y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启用集群</span><br>cephadm bootstrap --mon-ip 10.0.51.215 --initial-dashboard-user admin --initial-dashboard-password 123456 <br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 ceph-cli</span><br>apt install ceph-common -y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">集群状态信息</span><br>ceph -s<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看节点信息</span><br>ceph orch host ls<br><span class="hljs-meta prompt_"># </span><span class="language-bash">拷贝公钥</span><br>ssh-copy-id -f -i /etc/ceph/ceph.pub ceph-node2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加节点</span><br>ceph orch host add ceph-node2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看节点信息</span><br>ceph orch host ls<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加所有可用磁盘到集群(磁盘需裸盘挂载，不做任何操作，不需要格式化)</span><br>ceph orch daemon add osd ceph-node1:/dev/sdb<br>ceph orch daemon add osd ceph-node2:/dev/sdb<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看 osd 状态</span><br>ceph osd tree<br></code></pre></td></tr></table></figure><h4 id="2、离线安装"><a href="#2、离线安装" class="headerlink" title="2、离线安装"></a><strong>2、离线安装</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">集群第一台主机拷贝之前下载的deb包</span><br>root@ceph-node1:/bsn/iso<br><br>-rw-r--r-- 1 root root 22579388 May 10 00:09 ceph-common_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root    89502 May 10 00:09 cephadm_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root   340678 Jan 28  2022 ibverbs-providers_39.0-1_amd64.deb<br>-rw-r--r-- 1 root root   160172 Mar 17  2022 libbabeltrace1_1.5.8-2build1_amd64.deb<br>-rw-r--r-- 1 root root   222588 Mar 17  2022 libboost-context1.74.0_1.74.0-14ubuntu3_amd64.deb<br>-rw-r--r-- 1 root root   264432 Mar 17  2022 libboost-filesystem1.74.0_1.74.0-14ubuntu3_amd64.deb<br>-rw-r--r-- 1 root root   245050 Mar 17  2022 libboost-iostreams1.74.0_1.74.0-14ubuntu3_amd64.deb<br>-rw-r--r-- 1 root root   310732 Mar 17  2022 libboost-program-options1.74.0_1.74.0-14ubuntu3_amd64.deb<br>-rw-r--r-- 1 root root   261992 Mar 17  2022 libboost-thread1.74.0_1.74.0-14ubuntu3_amd64.deb<br>-rw-r--r-- 1 root root   744378 May 10 00:09 libcephfs2_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root    19806 Jan 25  2022 libdaxctl1_72.1-1_amd64.deb<br>-rw-r--r-- 1 root root   212402 Mar 24  2022 libgoogle-perftools4_2.9.1-0ubuntu3_amd64.deb<br>-rw-r--r-- 1 root root    69304 Jan 28  2022 libibverbs1_39.0-1_amd64.deb<br>-rw-r--r-- 1 root root   140026 Mar 25  2022 liblua5.3-0_5.3.6-1build1_amd64.deb<br>-rw-r--r-- 1 root root    57676 Jan 25  2022 libndctl6_72.1-1_amd64.deb<br>-rw-r--r-- 1 root root    59070 Feb  9  2022 libnl-3-200_3.5.0-0.1_amd64.deb<br>-rw-r--r-- 1 root root   179554 Feb  9  2022 libnl-route-3-200_3.5.0-0.1_amd64.deb<br>-rw-r--r-- 1 root root    22478 Mar 25  2022 libnuma1_2.0.14-3ubuntu2_amd64.deb<br>-rw-r--r-- 1 root root    41108 Mar 25  2022 liboath0_2.6.7-3build1_amd64.deb<br>-rw-r--r-- 1 root root    81392 Mar 25  2022 libpmem1_1.11.1-3build1_amd64.deb<br>-rw-r--r-- 1 root root   123994 Mar 25  2022 libpmemobj1_1.11.1-3build1_amd64.deb<br>-rw-r--r-- 1 root root    39340 Mar 17  2022 librabbitmq4_0.10.0-1ubuntu2_amd64.deb<br>-rw-r--r-- 1 root root  3573064 May 10 00:09 librados2_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root   492352 May 10 00:09 libradosstriper1_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root  3545306 May 10 00:09 librbd1_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root    71226 Jan 28  2022 librdmacm1_39.0-1_amd64.deb<br>-rw-r--r-- 1 root root    17486 Mar 26  2022 libsnappy1v5_1.1.8-1build3_amd64.deb<br>-rw-r--r-- 1 root root    98202 Mar 24  2022 libtcmalloc-minimal4_2.9.1-0ubuntu3_amd64.deb<br>-rw-r--r-- 1 root root    34568 May 10 00:09 python3-ceph-argparse_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root    55718 May 10 00:09 python3-ceph-common_17.2.5-0ubuntu0.22.04.3_all.deb<br>-rw-r--r-- 1 root root   174018 May 10 00:09 python3-cephfs_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root    31318 Feb 15  2022 python3-prettytable_2.5.0-2_all.deb<br>-rw-r--r-- 1 root root   354232 May 10 00:09 python3-rados_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root   323690 May 10 00:09 python3-rbd_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root    21924 Jan 28  2022 python3-wcwidth_0.2.5+dfsg1-1_all.deb<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">离线安装</span><br>root@ceph-node1:/bsn/iso# dpkg -i *.deb<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查</span><br>root@ceph-node1:~# dpkg --list |grep ceph<br>ii  ceph-common                           17.2.5-0ubuntu0.22.04.3                 amd64        common utilities to mount and interact with a ceph storage cluster<br>ii  cephadm                               17.2.5-0ubuntu0.22.04.3                 amd64        cephadm utility to bootstrap ceph daemons with systemd and containers<br>ii  libcephfs2                            17.2.5-0ubuntu0.22.04.3                 amd64        Ceph distributed file system client library<br>ii  python3-ceph-argparse                 17.2.5-0ubuntu0.22.04.3                 amd64        Python 3 utility libraries for Ceph CLI<br>ii  python3-ceph-common                   17.2.5-0ubuntu0.22.04.3                 all          Python 3 utility libraries for Ceph<br>ii  python3-cephfs                        17.2.5-0ubuntu0.22.04.3                 amd64        Python 3 libraries for the Ceph libcephfs library<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">cephadm安装</span><br>cephadm --image &lt;ceph镜像地址&gt; bootstrap --mon-ip &lt;mon_ip&gt;  --initial-dashboard-user admin --initial-dashboard-password &lt;passwd&gt; --config &lt;init.conf&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># init-ceph.conf 添加监控本地镜像地址</span></span><br>cat &gt;&gt;init-ceph.conf &lt;&lt;EOF<br>[mgr]<br>mgr/cephadm/container_image_prometheus = harbor.ops.bsnbase.com/ceph/prometheus:v2.33.4<br>mgr/cephadm/container_image_node_exporter = harbor.ops.bsnbase.com/ceph/node-exporter:v1.3.1<br>mgr/cephadm/container_image_grafana = harbor.ops.bsnbase.com/ceph/ceph-grafana:8.3.5<br>mgr/cephadm/container_image_alertmanager = harbor.ops.bsnbase.com/ceph/alertmanager:v0.23.0<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 启动</span></span><br>root@ceph-node1:~# cephadm --image harbor.ops.bsnbase.com/ceph/ceph:v17  bootstrap --mon-ip 10.0.51.215 --config init-ceph.conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">集群状态信息</span><br>ceph -s<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看节点信息</span><br>ceph orch host ls<br><span class="hljs-meta prompt_"># </span><span class="language-bash">拷贝公钥</span><br>ssh-copy-id -f -i /etc/ceph/ceph.pub ceph-node2<br>ssh-copy-id -f -i /etc/ceph/ceph.pub ceph-node3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加节点</span><br>ceph orch host add ceph-node2<br>ceph orch host add ceph-node3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看节点信息</span><br>ceph orch host ls<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加所有可用磁盘到集群(磁盘需裸盘挂载，不做任何操作，不需要格式化)</span><br>ceph orch daemon add osd ceph-node1:/dev/sdb<br>ceph orch daemon add osd ceph-node2:/dev/sdb<br>ceph orch daemon add osd ceph-node3:/dev/sdb<br></code></pre></td></tr></table></figure><h3 id="三、kubernetes安装csi"><a href="#三、kubernetes安装csi" class="headerlink" title="三、kubernetes安装csi"></a><strong>三、kubernetes安装csi</strong></h3><h4 id="官方地址以及版本推荐"><a href="#官方地址以及版本推荐" class="headerlink" title="官方地址以及版本推荐"></a><strong>官方地址以及版本推荐</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">参考官方csi适配的kubenetes版本</span><br>https://github.com/ceph/ceph-csi/<br><br>Ceph CSI Version    Container Orchestrator Name Version Tested<br>v3.6.1  Kubernetes  v1.21, v1.22, v1.23<br>v3.6.0  Kubernetes  v1.21, v1.22, v1.23<br>v3.5.1  Kubernetes  v1.21, v1.22, v1.23<br>v3.5.0  Kubernetes  v1.21, v1.22, v1.23<br>v3.4.0  Kubernetes  v1.20, v1.21, v1.22<br></code></pre></td></tr></table></figure><p> ceph为k8s提供存储服务主要有两种方式，cephfs和ceph rdb；cephfs方式支持k8s的pv的3种访问模式<code>ReadWriteOnce，ReadOnlyMany，ReadWriteMany</code> ，RBD支持<code>ReadWriteOnce，ReadOnlyMany</code>。 </p><h4 id="1、使用rbd-不建议使用"><a href="#1、使用rbd-不建议使用" class="headerlink" title="1、使用rbd(不建议使用)"></a><strong>1、使用rbd(不建议使用)</strong></h4><h5 id="1-1、ceph集群创建pool"><a href="#1-1、ceph集群创建pool" class="headerlink" title="1.1、ceph集群创建pool"></a><strong>1.1、ceph集群创建pool</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 创建名称为 kubernetes pool</span></span><br>ceph osd pool create kubernetes 200<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 初始化 kubernetes poll</span></span><br>rbd poll init kubernetes<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 输出</span></span><br>[client.kubernetes]<br>    key = AQB7aHVk54mYCRAAkXsflBVWU3GGcbgsFlDS1Q==<br>    <br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建k8s访问ceph的用户，在ceph的admin或者mon节点</span><br>ceph auth get-or-create client.kubernetes mon &#x27;allow r&#x27; osd &#x27;allow class-read object_prefix rbd_children, allow rwx pool=kubernetes&#x27; -o ceph.client.kubernetes.keyring<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看key，在ceph的admin或者mon节点</span><br>ceph auth get-key client.admin<br>ceph auth get-key client.kubernetes<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">csi使用的权限使用默认的admin用户，也可以创建新的用户</span><br>[root@ceph1 ~]# cat /etc/ceph/ceph.client.admin.keyring <br>[client.admin]<br>    key = AQB+ialiIn9dDRAAWFOCHqc+2QYHIx9NwWvKmA==<br>    caps mds = &quot;allow *&quot;<br>    caps mgr = &quot;allow *&quot;<br>    caps mon = &quot;allow *&quot;<br>    caps osd = &quot;allow *&quot;    <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取cephfs集群clusterid</span><br>root@ceph-node1:~# ceph -s<br>  cluster:<br>    id:     bcccd25c-fdc8-11ed-ae63-000c29be755f<br>    health: HEALTH_WARN<br>            clock skew detected on mon.ceph-node2<br> <br>  services:<br>    mon: 3 daemons, quorum ceph-node1,ceph-node2,ceph-node3 (age 10h)<br>    mgr: ceph-node1.hleyvm(active, since 2d), standbys: ceph-node2.qacter<br>    mds: 1/1 daemons up, 1 standby<br>    osd: 3 osds: 3 up (since 2d), 3 in (since 2d)<br> <br>  data:<br>    volumes: 1/1 healthy<br>    pools:   3 pools, 49 pgs<br>    objects: 26 objects, 708 KiB<br>    usage:   91 MiB used, 900 GiB / 900 GiB avail<br>    pgs:     49 active+clean<br></code></pre></td></tr></table></figure><h5 id="1-2、ceph-csi配置文件"><a href="#1-2、ceph-csi配置文件" class="headerlink" title="1.2、ceph-csi配置文件"></a><strong>1.2、ceph-csi配置文件</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载github文件,切换分支符合k8s版本</span><br>https://github.com/ceph/ceph-csi/tree/devel/deploy/rbd/kubernetes<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改csi-config-map.yaml文件 增加ceph集群配置</span><br><br>cat &gt;&gt; csi-config-map.yaml &lt;&lt; EOF<br>---<br>apiVersion: v1<br>kind: ConfigMap<br>data:<br>  config.json: |-<br>    [<br>      &#123;<br>        &quot;clusterID&quot;: &quot;bcccd25c-fdc8-11ed-ae63-000c29be755f&quot;,<br>        &quot;monitors&quot;: [<br>          &quot;10.0.51.215:6789&quot;,<br>          &quot;10.0.51.216:6789&quot;,<br>          &quot;10.0.51.217:6789&quot;<br>         ]<br>       &#125;<br>     ]<br>metadata:<br>  name: ceph-csi-config<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建csi-kms-config-map.yaml (这个文件是空的但是必须有，要不然服务启动会报错)</span><br>cat &gt;&gt; csi-kms-config-map.yaml &lt;&lt;EOF<br>---<br>apiVersion: v1<br>kind: ConfigMap<br>data:<br>  config.json: |-<br>    &#123;&#125;<br>metadata:<br>  name: ceph-csi-encryption-kms-config<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建ceph-config-map.yaml</span><br>cat &gt;&gt; ceph-config-map.yaml &lt;&lt;EOF<br>---<br>apiVersion: v1<br>kind: ConfigMap<br>data:<br>  ceph.conf: |<br>    [global]<br>    auth_cluster_required = cephx<br>    auth_service_required = cephx<br>    auth_client_required = cephx<br><br><span class="hljs-meta prompt_">   # </span><span class="language-bash">keyring is a required key and its value should be empty</span><br>  keyring: |<br>metadata:<br>  name: ceph-config<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建csi-rbd-secret.yaml</span><br>cat &gt;&gt; csi-rbd-secret.yaml &lt;&lt; EOF<br>---<br>apiVersion: v1<br>kind: Secret<br>metadata:<br>  name: csi-rbd-secret<br>  namespace: default<br>stringData:<br>  userID: kubernetes<br>  userKey: AQDpuN1jIlPBABAAaGhYtIUSonIiHirrM9SFkQ==<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建cefs-StorageClass.yaml</span><br>cat &gt;&gt; ceph-StorageClass.yaml &lt;&lt; EOF<br>---<br>apiVersion: storage.k8s.io/v1<br>kind: StorageClass<br>metadata:<br>   name: csi-rbd-sc<br>   annotations:<br>     storageclass.beta.kubernetes.io/is-default-class: &quot;true&quot;<br>     storageclass.kubesphere.io/supported-access-modes: &#x27;[&quot;ReadWriteOnce&quot;,&quot;ReadOnlyMany&quot;,&quot;ReadWriteMany&quot;]&#x27;<br>provisioner: rbd.csi.ceph.com<br>parameters:<br>   clusterID: &quot;bcccd25c-fdc8-11ed-ae63-000c29be755f&quot;<br>   pool: &quot;kubernetes&quot;    # &lt;--ToBeReplaced--&gt;<br>   imageFeatures: layering<br>   csi.storage.k8s.io/provisioner-secret-name: csi-rbd-secret<br>   csi.storage.k8s.io/provisioner-secret-namespace: default<br>   csi.storage.k8s.io/controller-expand-secret-name: csi-rbd-secret<br>   csi.storage.k8s.io/controller-expand-secret-namespace: default<br>   csi.storage.k8s.io/node-stage-secret-name: csi-rbd-secret<br>   csi.storage.k8s.io/node-stage-secret-namespace: default<br><span class="hljs-meta prompt_">   #</span><span class="language-bash">csi.storage.k8s.io/fstype: ext4</span><br>reclaimPolicy: Delete<br>allowVolumeExpansion: true<br>mountOptions:<br>   - discard<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">其他文件展示(不需要修改)</span><br>[root@master kubernetes]# ll<br>总用量 56<br>-rw-r--r-- 1 root root  273 5月  30 14:02 ceph-configmap.yaml<br>-rw-r--r-- 1 root root  925 5月  30 15:51 ceph-StorageClass.yaml<br>-rw-r--r-- 1 root root  299 5月  30 14:02 csi-config-map.yaml<br>-rw-r--r-- 1 root root  226 5月  30 14:02 csidriver.yaml<br>-rw-r--r-- 1 root root  111 5月  30 14:11 csi-kms-config-map.yaml<br>-rw-r--r-- 1 root root 1740 5月  30 14:02 csi-nodeplugin-psp.yaml<br>-rw-r--r-- 1 root root 1110 5月  30 14:02 csi-nodeplugin-rbac.yaml<br>-rw-r--r-- 1 root root 1312 5月  30 14:02 csi-provisioner-psp.yaml<br>-rw-r--r-- 1 root root 3116 5月  30 14:02 csi-provisioner-rbac.yaml<br>-rw-r--r-- 1 root root 7471 5月  30 14:02 csi-rbdplugin-provisioner.yaml<br>-rw-r--r-- 1 root root 6397 5月  30 14:02 csi-rbdplugin.yaml<br>-rw-r--r-- 1 root root  195 5月  30 14:02 css-rbd-secret.yaml<br></code></pre></td></tr></table></figure><h4 id="2、使用cephfs"><a href="#2、使用cephfs" class="headerlink" title="2、使用cephfs"></a><strong>2、使用cephfs</strong></h4><p>Ceph文件系统： <a href="https://docs.ceph.com/en/latest/cephfs/">https://docs.ceph.com/en/latest/cephfs/</a></p><h5 id="2-1、创建cephfs"><a href="#2-1、创建cephfs" class="headerlink" title="2.1、创建cephfs"></a><strong>2.1、创建cephfs</strong></h5><p> 对于大多数 Ceph 部署，设置第一个 CephFS 文件系统非常简单： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建cepfs系统 会去启动一个mds容器</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ceph fs volume create &lt;cephfs_name&gt;</span><br>root@ceph-node1:~# ceph fs volume create cephfs<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看pool</span><br>root@ceph-node1:~# ceph osd pool ls<br>.mgr<br>cephfs.cephfs.meta<br>cephfs.cephfs.data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看mds</span><br>root@ceph-node1:~# ceph mds stat<br>cephfs:1 &#123;0=cephfs.ceph-node3.jrkixp=up:active&#125; 1 up:standby<br>root@ceph-node1:~# ceph fs ls<br>name: cephfs, metadata pool: cephfs.cephfs.meta, data pools: [cephfs.cephfs.data ]<br>root@ceph-node1:~# ceph fs get cephfs<br>Filesystem &#x27;cephfs&#x27; (1)<br>fs_name cephfs<br>epoch   5<br>flags   12 joinable allow_snaps allow_multimds_snaps<br>created 2023-06-02T09:21:35.082813+0000<br>modified    2023-06-02T09:21:47.056959+0000<br>tableserver 0<br>root    0<br>session_timeout 60<br>session_autoclose   300<br>max_file_size   1099511627776<br>required_client_features    &#123;&#125;<br>last_failure    0<br>last_failure_osd_epoch  0<br>compat  compat=&#123;&#125;,rocompat=&#123;&#125;,incompat=&#123;1=base v0.20,2=client writeable ranges,3=default file layouts on dirs,4=dir inode in separate object,5=mds uses versioned encoding,6=dirfrag is stored in omap,7=mds uses inline data,8=no anchor table,9=file layout v2,10=snaprealm v2&#125;<br>max_mds 1<br>in  0<br>up  &#123;0=34145&#125;<br>failed  <br>damaged <br>stopped <br>data_pools  [3]<br>metadata_pool   2<br>inline_data disabled<br>balancer    <br>standby_count_wanted    1<br>[mds.cephfs.ceph-node3.jrkixp&#123;0:34145&#125; state up:active seq 2 join_fscid=1 addr [v2:10.0.51.217:6808/185298052,v1:10.0.51.217:6809/185298052] compat &#123;c=[1],r=[1],i=[7ff]&#125;]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">强制 mds 处于失败状态</span><br>ceph fs fail &lt;fs_name&gt;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除非活动的 mds</span><br>ceph fs rm &lt;fs_name&gt; <br></code></pre></td></tr></table></figure><h5 id="2-2、用户管理"><a href="#2-2、用户管理" class="headerlink" title="2.2、用户管理"></a><strong>2.2、用户管理</strong></h5><p>Ceph 把数据以对象的形式存于各存储池中。Ceph 用户必须具有访问存储池的权限才能够读写数据。另外，Ceph 用户必须具有执行权限才能够使用 Ceph 的管理命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 查看所有用户信息</span></span><br>root@ceph-node1:~# ceph auth list<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 获取所有用户的key与权限相关信息</span></span><br>root@ceph-node1:~# ceph auth get client.admin<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 如果只需要某个用户的key信息，可以使用pring-key子命令</span></span><br>root@ceph-node1:~# ceph auth print-key client.admin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">csi使用的权限使用默认的admin用户，也可以创建新的用户</span><br>root@ceph-node1:~# ceph auth get client.admin<br>[client.admin]<br>    key = AQB+n5Jke4W9HxAA52X3NMhpDXO69ytb4ex8ow==<br>    caps mds = &quot;allow *&quot;<br>    caps mgr = &quot;allow *&quot;<br>    caps mon = &quot;allow *&quot;<br>    caps osd = &quot;allow *&quot;<br><br>root@ceph-node1:~# cat /etc/ceph/ceph.client.admin.keyring <br>[client.admin]<br>    key = AQB+n5Jke4W9HxAA52X3NMhpDXO69ytb4ex8ow==<br>    caps mds = &quot;allow *&quot;<br>    caps mgr = &quot;allow *&quot;<br>    caps mon = &quot;allow *&quot;<br>    caps osd = &quot;allow *&quot;<br></code></pre></td></tr></table></figure><h5 id="2-3、ceph-csi配置"><a href="#2-3、ceph-csi配置" class="headerlink" title="2.3、ceph-csi配置"></a><strong>2.3、ceph-csi配置</strong></h5><p>GitHub地址：<a href="https://github.com/ceph/ceph-csi/tree/devel/deploy/cephfs/kubernetes">https://github.com/ceph/ceph-csi/tree/devel/deploy/cephfs/kubernetes</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">官方yaml信息</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载包文件</span><br>git clone https://github.com/ceph/ceph-csi/tree/devel/deploy/cephfs/kubernetes<br><br>[root@master kubernetes]# ll<br>总用量 48<br>-rw-r--r-- 1 root root 5831 5月  31 13:40 csi-cephfsplugin-provisioner.yaml<br>-rw-r--r-- 1 root root 5704 5月  31 13:40 csi-cephfsplugin.yaml<br>-rw-r--r-- 1 root root  229 5月  31 13:40 csidriver.yaml<br>-rw-r--r-- 1 root root 1761 5月  31 13:40 csi-nodeplugin-psp.yaml<br>-rw-r--r-- 1 root root  551 5月  31 13:40 csi-nodeplugin-rbac.yaml<br>-rw-r--r-- 1 root root 1330 5月  31 13:40 csi-provisioner-psp.yaml<br>-rw-r--r-- 1 root root 2898 5月  31 13:40 csi-provisioner-rbac.yaml<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建ceph集群节点信息</span><br>cat &gt;&gt;csi-config-map.yaml &lt;&lt; EOF<br>---<br>apiVersion: v1<br>kind: ConfigMap<br>data:<br>  config.json: |-<br>    [<br>      &#123;<br>        &quot;clusterID&quot;: &quot;ae072378-0118-11ee-8a3e-65e3cff01826&quot;,<br>        &quot;monitors&quot;: [<br>          &quot;10.0.51.215:6789&quot;,<br>          &quot;10.0.51.216:6789&quot;,<br>          &quot;10.0.51.217:6789&quot;<br>         ]<br>       &#125;<br>    ]<br>metadata:<br>  name: ceph-csi-config<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建连接ceph集群screct</span><br>cat &gt;&gt; css-cephfs-secret.yaml &lt;&lt; EOF<br>---<br>kind: Secret<br>apiVersion: v1<br>metadata:<br>  name: csi-cephfs-secret<br>  namespace: default<br>stringData:<br>  userID: admin  <br>  userKey: &quot;AQB+n5Jke4W9HxAA52X3NMhpDXO69ytb4ex8ow==&quot;<br>  adminID: admin  <br>  adminKey: &quot;AQB+n5Jke4W9HxAA52X3NMhpDXO69ytb4ex8ow==&quot;<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建ceph-StorageClass.yaml</span><br>cat &gt;&gt; ceph-StorageClass.yaml &lt;&lt;EOF<br>---<br>apiVersion: storage.k8s.io/v1<br>kind: StorageClass<br>metadata:<br>   name: cephfs<br>   annotations:<br>     storageclass.beta.kubernetes.io/is-default-class: &quot;true&quot;<br>     storageclass.kubesphere.io/supported-access-modes: &#x27;[&quot;ReadWriteOnce&quot;,&quot;ReadOnlyMany&quot;,&quot;ReadWriteMany&quot;]&#x27;<br>provisioner: cephfs.csi.ceph.com<br><span class="hljs-meta prompt_">#</span><span class="language-bash">provisioner: ceph.com/cephfs</span><br>parameters:<br>   clusterID: &quot;ae072378-0118-11ee-8a3e-65e3cff01826&quot;<br>   fsName: &quot;cephfs&quot;<br>   pool: &quot;cephfs.cephfs.data&quot;    # cepfs数据name<br><span class="hljs-meta prompt_">   #</span><span class="language-bash">rootPath: /test</span><br>   csi.storage.k8s.io/provisioner-secret-name: csi-cephfs-secret<br>   csi.storage.k8s.io/provisioner-secret-namespace: default<br>   csi.storage.k8s.io/controller-expand-secret-name: csi-cephfs-secret<br>   csi.storage.k8s.io/controller-expand-secret-namespace: default<br>   csi.storage.k8s.io/node-stage-secret-name: csi-cephfs-secret<br>   csi.storage.k8s.io/node-stage-secret-namespace: default<br><span class="hljs-meta prompt_">   #</span><span class="language-bash">csi.storage.k8s.io/fstype: ext4</span><br>reclaimPolicy: Delete<br>allowVolumeExpansion: true<br>mountOptions:<br>   - discard<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 国内镜像没法拉取 可以提前拉取修改文件镜像地址 (csi-cephfsplugin-provisioner.yaml、csi-cephfsplugin.yaml)</span></span><br>sed -i &#x27;/k8s.gcr.io\/sig-storage/harbor.ops.bsnbase.com\/ceph/g&#x27;  ./*<br>sed -i &#x27;/quay.io\/cephcsi/harbor.ops.bsnbase.com\/ceph/g&#x27; ./*<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 启动</span></span><br>[root@master kubernetes]# kubectl apply -f .<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 查看</span></span><br>[root@master ~]# kubectl get pod <br>NAME                                            READY   STATUS    RESTARTS   AGE<br>csi-cephfsplugin-4wzm5                          3/3     Running   0          30m<br>csi-cephfsplugin-gbf5s                          3/3     Running   0          30m<br>csi-cephfsplugin-l9qhg                          3/3     Running   0          30m<br>csi-cephfsplugin-provisioner-67fb594df9-87ssb   6/6     Running   0          30m<br>csi-cephfsplugin-provisioner-67fb594df9-rdtsf   6/6     Running   0          30m<br>csi-cephfsplugin-provisioner-67fb594df9-z26dp   6/6     Running   0          30m<br>csi-cephfsplugin-qjbrd                          3/3     Running   0          30m<br>csi-cephfsplugin-v2fdh                          3/3     Running   0          30m<br>[root@master kubernetes]# kubectl get sc<br>NAME                  PROVISIONER               RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE<br>cephfs (default)      cephfs.csi.ceph.com       Delete          Immediate              true                   25m<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># pvc测试</span></span><br>cat &gt;&gt;cephfs-test.yaml &lt;&lt;EOF<br>apiVersion: v1<br>kind: PersistentVolumeClaim<br>metadata:<br>  name: ceph-test<br>  labels: &#123;&#125;<br>  finalizers:<br>    - kubernetes.io/pvc-protection<br>spec:<br>  accessModes:<br>    - ReadWriteMany<br>  volumeMode: Filesystem<br>  resources:<br>    requests:<br>      storage: 5Gi<br>  storageClassName: cephfs<br>EOF<br></code></pre></td></tr></table></figure><h3 id="四、移除cephadm集群-谨慎操作"><a href="#四、移除cephadm集群-谨慎操作" class="headerlink" title="四、移除cephadm集群(谨慎操作)"></a><strong>四、移除cephadm集群(谨慎操作)</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">为了破坏集群并删除该集群中存储的所有数据，请暂停 cephadm 以避免部署新的守护进程</span><br>root@ceph-node1:~# ceph orch pause<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看集群<span class="hljs-built_in">id</span></span><br>root@ceph-node1:~# ceph fsid<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除</span><br>root@ceph-node1:~# cephadm rm-cluster --force --zap-osds --fsid &lt;fsid&gt;<br></code></pre></td></tr></table></figure><h3 id="ceph运维命令-待更新"><a href="#ceph运维命令-待更新" class="headerlink" title="ceph运维命令(待更新)"></a><strong>ceph运维命令(待更新)</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置grafanf密码</span><br>cat &gt;&gt; grafana.yaml &lt;&lt;EOF<br>service_type: grafana<br>spec:<br>    initial_admin_password: &lt;grafana_passwd&gt;<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看集群配置信息</span><br>ceph config dump<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加集群配置信息</span><br>ceph config set &lt;value&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu安装kubesphere 高可用架构</title>
    <link href="/2023/09/12/ubuntu%E5%AE%89%E8%A3%85kubesphere%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    <url>/2023/09/12/ubuntu%E5%AE%89%E8%A3%85kubesphere%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu安装kubesphere-高可用架构"><a href="#Ubuntu安装kubesphere-高可用架构" class="headerlink" title="Ubuntu安装kubesphere 高可用架构"></a>Ubuntu安装kubesphere 高可用架构</h1><h3 id="环境-以三个master，三个worker为例"><a href="#环境-以三个master，三个worker为例" class="headerlink" title="环境(以三个master，三个worker为例)"></a><strong>环境(以三个master，三个worker为例)</strong></h3><h5 id="主机操作系统-Ubuntu-22-04-LTS"><a href="#主机操作系统-Ubuntu-22-04-LTS" class="headerlink" title="主机操作系统 Ubuntu 22.04 LTS"></a><strong>主机操作系统 Ubuntu 22.04 LTS</strong></h5><p><strong>注意：以下出现得IP均为测试实例主机IP地址，若部署需替换</strong> </p><table><thead><tr><th>主机名称</th><th>部署服务</th></tr></thead><tbody><tr><td>master1</td><td>keepalived、haproxy、kubesphere、glusterfs</td></tr><tr><td>master2</td><td>keepalived、haproxy、kubesphere、glusterfs</td></tr><tr><td>master3</td><td>keepalived、haproxy、kubesphere、glusterfs</td></tr><tr><td>node1</td><td>glusterfs、kubesphere</td></tr><tr><td>node2</td><td>glusterfs、kubesphere</td></tr><tr><td>node3</td><td>glusterfs、kubesphere</td></tr></tbody></table><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a><strong>软件</strong></h3><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>docker-ce</td><td>20.10.8</td></tr><tr><td>keepalived</td><td>1.3.5-19</td></tr><tr><td>haproxy</td><td>1.5.18-9</td></tr><tr><td>kk</td><td>1.1.1</td></tr><tr><td>glusterfs</td><td>9.4-1</td></tr><tr><td>heketi</td><td>9.0.0</td></tr><tr><td>kubesphere</td><td>v3.1.1</td></tr><tr><td>kubernetes</td><td>v1.20.6</td></tr></tbody></table><h3 id="关闭ubuntu版selinux"><a href="#关闭ubuntu版selinux" class="headerlink" title="关闭ubuntu版selinux"></a><strong>关闭ubuntu版selinux</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">systemctl stop  apparmor <br>systemctl disable apparmor<br></code></pre></td></tr></table></figure><h3 id="配置基础依赖"><a href="#配置基础依赖" class="headerlink" title="配置基础依赖"></a><strong>配置基础依赖</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Shell">修改apt源<br>sed -i &#x27;s/archive.ubuntu.com/mirrors.aliyun.com/g&#x27;  /etc/apt/sources.list <br>sed -i &#x27;s/security.ubuntu.com/mirrors.aliyun.com/g&#x27;  /etc/apt/sources.list<br>apt-get update<br>apt-get --download-only install  socat conntrack glusterfs-server -y<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 安装包会在/var/cache/apt/archives/ 将deb结尾包压缩上传到需要安装得主机即可(目录可以指定)</span></span><br>dpkg -i *.deb<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 查询</span></span><br>apt-cache policy &lt;软件名称&gt;<br><br>保证主机时间同步<br>timedatectl set-timezone &quot;Asia/Shanghai&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#如果主机磁盘不足得话可以删除</span></span><br>apt-get clean all<br></code></pre></td></tr></table></figure><h3 id="配置-x2F-etc-x2F-hosts"><a href="#配置-x2F-etc-x2F-hosts" class="headerlink" title="配置&#x2F;etc&#x2F;hosts"></a><strong>配置&#x2F;etc&#x2F;hosts</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root@localhost ~]# cat /etc/hosts<br>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4<br>::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<br><br>192.168.40.120  master1<br>192.168.40.121  master2<br>192.168.40.122  master3<br>192.168.40.123  node1<br>192.168.40.124  node2<br>192.168.40.125  node3<br>10.0.51.33      harbor.ops.bsnbase.com<br></code></pre></td></tr></table></figure><h2 id="在线安装docker国内"><a href="#在线安装docker国内" class="headerlink" title="在线安装docker国内"></a><strong>在线安装docker国内</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 下载依赖</span></span><br>apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 导入key</span></span><br>curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 导入源</span></span><br>add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 安装</span></span><br>apt-get -y install docker-ce<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 添加daemon.json</span></span><br>&#123;<br>    &quot;registry-mirrors&quot;: [&quot;https://obou6wyb.mirror.aliyuncs.com&quot;],<br>    &quot;log-driver&quot;:&quot;json-file&quot;,<br>    &quot;log-opts&quot;:&#123;&quot;max-size&quot; :&quot;100m&quot;,&quot;max-file&quot;:&quot;1&quot;&#125;,<br>    &quot;dns&quot;:[&quot;10.233.0.3&quot;],<br>    &quot;insecure-registries&quot;:[&quot;harbor.ops.bsnbase.com&quot;]<br>&#125;<br>systemctl daemon-reload <br>systemctl start docker <br>systemctl stop docker<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 查看</span></span><br>root@node1:~# docker -v<br>Docker version 20.10.17, build 100c701<br></code></pre></td></tr></table></figure><h3 id="在线安装docker国际版"><a href="#在线安装docker国际版" class="headerlink" title="在线安装docker国际版"></a><strong>在线安装docker国际版</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 更新ubuntu</span></span><br>apt update<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 添加docker库</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 安装依赖软件</span></span><br>apt install apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 添加docker官方GPG密钥</span></span><br>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 添加docker库</span></span><br>echo &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 再次更新</span></span><br>apt update<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 安装Docker</span></span><br>apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 可选版本安装</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 查看可以安装得版本</span></span><br>apt-cache madison docker-ce<br>docker-ce | 5:20.10.17~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages<br>    docker-ce | 5:20.10.16~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages<br>    docker-ce | 5:20.10.15~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages<br>    docker-ce | 5:20.10.14~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages<br>    docker-ce | 5:20.10.13~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages<br>    <br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 选版本安装</span></span><br>apt install docker-ce=5:20.10.16~3-0~ubuntu-jammy docker-ce-cli=5:20.10.16~3-0~ubuntu-jammy containerd.io<br></code></pre></td></tr></table></figure><h2 id="离线安装docker"><a href="#离线安装docker" class="headerlink" title="离线安装docker"></a><strong>离线安装docker</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs Shell">下载docker 安装包<br><br>https://mirrors.aliyun.com/docker-ce/linux/static/stable/x86_64/docker-20.10.8.tgz<br><br>tar zxf docker-20.10.8.tgz<br>cp docker/* /usr/bin/<br><br>创建启动脚本<br><br>cat /usr/lib/systemd/system/docker.service<br>[Unit]<br>Description=Docker Application Container Engine<br>Documentation=https://docs.docker.com<br>After=network-online.target firewalld.service containerd.service<br>Wants=network-online.target<br><span class="hljs-meta prompt_">#</span><span class="language-bash">Requires=docker.socket containerd.service</span><br><br>[Service]<br>Type=notify<br><span class="hljs-meta prompt_"># </span><span class="language-bash">the default is not to use systemd <span class="hljs-keyword">for</span> cgroups because the delegate issues still</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">exists and systemd currently does not support the cgroup feature <span class="hljs-built_in">set</span> required</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">for</span> containers run by docker</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br>ExecStart=/usr/bin/dockerd<br>ExecReload=/bin/kill -s HUP $MAINPID<br>TimeoutSec=0<br>RestartSec=2<br>Restart=always<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Note that StartLimit* options were moved from <span class="hljs-string">&quot;Service&quot;</span> to <span class="hljs-string">&quot;Unit&quot;</span> <span class="hljs-keyword">in</span> systemd 229.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Both the old, and new location are accepted by systemd 229 and up, so using the old location</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">to make them work <span class="hljs-keyword">for</span> either version of systemd.</span><br>StartLimitBurst=3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Note that StartLimitInterval was renamed to StartLimitIntervalSec <span class="hljs-keyword">in</span> systemd 230.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Both the old, and new name are accepted by systemd 230 and up, so using the old name to make</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">this option work <span class="hljs-keyword">for</span> either version of systemd.</span><br>StartLimitInterval=60s<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Having non-zero Limit*s causes performance problems due to accounting overhead</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">in</span> the kernel. We recommend using cgroups to <span class="hljs-keyword">do</span> container-local accounting.</span><br>LimitNOFILE=infinity<br>LimitNPROC=infinity<br>LimitCORE=infinity<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Comment TasksMax <span class="hljs-keyword">if</span> your systemd version does not support it.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Only systemd 226 and above support this option.</span><br>TasksMax=infinity<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">set</span> delegate <span class="hljs-built_in">yes</span> so that systemd does not reset the cgroups of docker containers</span><br>Delegate=yes<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">kill</span> only the docker process, not all processes <span class="hljs-keyword">in</span> the cgroup</span><br>KillMode=process<br>OOMScoreAdjust=-500<br><br>[Install]<br>WantedBy=multi-user.target<br><br>创建 daemon.json<br>mkdir /etc/docker<br>cat /etc/docker/daemon.json<br>&#123; <br>&quot;registry-mirrors&quot;: [&quot;https://obou6wyb.mirror.aliyuncs.com&quot;],<br>&quot;log-driver&quot;:&quot;json-file&quot;,<br>&quot;log-opts&quot;:&#123;&quot;max-size&quot; :&quot;100m&quot;,&quot;max-file&quot;:&quot;1&quot;&#125;,<br>&quot;insecure-registries&quot;:[&quot;harbor.ops.bsnbase.com&quot;]<br>&#125;<br><br>需要注意得是配置私有仓库地址 需要在/etc/hosts 解析相对应的地址<br></code></pre></td></tr></table></figure><h2 id="离线安装haproxy"><a href="#离线安装haproxy" class="headerlink" title="离线安装haproxy"></a><strong>离线安装haproxy</strong></h2><h3 id="获取离线部署包"><a href="#获取离线部署包" class="headerlink" title="获取离线部署包"></a><strong>获取离线部署包</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Shell">找一台新装的主机<br>apt-get --download-only install haproxy keepalived<br><br>离线包文件<br>root@node3:/var/cache/apt/archives# ll<br>total 3664<br>-rw-r--r-- 1 root root 1634662 Mar  1 02:17 haproxy_2.4.14-1ubuntu1_amd64.deb<br>-rw-r--r-- 1 root root   42170 Mar 25 00:58 ipvsadm_1%3a1.31-1build2_amd64.deb<br>-rw-r--r-- 1 root root  452554 Mar 25 00:57 keepalived_1%3a2.2.4-0.2build1_amd64.deb<br>-rw-r--r-- 1 root root  140026 Mar 25 19:37 liblua5.3-0_5.3.6-1build1_amd64.deb<br>-rw-r--r-- 1 root root   59070 Feb  9 13:59 libnl-3-200_3.5.0-0.1_amd64.deb<br>-rw-r--r-- 1 root root   12412 Feb  9 13:59 libnl-genl-3-200_3.5.0-0.1_amd64.deb<br>-rw-r--r-- 1 root root    5274 Apr  5 16:14 libsensors-config_1%3a3.6.0-7ubuntu1_all.deb<br>-rw-r--r-- 1 root root   26346 Apr  5 16:14 libsensors5_1%3a3.6.0-7ubuntu1_amd64.deb<br>-rw-r--r-- 1 root root  200614 Apr 23 05:24 libsnmp-base_5.9.1+dfsg-1ubuntu2.1_all.deb<br>-rw-r--r-- 1 root root 1069086 Apr 23 05:24 libsnmp40_5.9.1+dfsg-1ubuntu2.1_amd64.deb<br>-rw-r----- 1 root root       0 Jul  8 16:57 lock<br>-rw-r--r-- 1 root root   74800 May  5  2018 lrzsz_0.12.21-10_amd64.deb<br>drwx------ 2 _apt root    4096 Jul 15 15:41 partial/<br></code></pre></td></tr></table></figure><h3 id="配置haproxy-cgf"><a href="#配置haproxy-cgf" class="headerlink" title="配置haproxy.cgf"></a><strong>配置haproxy.cgf</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root@localhost ~]# cat /etc/haproxy/haproxy.cfg<br>global<br>    log /dev/log  local0 warning<br>    chroot      /var/lib/haproxy<br>    pidfile     /var/run/haproxy.pid<br>    maxconn     4000<br>    user        haproxy<br>    group       haproxy<br>    daemon<br>   <br>   stats socket /var/lib/haproxy/stats<br>   <br>defaults<br>  log global<br>  option  httplog<br>  option  dontlognull<br>        timeout connect 5000<br>        timeout client 50000<br>        timeout server 50000<br>   <br>frontend kube-apiserver<br>  bind *:16443   ## 端口需要开通，后续需要使用<br>  mode tcp<br>  option tcplog<br>  default_backend kube-apiserver<br>   <br>backend kube-apiserver<br>    mode tcp<br>    option tcplog<br>    option tcp-check<br>    balance roundrobin<br>    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100<br>    server kube-apiserver-1 192.168.40.120:6443 check # Replace the IP address with your own.<br>    server kube-apiserver-2 192.168.40.121:6443 check # Replace the IP address with your own.<br>    server kube-apiserver-3 192.168.40.122:6443 check # Replace the IP address with your own.<br></code></pre></td></tr></table></figure><h3 id="启动haproxy"><a href="#启动haproxy" class="headerlink" title="启动haproxy"></a><strong>启动haproxy</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">systemctl start haproxy<br>systemctl enable haproxy<br>检查端口 6443<br></code></pre></td></tr></table></figure><h2 id="离线安装keepalived"><a href="#离线安装keepalived" class="headerlink" title="离线安装keepalived"></a><strong>离线安装keepalived</strong></h2><h3 id="获取离线部署包-1"><a href="#获取离线部署包-1" class="headerlink" title="获取离线部署包"></a><strong>获取离线部署包</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">apt-get --download-only install  keepalived<br></code></pre></td></tr></table></figure><h3 id="配置keepalived-conf"><a href="#配置keepalived-conf" class="headerlink" title="配置keepalived.conf"></a><strong>配置keepalived.conf</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># master 配置</span></span><br>global_defs &#123;<br>  notification_email &#123;<br>  &#125;<br>  router_id LVS_DEVEL<br>  vrrp_skip_check_adv_addr<br>  vrrp_garp_interval 0<br>  vrrp_gna_interval 0<br>&#125;<br>   <br>vrrp_script chk_haproxy &#123;<br><span class="hljs-meta prompt_">  #</span><span class="language-bash">script <span class="hljs-string">&quot;killall -0 haproxy&quot;</span></span><br>  script &quot;/etc/keepalived/check_haproxy.sh&quot;<br>  interval 2<br>  weight 2<br>&#125;<br>   <br>vrrp_instance haproxy-vip &#123;<br>  state MASTER<br>  priority 100<br>  interface eth0                       # Network card<br>  virtual_router_id 60<br>  advert_int 1<br>  authentication &#123;<br>    auth_type PASS<br>    auth_pass 1111<br>  &#125;<br>  unicast_src_ip 192.168.40.120      # The IP address of this machine<br>  unicast_peer &#123;<br>    192.168.40.121                         # The IP address of peer machines<br>    192.168.40.122                         # The IP address of peer machines<br>  &#125;<br>   <br>  virtual_ipaddress &#123;<br>    192.168.40.111/32                  # The VIP address  需注意子网掩码位数<br>  &#125;<br>   <br>  track_script &#123;<br>    chk_haproxy<br>  &#125;<br>&#125;<br><br>其他两条主机 只需要修改unicast_src_ip 为当前主机的IP unicast_peer 里面配置备节点的IP，state设为BACKUP<br></code></pre></td></tr></table></figure><h3 id="配置check-haproxy-sh"><a href="#配置check-haproxy-sh" class="headerlink" title="配置check_haproxy.sh"></a><strong>配置check_haproxy.sh</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>killall -0 haproxy<br>if [[ $? != 0 ]];then<br>   systemctl stop keepalived<br>else<br>  exit 0<br>fi<br></code></pre></td></tr></table></figure><h3 id="启动keepalived"><a href="#启动keepalived" class="headerlink" title="启动keepalived"></a><strong>启动keepalived</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">systemctl start keepalived<br>systemctl enable keepalived<br>检查服务 ps -ef|grep keep<br></code></pre></td></tr></table></figure><h3 id="测试vip飘移动"><a href="#测试vip飘移动" class="headerlink" title="测试vip飘移动"></a><strong>测试vip飘移动</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">在有vip的主机上 关闭systemctl stop haproxy 查看vip是否删除 并且已经在备节点中的一台生成<br>需要注意 关闭haproxy后 keepalived也一同关闭了 恢复需要先启动haproxy 在启动keepalived<br></code></pre></td></tr></table></figure><h2 id="离线安装glusterfs"><a href="#离线安装glusterfs" class="headerlink" title="离线安装glusterfs"></a><strong>离线安装glusterfs</strong></h2><h3 id="获取离线部署包-2"><a href="#获取离线部署包-2" class="headerlink" title="获取离线部署包"></a><strong>获取离线部署包</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">依赖</span><br>apt-get install software-properties-common<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加社区源(版本可以根据要求修改)</span><br>add-apt-repository ppa:gluster/glusterfs-9<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装</span><br>apt-get install glusterfs-server -y<br><br>root@node2:/bsn/iso/glusterfs# ll<br>total 4072<br>-rw-r--r-- 1 root root   22642 Jul 11 17:38 attr_1%3a2.5.1-1build1_amd64.deb<br>-rw-r--r-- 1 root root  179350 Jul 11 17:38 glusterfs-cli_10.1-1_amd64.deb<br>-rw-r--r-- 1 root root   26372 Jul 11 17:38 glusterfs-client_10.1-1_amd64.deb<br>-rw-r--r-- 1 root root 2768338 Jul 11 17:38 glusterfs-common_10.1-1_amd64.deb<br>-rw-r--r-- 1 root root   22248 Jul 11 17:38 glusterfs-server_10.1-1_amd64.deb<br>-rw-r--r-- 1 root root   50410 Jul 11 17:38 keyutils_1.6.1-2ubuntu3_amd64.deb<br>-rw-r--r-- 1 root root   93926 Jul 11 17:38 libevent-core-2.1-7_2.1.12-stable-1build3_amd64.deb<br>-rw-r--r-- 1 root root   77272 Jul 11 17:38 libgfapi0_10.1-1_amd64.deb<br>-rw-r--r-- 1 root root   27542 Jul 11 17:38 libgfchangelog0_10.1-1_amd64.deb<br>-rw-r--r-- 1 root root   47090 Jul 11 17:38 libgfrpc0_10.1-1_amd64.deb<br>-rw-r--r-- 1 root root   22142 Jul 11 17:38 libgfxdr0_10.1-1_amd64.deb<br>-rw-r--r-- 1 root root    5936 Jul 11 17:38 libglusterd0_10.1-1_amd64.deb<br>-rw-r--r-- 1 root root  287966 Jul 11 17:38 libglusterfs0_10.1-1_amd64.deb<br>-rw-r--r-- 1 root root   43534 Jul 11 17:38 libnfsidmap1_1%3a2.6.1-1ubuntu1_amd64.deb<br>-rw-r--r-- 1 root root  240754 Jul 11 17:38 nfs-common_1%3a2.6.1-1ubuntu1_amd64.deb<br>-rw-r--r-- 1 root root  119104 Jul 11 17:38 psmisc_23.4-2build3_amd64.deb<br>-rw-r--r-- 1 root root   31318 Jul 11 17:38 python3-prettytable_2.5.0-2_all.deb<br>-rw-r--r-- 1 root root   21924 Jul 11 17:38 python3-wcwidth_0.2.5+dfsg1-1_all.deb<br>-rw-r--r-- 1 root root   46608 Jul 11 17:38 rpcbind_1.2.6-2build1_amd64.deb<br></code></pre></td></tr></table></figure><h3 id="加载内核模块"><a href="#加载内核模块" class="headerlink" title="加载内核模块"></a><strong>加载内核模块</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 所有glusterfs主机执行</span></span><br>echo dm_thin_pool | sudo tee -a /etc/modules<br>echo dm_snapshot | sudo tee -a /etc/modules<br>echo dm_mirror | sudo tee -a /etc/modules<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 安装 thin-provisioning-tools</span></span><br>apt-get -y install thin-provisioning-tools<br></code></pre></td></tr></table></figure><h3 id="启动glusterfs"><a href="#启动glusterfs" class="headerlink" title="启动glusterfs"></a><strong>启动glusterfs</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell">systemctl start glusterd<br>systemctl enable glusterd<br>检查服务<br>systemctl status glusterd<br></code></pre></td></tr></table></figure><h3 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a><strong>配置集群</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Shell">gluster peer probe node2<br>gluster peer probe node3<br><br>验证<br><br>gluster peer status<br>Number of Peers: 2<br><br>Hostname: node3<br>Uuid: 72a367c5-1e30-47d5-8302-cf4765698cff<br>State: Peer in Cluster (Connected)<br>Other names:<br>ip <br><br>Hostname: node2<br>Uuid: ee8df3f1-f3ad-4558-b7e2-d431bd6c110a<br>State: Peer in Cluster (Connected)<br>Other names:<br>ip <br></code></pre></td></tr></table></figure><h2 id="离线安装heketi"><a href="#离线安装heketi" class="headerlink" title="离线安装heketi"></a><strong>离线安装heketi</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 获取离线部署包</span></span><br>wget https://github.com/heketi/heketi/releases/download/v7.0.0/heketi-v7.0.0.linux.amd64.tar.gz<br><br>tar -xf heketi-v7.0.0.linux.amd64.tar.gz<br>cd heketi<br>cp heketi /usr/bin<br>cp heketi-cli /usr/bin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 创建 Heketi 服务文件</span></span><br>vi /lib/systemd/system/heketi.service<br>[Unit]<br>Description=Heketi Server<br>[Service]<br>Type=simple<br>WorkingDirectory=/var/lib/heketi<br>ExecStart=/usr/bin/heketi --config=/etc/heketi/heketi.json<br>Restart=on-failure<br>StandardOutput=syslog<br>StandardError=syslog<br>[Install]<br>WantedBy=multi-user.target<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 创建 Heketi 文件夹</span></span><br>mkdir -p /var/lib/heketi<br>mkdir -p /etc/heketi<br></code></pre></td></tr></table></figure><h3 id="创建heketi使用得ssh密钥"><a href="#创建heketi使用得ssh密钥" class="headerlink" title="创建heketi使用得ssh密钥"></a><strong>创建heketi使用得ssh密钥</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Shell">创建sshkey(Ubuntu 22.04版本需要更换公私钥格式)<br>ssh-keygen -m PEM  -q -f /etc/heketi/heketi_key -N &#x27;&#x27;<br>发送sshkey<br>ssh-copy-id -i /etc/heketi/heketi_key.pub node1<br>ssh-copy-id -i /etc/heketi/heketi_key.pub node2<br>ssh-copy-id -i /etc/heketi/heketi_key.pub node3<br><br>授权heketi_key 644<br>chmod 644 heketi_key<br><br>修改ssh配置 <br>PubkeyAuthentication yes<br>PubkeyAcceptedKeyTypes=+ssh-rsa<br></code></pre></td></tr></table></figure><h3 id="配置heketi"><a href="#配置heketi" class="headerlink" title="配置heketi"></a><strong>配置heketi</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs Shell">编辑配置文件vi /etc/heketi/heketi.json 修改段落executor 处，设置成ssh<br>&#123;<br>  &quot;_port_comment&quot;: &quot;Heketi Server Port Number&quot;,<br>  &quot;port&quot;: &quot;8080&quot;,<br><br>  &quot;_use_auth&quot;: &quot;Enable JWT authorization. Please enable for deployment&quot;,<br>  &quot;use_auth&quot;: false,<br><br>  &quot;_jwt&quot;: &quot;Private keys for access&quot;,<br>  &quot;jwt&quot;: &#123;<br>    &quot;_admin&quot;: &quot;Admin has access to all APIs&quot;,<br>    &quot;admin&quot;: &#123;<br>      &quot;key&quot;: &quot;123456&quot;<br>    &#125;,<br>    &quot;_user&quot;: &quot;User only has access to /volumes endpoint&quot;,<br>    &quot;user&quot;: &#123;<br>      &quot;key&quot;: &quot;123456&quot;<br>    &#125;<br>  &#125;,<br><br>  &quot;_glusterfs_comment&quot;: &quot;GlusterFS Configuration&quot;,<br>  &quot;glusterfs&quot;: &#123;<br>    &quot;_executor_comment&quot;: [<br>      &quot;Execute plugin. Possible choices: mock, ssh&quot;,<br>      &quot;mock: This setting is used for testing and development.&quot;,<br>      &quot;      It will not send commands to any node.&quot;,<br>      &quot;ssh:  This setting will notify Heketi to ssh to the nodes.&quot;,<br>      &quot;      It will need the values in sshexec to be configured.&quot;,<br>      &quot;kubernetes: Communicate with GlusterFS containers over&quot;,<br>      &quot;            Kubernetes exec api.&quot;<br>    ],<br>    &quot;executor&quot;: &quot;ssh&quot;,<br><br>    &quot;_sshexec_comment&quot;: &quot;&quot;,<br>    &quot;sshexec&quot;: &#123;<br>      &quot;keyfile&quot;: &quot;/etc/heketi/heketi_key&quot;,<br>      &quot;user&quot;: &quot;root&quot;<br>    &#125;,<br><br>    &quot;_kubeexec_comment&quot;: &quot;Kubernetes configuration&quot;,<br>    &quot;kubeexec&quot;: &#123;<br>      &quot;host&quot; :&quot;https://kubernetes.host:8443&quot;,<br>      &quot;cert&quot; : &quot;/path/to/crt.file&quot;,<br>      &quot;insecure&quot;: false,<br>      &quot;user&quot;: &quot;kubernetes username&quot;,<br>      &quot;password&quot;: &quot;password for kubernetes user&quot;,<br>      &quot;namespace&quot;: &quot;OpenShift project or Kubernetes namespace&quot;,<br>      &quot;fstab&quot;: &quot;Optional: Specify fstab file on node.  Default is /etc/fstab&quot;<br>    &#125;,<br><br>    &quot;_db_comment&quot;: &quot;Database file name&quot;,<br>    &quot;db&quot;: &quot;/var/lib/heketi/heketi.db&quot;,<br>    &quot;brick_max_size_gb&quot; : 1024,<br>    &quot;brick_min_size_gb&quot; : 1,<br>    &quot;max_bricks_per_volume&quot; : 33,<br><br>    &quot;_loglevel_comment&quot;: [<br>      &quot;Set log level. Choices are:&quot;,<br>      &quot;  none, critical, error, warning, info, debug&quot;,<br>      &quot;Default is warning&quot;<br>    ],<br>    &quot;loglevel&quot; : &quot;debug&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="启动heketi"><a href="#启动heketi" class="headerlink" title="启动heketi"></a><strong>启动heketi</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">systemctl start heketi.service<br>systemctl enable heketi.service<br>systemctl status heketi.service<br></code></pre></td></tr></table></figure><h3 id="创建topology-json"><a href="#创建topology-json" class="headerlink" title="创建topology.json"></a><strong>创建topology.json</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Shell">&#123;<br> &quot;clusters&quot;: [<br>    &#123;<br>      &quot;nodes&quot;: [<br>        &#123;<br>          &quot;node&quot;: &#123;<br>            &quot;hostnames&quot;: &#123;<br>              &quot;manage&quot;: [<br>                &quot;node1&quot; <br>             ],<br>             &quot;storage&quot;: [<br>               &quot;192.168.40.123&quot; <br>             ]<br>           &#125;,<br>           &quot;zone&quot;: 1<br>         &#125;,<br>         &quot;devices&quot;: [<br>           &quot;/dev/sdc&quot; <br>         ]<br>       &#125;,<br>        &#123;<br>          &quot;node&quot;: &#123;<br>            &quot;hostnames&quot;: &#123;<br>              &quot;manage&quot;: [<br>                &quot;node2&quot; <br>             ],<br>             &quot;storage&quot;: [<br>               &quot;192.168.40.124&quot; <br>             ]<br>           &#125;,<br>           &quot;zone&quot;: 1<br>         &#125;,<br>         &quot;devices&quot;: [<br>           &quot;/dev/sdc&quot; <br>         ]<br>       &#125;,<br>       &#123;<br>          &quot;node&quot;: &#123;<br>            &quot;hostnames&quot;: &#123;<br>              &quot;manage&quot;: [<br>                &quot;node3&quot;<br>             ],<br>             &quot;storage&quot;: [<br>               &quot;192.168.40.125&quot;  <br>             ]<br>           &#125;,<br>           &quot;zone&quot;: 1<br>         &#125;,<br>         &quot;devices&quot;: [<br>           &quot;/dev/sdc&quot;<br>         ]<br>       &#125;<br>     ]<br>   &#125;<br> ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置磁盘为lvm"><a href="#配置磁盘为lvm" class="headerlink" title="配置磁盘为lvm"></a><strong>配置磁盘为lvm</strong></h3><h5 id="三台主机上需要有一块裸盘，无需挂载，需要转换成物理卷，供gluster创建分区"><a href="#三台主机上需要有一块裸盘，无需挂载，需要转换成物理卷，供gluster创建分区" class="headerlink" title="三台主机上需要有一块裸盘，无需挂载，需要转换成物理卷，供gluster创建分区"></a><strong>三台主机上需要有一块裸盘，无需挂载，需要转换成物理卷，供gluster创建分区</strong></h5><p>三台主机都要执行 pvcreate &#x2F;dev&#x2F;sdc</p><h3 id="加载heketi"><a href="#加载heketi" class="headerlink" title="加载heketi"></a><strong>加载heketi</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Shell">export HEKETI_CLI_SERVER=http://localhost:8080<br>heketi-cli topology load --json=/etc/heketi/topology.json<br><br>预计输出 全部是ok即可，保存cluser id<br>[root@localhost ~]# heketi-cli topology load --json=/etc/heketi/topology.json<br>Creating cluster ... ID: 2a90bc8255fc44b6b6fc36f5d65cc7db<br>        Allowing file volumes on cluster.<br>        Allowing block volumes on cluster.<br>        Creating node gfs1 ... ID: 10cd09040be405b67af4fa5e6165e50c<br>                Adding device /dev/sdc ... OK<br>        Creating node gfs2 ... ID: 12a2e7a7d6438bae4609e8de879e157e<br>                Adding device /dev/sdc ... OK<br>        Creating node gfs3 ... ID: 464f48e831dd5e9ed02d7a74350edddf<br>                Adding device /dev/sdc ... OK<br></code></pre></td></tr></table></figure><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a><strong>检查</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">heketi-cli cluster info 2a90bc8255fc44b6b6fc36f5d65cc7db<br>查看磁盘大小是否和实际一致<br></code></pre></td></tr></table></figure><h2 id="离线部署kubesphere"><a href="#离线部署kubesphere" class="headerlink" title="离线部署kubesphere"></a><strong>离线部署kubesphere</strong></h2><h3 id="1、部署docker私有仓库"><a href="#1、部署docker私有仓库" class="headerlink" title="1、部署docker私有仓库"></a><strong>1、部署docker私有仓库</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载离线安装包</span></span><br>wget https://github.com/goharbor/harbor/releases/download/v2.2.0<br>tar -xf harbor-offline-install-v2.2.0.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 解压后并备份配置文件,创建ssl证书目录</span></span><br>[root@harbor harbor]# ll -h<br>总用量 15G<br>drwxr-xr-x  2   10000 10000    6 8月   4 21:17 ca_download<br>drwxr-xr-x  3 root    root    20 8月   4 21:17 common<br>-rw-r--r--  1 root    root  3.3K 5月  15 2021 common.sh<br>drwx------ 19 polkitd input 4.0K 12月 21 10:11 database<br>-rw-r--r--  1 root    root  6.0K 8月   4 21:17 docker-compose.yml<br>-rw-r--r--  1 root    root  484M 5月  15 2021 harbor.v2.2.2.tar.gz<br>-rw-r--r--  1 root    root  7.8K 8月   4 21:17 harbor.yml<br>-rw-r--r--  1 root    root  7.7K 5月  15 2021 harbor.yml.tmpl<br>-rwxr-xr-x  1 root    root  2.5K 5月  15 2021 install.sh<br>drwxr-xr-x  2   10000 10000    6 8月   4 21:17 job_logs<br>-rw-r--r--  1 root    root   12K 5月  15 2021 LICENSE<br>-rwxr-xr-x  1 root    root  1.9K 5月  15 2021 prepare<br>drwxr-xr-x  2 polkitd input   22 1月  11 16:03 redis<br>drwxr-xr-x  3   10000 10000   20 8月   4 21:20 registry<br>drwxr-xr-x  6 root    root    58 8月   4 21:17 secret<br>drwxr-xr-x  2 root    root    56 8月  11 14:11 ssl<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 修改配置 hostname和证书dns扩展相匹配，后续所有镜像前缀均为hostname</span></span><br>cd harbor<br>cp harbor.yml.tmpl harbor.yml<br>    5 hostname: domin<br>    17 certificate: /data/harbor/ssl/tls.cert<br>    18 private_key: /data/harbor/ssl/tls.key<br>    34 harbor_admin_password: Harbor12345<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 创建访问域证书(可选)</span></span><br>openssl genrsa -out tls.key 2048<br>openssl  req -new -x509 -key tls.key -out tls.cert -days 360 -subj /CN=*.bsngate.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 执行安装脚本</span></span><br>./install.sh<br></code></pre></td></tr></table></figure><h4 id="现有私有仓库迁移-参考"><a href="#现有私有仓库迁移-参考" class="headerlink" title="现有私有仓库迁移(参考)"></a><strong>现有私有仓库迁移(参考)</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载离线安装包</span></span><br>wget https://github.com/goharbor/harbor/releases/download/v2.2.0<br>tar -xf harbor-offline-install-v2.2.0.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 解压文件后并拷贝目录 common、database、registry、ssl 执行install.sh</span></span><br>./install.sh<br></code></pre></td></tr></table></figure><h3 id="2、下载kubesphere离线安装包-能上网机器上执行"><a href="#2、下载kubesphere离线安装包-能上网机器上执行" class="headerlink" title="2、下载kubesphere离线安装包(能上网机器上执行)"></a><strong>2、下载kubesphere离线安装包(能上网机器上执行)</strong></h3><h5 id="编译kk和kubeadm-证书100年，可不做"><a href="#编译kk和kubeadm-证书100年，可不做" class="headerlink" title="编译kk和kubeadm(证书100年，可不做)"></a><strong>编译kk和kubeadm(证书100年，可不做)</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## kubeadm</span></span><br>wget https://github.com/kubernetes/kubernetes/archive/refs/tags/v1.20.6.zip<br>agt-get install -y unzip<br>unzip v1.20.6.zip<br>cd kubernetes-1.20.6<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 修改证书有效性</span></span> <br>vi  cmd/kubeadm/app/constants/constants.go<br>// CertificateValidity defines the validity for all the signed certificates generated by kubeadm<br>        // CertificateValidity = time.Hour * 24 * 365<br>        CertificateValidity = time.Hour * 24 * 365 * 100<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 修改签发年限</span></span>        <br>vim staging/src/k8s.io/client-go/util/cert/cert.go<br> // NotAfter:              now.Add(duration365d * 10).UTC(),<br>                NotAfter:              now.Add(duration365d * 100).UTC(),<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载依赖</span></span><br>yum groupinstall &quot;Development Tools&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 编译</span></span><br>make all WHAT=cmd/kubeadm GOFLAGS=-v<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 查看sha256sum</span></span><br>sha256sum kubeadm<br>3af7918faa88586d7155e778608160156740ddc48c6d85848620f37db58fac91  kubeadm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## kubukey kk</span></span><br>git  clone https://github.com/kubesphere/kubekey.git<br>git checkout -b remotes/origin/release-1.1<br>cd kubekey/pkg/files<br>vim file.go<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 修改kubeadm sha256码为上面编译好的kubeadm码</span></span><br>&quot;v1.20.6&quot;:  &quot;3af7918faa88586d7155e778608160156740ddc48c6d85848620f37db58fac91&quot;,<br></code></pre></td></tr></table></figure><h5 id="下载离线安装包"><a href="#下载离线安装包" class="headerlink" title="下载离线安装包"></a><strong>下载离线安装包</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载镜像列表</span></span><br>curl -L -O https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/images-list.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载 offline-installation-tool.sh</span></span><br>curl -L -O https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/offline-installation-tool.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 添加执行权限</span></span><br>chmod +x offline-installation-tool.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载 Kubernetes 二进制文件 (替换之前编译好得kubeadm)</span></span><br>./offline-installation-tool.sh -b -v v1.20.6<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#### 如果不能访问Google 添加环境变量</span></span><br>export KKZONE=cn;./offline-installation-tool.sh -b -v v1.20.6<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 拉取镜像</span></span><br>./offline-installation-tool.sh -s -l images-list.txt -d ./kubesphere-images<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 修改脚本换成自己仓库项目，推送到私有仓库</span></span><br>imageurl=$registryurl&quot;/library/&quot;$image  imageurl=$registryurl&quot;/kubesphere/&quot;$image <br>./offline-installation-tool.sh -l images-list.txt -d ./kubesphere-images -r harbor.ops.bsnbase.com <br></code></pre></td></tr></table></figure><h3 id="3、离线安装kubesphere"><a href="#3、离线安装kubesphere" class="headerlink" title="3、离线安装kubesphere"></a><strong>3、离线安装kubesphere</strong></h3><h6 id="官方离线文档地址"><a href="#官方离线文档地址" class="headerlink" title="官方离线文档地址"></a><strong>官方离线文档地址</strong></h6><p><a href="https://v3-1.docs.kubesphere.io/zh/docs/installing-on-linux/introduction/air-gapped-installation/">https://v3-1.docs.kubesphere.io/zh/docs/installing-on-linux/introduction/air-gapped-installation/</a></p><h5 id="1、生成模板文件"><a href="#1、生成模板文件" class="headerlink" title="1、生成模板文件"></a><strong>1、生成模板文件</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">./kk create config --with-kubernetes v1.20.6 --with-kubesphere v3.1.1 -f config.yaml<br></code></pre></td></tr></table></figure><h5 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a><strong>2、修改配置文件</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs Shell">1、修改hosts主机配置信息<br>2、添加registry.privateRegistry 为自己私有仓库地址 privateRegistry: harbor.ops.bsnbase.com<br>3、添加gfs存储挂载路径<br>- name: glusterfs<br>    namespace: kube-system<br>    sources:<br>      yaml:<br>        path:<br>        - /root/glusterfs-sc.yaml<br>config.yaml(高可用架构)<br>apiVersion: kubekey.kubesphere.io/v1alpha1<br>kind: Cluster<br>metadata:<br>  name: bsn<br>spec:<br>  hosts:<br>  - &#123;name: master1, address: 192.168.40.120, internalAddress: 192.168.40.120, user: root, password: 123456&#125;<br>  - &#123;name: master2, address: 192.168.40.121, internalAddress: 192.168.40.121, user: root, password: 123456&#125;<br>  - &#123;name: master3, address: 192.168.40.122, internalAddress: 192.168.40.122, user: root, password: 123456&#125;<br>  - &#123;name: node1, address: 192.168.40.123, internalAddress: 192.168.40.123, user: root, password: 123456&#125;<br>  - &#123;name: node2, address: 192.168.40.124, internalAddress: 192.168.40.124, user: root, password: 123456&#125;<br>  - &#123;name: node3, address: 192.168.40.125, internalAddress: 192.168.40.125, user: root, password: 123456&#125;<br>  roleGroups:<br>    etcd:<br>    - master1<br>    - master2<br>    - master3<br>    master: <br>    - master1<br>    - master2<br>    - master3<br>    worker:<br>    - node1<br>    - node2<br>    - node3<br>  controlPlaneEndpoint:<br>    domain: lb.kubesphere.local<br>    address: &quot;192.168.40.111&quot;<br>    port: 16443<br>  kubernetes:<br>    version: v1.20.6<br>    imageRepo: kubesphere<br>    clusterName: cluster.local<br>  network:<br>    plugin: calico<br>    kubePodsCIDR: 10.233.64.0/18<br>    kubeServiceCIDR: 10.233.0.0/18<br>  registry:<br>    registryMirrors: []<br>    insecureRegistries: []<br>    privateRegistry: harbor.ops.bsnbase.com<br>  addons:<br>  - name: glusterfs<br>    namespace: kube-system<br>    sources:<br>      yaml:<br>        path:<br>        #- /root/kubesphere/glusterfs-sc.yaml<br>        - ./glusterfs-sc.yaml<br><br>---<br>apiVersion: installer.kubesphere.io/v1alpha1<br>kind: ClusterConfiguration<br>metadata:<br>  name: ks-installer<br>  namespace: kubesphere-system<br>  labels:<br>    version: v3.1.1<br>spec:<br>  persistence:<br>    storageClass: &quot;&quot;       <br>  authentication:<br>    jwtSecret: &quot;&quot;<br>  zone: &quot;&quot;<br>  local_registry: &quot;&quot;        <br>  etcd:<br>    monitoring: false      <br>    endpointIps: localhost  <br>    port: 2379             <br>    tlsEnable: true<br>  common:<br>    redis:<br>      enabled: false<br>    redisVolumSize: 2Gi <br>    openldap:<br>      enabled: false<br>    openldapVolumeSize: 2Gi  <br>    minioVolumeSize: 10Gi<br>    monitoring:<br>      endpoint: http://prometheus-operated.kubesphere-monitoring-system.svc:9090<br>    es:  <br>      elasticsearchMasterVolumeSize: 4Gi   <br>      elasticsearchDataVolumeSize: 20Gi   <br>      logMaxAge: 7          <br>      elkPrefix: logstash<br>      basicAuth:<br>        enabled: false<br>        username: &quot;&quot;<br>        password: &quot;&quot;<br>      externalElasticsearchUrl: &quot;&quot;<br>      externalElasticsearchPort: &quot;&quot;  <br>  console:<br>    enableMultiLogin: true <br>    port: 30880<br>  alerting:       <br>    enabled: false<br>    # thanosruler:<br>    #   replicas: 1<br>    #   resources: &#123;&#125;<br>  auditing:    <br>    enabled: false<br>  devops:           <br>    enabled: false<br>    jenkinsMemoryLim: 2Gi     <br>    jenkinsMemoryReq: 1500Mi <br>    jenkinsVolumeSize: 8Gi   <br>    jenkinsJavaOpts_Xms: 512m  <br>    jenkinsJavaOpts_Xmx: 512m<br>    jenkinsJavaOpts_MaxRAM: 2g<br>  events:          <br>    enabled: false<br>    ruler:<br>      enabled: true<br>      replicas: 2<br>  logging:         <br>    enabled: false<br>    logsidecar:<br>      enabled: true<br>      replicas: 2<br>  metrics_server:             <br>    enabled: false<br>  monitoring:<br>    storageClass: &quot;&quot;<br>    prometheusMemoryRequest: 400Mi  <br>    prometheusVolumeSize: 10Gi  <br>  multicluster:<br>    clusterRole: none <br>  network:<br>    networkpolicy:<br>      enabled: false<br>    ippool:<br>      type: none<br>    topology:<br>      type: none<br>  openpitrix:   ###应用商店 不需要可设置成false，安装会更快<br>    store:<br>      enabled: true<br>  servicemesh:    <br>    enabled: false  <br>  kubeedge:<br>    enabled: false<br>    cloudCore:<br>      nodeSelector: &#123;&quot;node-role.kubernetes.io/worker&quot;: &quot;&quot;&#125;<br>      tolerations: []<br>      cloudhubPort: &quot;10000&quot;<br>      cloudhubQuicPort: &quot;10001&quot;<br>      cloudhubHttpsPort: &quot;10002&quot;<br>      cloudstreamPort: &quot;10003&quot;<br>      tunnelPort: &quot;10004&quot;<br>      cloudHub:<br>        advertiseAddress: <br>          - &quot;&quot;           <br>        nodeLimit: &quot;100&quot;<br>      service:<br>        cloudhubNodePort: &quot;30000&quot;<br>        cloudhubQuicNodePort: &quot;30001&quot;<br>        cloudhubHttpsNodePort: &quot;30002&quot;<br>        cloudstreamNodePort: &quot;30003&quot;<br>        tunnelNodePort: &quot;30004&quot;<br>    edgeWatcher:<br>      nodeSelector: &#123;&quot;node-role.kubernetes.io/worker&quot;: &quot;&quot;&#125;<br>      tolerations: []<br>      edgeWatcherAgent:<br>        nodeSelector: &#123;&quot;node-role.kubernetes.io/worker&quot;: &quot;&quot;&#125;<br>        tolerations: []<br></code></pre></td></tr></table></figure><h6 id="config-yaml-一个master，一个etcd，方便以后扩容"><a href="#config-yaml-一个master，一个etcd，方便以后扩容" class="headerlink" title="config.yaml(一个master，一个etcd，方便以后扩容)"></a><strong>config.yaml(一个master，一个etcd，方便以后扩容)</strong></h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Shell">...<br>  hosts:<br>  - &#123;name: master1, address: 192.168.40.120, internalAddress: 192.168.40.120, user: root, password: 123456&#125;<br>  - &#123;name: node1, address: 192.168.40.123, internalAddress: 192.168.40.123, user: root, password: 123456&#125;<br>  - &#123;name: node2, address: 192.168.40.124, internalAddress: 192.168.40.124, user: root, password: 123456&#125;<br>  - &#123;name: node3, address: 192.168.40.125, internalAddress: 192.168.40.125, user: root, password: 123456&#125;<br>  roleGroups:<br>    etcd:<br>    - master1<br>    master: <br>    - master1<br>    worker:<br>    - node1<br>    - node2<br>    - node3<br>...<br><span class="hljs-meta prompt_">#</span><span class="language-bash">单节点</span><br>...<br>  controlPlaneEndpoint:<br>    domain: lb.kubesphere.local<br>    address: &quot;&quot;<br>    port: 6443<br>...<br></code></pre></td></tr></table></figure><h6 id="glusterfs-sc-yaml"><a href="#glusterfs-sc-yaml" class="headerlink" title="glusterfs-sc.yaml"></a><strong>glusterfs-sc.yaml</strong></h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Shell">apiVersion: v1<br>kind: Secret<br>metadata:<br>  name: heketi-secret<br>  namespace: kube-system<br>type: kubernetes.io/glusterfs<br>data:<br>  key: &quot;MTIzNDU2&quot;<br>---<br>apiVersion: storage.k8s.io/v1<br>kind: StorageClass<br>metadata:<br>  annotations:<br>    storageclass.beta.kubernetes.io/is-default-class: &quot;true&quot;<br>    storageclass.kubesphere.io/supported-access-modes: &#x27;[&quot;ReadWriteOnce&quot;,&quot;ReadOnlyMany&quot;,&quot;ReadWriteMany&quot;]&#x27;<br>  name: glusterfs<br>parameters:<br>  clusterid: &quot;4e8c9b531917d318d9e5d9d0b58e34d8&quot;<br>  gidMax: &quot;50000&quot;<br>  gidMin: &quot;40000&quot;<br>  restauthenabled: &quot;true&quot;<br>  resturl: &quot;http://192.168.40.123:8080&quot;<br>  restuser: admin<br>  secretName: heketi-secret<br>  secretNamespace: kube-system<br>  volumetype: &quot;replicate:2&quot;<br>provisioner: kubernetes.io/glusterfs<br>reclaimPolicy: Delete<br>volumeBindingMode: Immediate<br>allowVolumeExpansion: true<br></code></pre></td></tr></table></figure><h5 id="3、启动节点"><a href="#3、启动节点" class="headerlink" title="3、启动节点"></a><strong>3、启动节点</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 多节点集群启动</span></span><br>./kk create cluster -f config.yaml<br><br>apt-get install conntrack socat -y<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 安装完成后验证</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####################################################</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##              Welcome to KubeSphere!           ###</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####################################################</span></span><br><br>Console: http://192.168.0.2:30880<br>Account: admin<br>Password: P@88w0rd<br><br>NOTES：<br>  1. After you log into the console, please check the<br>     monitoring status of service components in<br>     the &quot;Cluster Management&quot;. If any service is not<br>     ready, please wait patiently until all components<br>     are up and running.<br>  2. Please change the default password after login.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####################################################</span></span><br>https://kubesphere.io             20xx-xx-xx xx:xx:xx<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####################################################</span></span><br></code></pre></td></tr></table></figure><h5 id="kubesphere中文文档地址"><a href="#kubesphere中文文档地址" class="headerlink" title="kubesphere中文文档地址"></a><strong>kubesphere中文文档地址</strong></h5><p><a href="https://www.bookstack.cn/read/kubesphere-3.1-zh/807436df96a6eb8a.md">https://www.bookstack.cn/read/kubesphere-3.1-zh/807436df96a6eb8a.md</a></p><h3 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a><strong>错误解决</strong></h3><h5 id="1、heketi启动连不上节点错误展示及解决"><a href="#1、heketi启动连不上节点错误展示及解决" class="headerlink" title="1、heketi启动连不上节点错误展示及解决"></a><strong>1、heketi启动连不上节点错误展示及解决</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># heketi-cli topology load --json=/etc/heketi/topology.json</span></span> <br>Unable to create node: New Node doesn&#x27;t have glusterd running<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># systemctl status heketi</span></span><br>userauth_pubkey: key type ssh-rsa not in PubkeyAcceptedKeyTypes [preauth]<br><br>userauth_pubkey: key type ssh-rsa not in PubkeyAcceptedAlgorithms [preauth]<br><br>GitHub actions workflow error: ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain<br><br>cmdexec.(*CmdExecutor).Glusterd Check: ssh: handshake failed: ssh: unable to authenticate, attempted methods [none publickey], no supported methods remain<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 解决方案</span></span><br>生成ssh公私钥对需要使用pem格式<br>ssh-keygen -m PEM  -q -f /etc/heketi/heketi_key -N &#x27;&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># sshd服务配置修改添加</span></span><br>PubkeyAuthentication yes<br>PubkeyAcceptedKeyTypes=+ssh-rsa<br></code></pre></td></tr></table></figure><h5 id="2、k8s集群-ks-install-连接10-233-0-1-443-超时"><a href="#2、k8s集群-ks-install-连接10-233-0-1-443-超时" class="headerlink" title="2、k8s集群 ks-install 连接10.233.0.1:443 超时"></a><strong>2、k8s集群 ks-install 连接10.233.0.1:443 超时</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell">ubuntu自带dns服务导致<br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭dns服务</span><br>systemctl stop systemd-resolved.service<br>rm -f /etc/resolv.conf<br>vim  /etc/resolv.conf<br></code></pre></td></tr></table></figure><h5 id="3、topology中gfs地址不能使用域名"><a href="#3、topology中gfs地址不能使用域名" class="headerlink" title="3、topology中gfs地址不能使用域名"></a><strong>3、topology中gfs地址不能使用域名</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#创建pvc报错信息</span></span><br>glusterfs server node ip address node1.sbp-gcisdctr.hksarg must be a valid IP address, (e.g. 10.9.8.7)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 使用ceph部署k8s</title>
    <link href="/2023/09/12/Ubuntu%20%E4%BD%BF%E7%94%A8ceph%E9%83%A8%E7%BD%B2k8s/"/>
    <url>/2023/09/12/Ubuntu%20%E4%BD%BF%E7%94%A8ceph%E9%83%A8%E7%BD%B2k8s/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu-使用ceph部署k8s"><a href="#Ubuntu-使用ceph部署k8s" class="headerlink" title="Ubuntu 使用ceph部署k8s"></a>Ubuntu 使用ceph部署k8s</h1><p>在 Ubuntu 22.04 使用 cephadm(容器部署) 安装 ceph 集群，并配置为 k8s 的存储类。 </p><p><strong>ceph官方地址</strong>：  <a href="https://docs.ceph.com/en/latest/">Welcome to Ceph — Ceph Documentation</a> </p><p><strong>端口说明(tcp协议)：</strong></p><table><thead><tr><th>服务</th><th>端口</th><th>说明</th></tr></thead><tbody><tr><td>mon</td><td>6789</td><td>ceph集群互通，k8s集群互通</td></tr><tr><td>osd</td><td>6800-7300</td><td>osd守护进程端口</td></tr><tr><td>mgr</td><td>8443、9283</td><td>8443(web服务) 9283(prometheus metrics)</td></tr><tr><td>prometheus</td><td>9095</td><td></td></tr><tr><td>grafana</td><td>3000</td><td></td></tr><tr><td>node-exporter</td><td>9100</td><td></td></tr><tr><td>alertmanager</td><td>9093</td><td></td></tr><tr><td>master1</td><td></td><td>keepalived、haproxy、kubesphere</td></tr><tr><td>node1</td><td></td><td>kubesphere</td></tr></tbody></table><h3 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a><strong>一、准备</strong></h3><h4 id="1、-准备-2-台服务器用于安装-ceph-集群，2台部署k8s-服务器信息如下："><a href="#1、-准备-2-台服务器用于安装-ceph-集群，2台部署k8s-服务器信息如下：" class="headerlink" title="1、 准备 2 台服务器用于安装 ceph 集群，2台部署k8s 服务器信息如下："></a><strong>1、 准备 2 台服务器用于安装 ceph 集群，2台部署k8s 服务器信息如下：</strong></h4><table><thead><tr><th>主机名</th><th>IP</th><th>配置</th><th>磁盘</th><th>服务</th></tr></thead><tbody><tr><td>ceph-node1</td><td>10.0.6.224</td><td>1 vCPU；2 GiB</td><td>系统盘 20G + 数据盘 50G</td><td>mon、osd，mgr、prometheus、grafana、node-expoter</td></tr><tr><td>ceph-node2</td><td>10.0.6.225</td><td>1 vCPU；2 GiB</td><td>系统盘 20G + 数据盘 50G</td><td>mon、osd，mgr、node-expoter</td></tr><tr><td>master1</td><td>10.0.6.223</td><td>2 vCPU；4 GiB</td><td>系统盘 20G + 数据盘 50G</td><td>keepalived、haproxy、kubesphere</td></tr><tr><td>node1</td><td>10.0.6.223</td><td>2 vCPU；4 GiB</td><td>系统盘 20G + 数据盘 50G</td><td></td></tr></tbody></table><h4 id="2、修改主机host文件-每台主机都执行"><a href="#2、修改主机host文件-每台主机都执行" class="headerlink" title="2、修改主机host文件(每台主机都执行)"></a><strong>2、修改主机host文件(每台主机都执行)</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Bash">root@ceph-node1:~<span class="hljs-comment"># cat /etc/hosts</span><br>127.0.0.1 localhost<br>127.0.1.1 ubuntu<br><br><span class="hljs-comment"># The following lines are desirable for IPv6 capable hosts</span><br>::1     ip6-localhost ip6-loopback<br>fe00::0 ip6-localnet<br>ff00::0 ip6-mcastprefix<br>ff02::1 ip6-allnodes<br>ff02::2 ip6-allrouters<br><br>10.0.6.224 ceph-node1<br>10.0.6.225 ceph-node2<br>10.0.6.222 master1<br>10.0.6.223 node1<br>10.0.130.49 harbor.bsnbase.com<br></code></pre></td></tr></table></figure><h4 id="3、修改主机hostname-每台主机都执行"><a href="#3、修改主机hostname-每台主机都执行" class="headerlink" title="3、修改主机hostname(每台主机都执行)"></a><strong>3、修改主机hostname(每台主机都执行)</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">10.0.6.224</span><br>hostnamectl set-hostname  ceph-node1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">10.0.6.225</span><br>hostnamectl set-hostname  ceph-node2<br></code></pre></td></tr></table></figure><h4 id="4、密钥分发-第一台主机执行"><a href="#4、密钥分发-第一台主机执行" class="headerlink" title="4、密钥分发(第一台主机执行)"></a><strong>4、密钥分发(第一台主机执行)</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ceph-node1创建密钥</span><br>ssh-keygen -t rsa<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置</span><br>sed -i &#x27;s/PermitRootLogin yes/#PermitRootLogin yes/g&#x27; /etc/ssh/ssh_config<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">发送</span><br>ssh-copy-id -i .ssh/id_rsa.pub  ceph-node1<br>ssh-copy-id -i .ssh/id_rsa.pub  ceph-node2<br></code></pre></td></tr></table></figure><h4 id="5、时间同步"><a href="#5、时间同步" class="headerlink" title="5、时间同步"></a><strong>5、时间同步</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置时区 Asia/Shanghai</span><br>timedatectl set-timezone Asia/Shanghai<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看状态</span><br>timedatectl status<br></code></pre></td></tr></table></figure><h4 id="6、安装docker"><a href="#6、安装docker" class="headerlink" title="6、安装docker"></a><strong>6、安装docker</strong></h4><p># 在线安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 下载依赖</span></span><br><br>apt-get update<br>apt-get -y install apt-transport-https ca-certificates curl gnupg-agent software-properties-common<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 导入key</span></span><br>curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 导入源</span></span><br>add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 安装</span></span><br>apt-get -y install docker-ce<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 添加daemon.json</span></span><br>&#123;<br>    &quot;registry-mirrors&quot;: [&quot;https://obou6wyb.mirror.aliyuncs.com&quot;],<br>    &quot;log-driver&quot;:&quot;json-file&quot;,<br>    &quot;log-opts&quot;:&#123;&quot;max-size&quot; :&quot;100m&quot;,&quot;max-file&quot;:&quot;1&quot;&#125;,<br>    &quot;insecure-registries&quot;:[&quot;harbor.ops.bsnbase.com&quot;]<br>&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动并设置开机自启动</span><br>systemctl enable --now docker<br><br>root@ceph-node1:~# docker -v<br>Docker version 24.0.2, build cb74dfc<br></code></pre></td></tr></table></figure><p># 离线安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">https://mirrors.aliyun.com/docker-ce/linux/static/stable/x86_64/docker-24.0.2.tgz<br><br>tar zxf docker-24.0.2.tgz<br>cp docker/* /usr/bin/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">拷贝 docker.service、daemon.json</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br></code></pre></td></tr></table></figure><h4 id="7、下载cephadm离线包"><a href="#7、下载cephadm离线包" class="headerlink" title="7、下载cephadm离线包"></a><strong>7、下载cephadm离线包</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ubuntu22.04默认装有ceph17.2.5的源</span><br>apt update<br>apt-get -y --download-only install -d -o=dir::cache=./ cephadm ceph-common<br>.<br>├── archives<br>│   ├── cephadm_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>│   ├── ceph-common相关包<br>│   ├── lock<br>│   └── partial<br>├── pkgcache.bin<br>└── srcpkgcache.bin<br></code></pre></td></tr></table></figure><h3 id="二、部署ceph"><a href="#二、部署ceph" class="headerlink" title="二、部署ceph"></a><strong>二、部署ceph</strong></h3><p>cephadm部署文档地址: <a href="https://docs.ceph.com/en/latest/cephadm/install/#cephadm-deploying-new-cluster">https://docs.ceph.com/en/latest/cephadm/install/#cephadm-deploying-new-cluster</a></p><h4 id="1、在线安装"><a href="#1、在线安装" class="headerlink" title="1、在线安装"></a><strong>1、在线安装</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 cephadm</span><br>apt install cephadm -y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启用集群</span><br>cephadm bootstrap --mon-ip 10.0.51.215 --initial-dashboard-user admin --initial-dashboard-password 123456 <br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 ceph-cli</span><br>apt install ceph-common -y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">集群状态信息</span><br>ceph -s<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看节点信息</span><br>ceph orch host ls<br><span class="hljs-meta prompt_"># </span><span class="language-bash">拷贝公钥</span><br>ssh-copy-id -f -i /etc/ceph/ceph.pub ceph-node2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加节点</span><br>ceph orch host add ceph-node2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看节点信息</span><br>ceph orch host ls<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加所有可用磁盘到集群(磁盘需裸盘挂载，不做任何操作，不需要格式化)</span><br>ceph orch daemon add osd ceph-node1:/dev/sdb<br>ceph orch daemon add osd ceph-node2:/dev/sdb<br>ceph orch daemon add osd ceph-node3:/dev/sdb<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看 osd 状态</span><br>ceph osd tree<br></code></pre></td></tr></table></figure><h4 id="2、离线安装"><a href="#2、离线安装" class="headerlink" title="2、离线安装"></a><strong>2、离线安装</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">集群第一台主机拷贝之前下载的deb包</span><br>root@ceph-node1:/bsn/iso<br><br>-rw-r--r-- 1 root root 22579388 May 10 00:09 ceph-common_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root    89502 May 10 00:09 cephadm_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root   340678 Jan 28  2022 ibverbs-providers_39.0-1_amd64.deb<br>-rw-r--r-- 1 root root   160172 Mar 17  2022 libbabeltrace1_1.5.8-2build1_amd64.deb<br>-rw-r--r-- 1 root root   222588 Mar 17  2022 libboost-context1.74.0_1.74.0-14ubuntu3_amd64.deb<br>-rw-r--r-- 1 root root   264432 Mar 17  2022 libboost-filesystem1.74.0_1.74.0-14ubuntu3_amd64.deb<br>-rw-r--r-- 1 root root   245050 Mar 17  2022 libboost-iostreams1.74.0_1.74.0-14ubuntu3_amd64.deb<br>-rw-r--r-- 1 root root   310732 Mar 17  2022 libboost-program-options1.74.0_1.74.0-14ubuntu3_amd64.deb<br>-rw-r--r-- 1 root root   261992 Mar 17  2022 libboost-thread1.74.0_1.74.0-14ubuntu3_amd64.deb<br>-rw-r--r-- 1 root root   744378 May 10 00:09 libcephfs2_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root    19806 Jan 25  2022 libdaxctl1_72.1-1_amd64.deb<br>-rw-r--r-- 1 root root   212402 Mar 24  2022 libgoogle-perftools4_2.9.1-0ubuntu3_amd64.deb<br>-rw-r--r-- 1 root root    69304 Jan 28  2022 libibverbs1_39.0-1_amd64.deb<br>-rw-r--r-- 1 root root   140026 Mar 25  2022 liblua5.3-0_5.3.6-1build1_amd64.deb<br>-rw-r--r-- 1 root root    57676 Jan 25  2022 libndctl6_72.1-1_amd64.deb<br>-rw-r--r-- 1 root root    59070 Feb  9  2022 libnl-3-200_3.5.0-0.1_amd64.deb<br>-rw-r--r-- 1 root root   179554 Feb  9  2022 libnl-route-3-200_3.5.0-0.1_amd64.deb<br>-rw-r--r-- 1 root root    22478 Mar 25  2022 libnuma1_2.0.14-3ubuntu2_amd64.deb<br>-rw-r--r-- 1 root root    41108 Mar 25  2022 liboath0_2.6.7-3build1_amd64.deb<br>-rw-r--r-- 1 root root    81392 Mar 25  2022 libpmem1_1.11.1-3build1_amd64.deb<br>-rw-r--r-- 1 root root   123994 Mar 25  2022 libpmemobj1_1.11.1-3build1_amd64.deb<br>-rw-r--r-- 1 root root    39340 Mar 17  2022 librabbitmq4_0.10.0-1ubuntu2_amd64.deb<br>-rw-r--r-- 1 root root  3573064 May 10 00:09 librados2_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root   492352 May 10 00:09 libradosstriper1_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root  3545306 May 10 00:09 librbd1_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root    71226 Jan 28  2022 librdmacm1_39.0-1_amd64.deb<br>-rw-r--r-- 1 root root    17486 Mar 26  2022 libsnappy1v5_1.1.8-1build3_amd64.deb<br>-rw-r--r-- 1 root root    98202 Mar 24  2022 libtcmalloc-minimal4_2.9.1-0ubuntu3_amd64.deb<br>-rw-r--r-- 1 root root    34568 May 10 00:09 python3-ceph-argparse_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root    55718 May 10 00:09 python3-ceph-common_17.2.5-0ubuntu0.22.04.3_all.deb<br>-rw-r--r-- 1 root root   174018 May 10 00:09 python3-cephfs_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root    31318 Feb 15  2022 python3-prettytable_2.5.0-2_all.deb<br>-rw-r--r-- 1 root root   354232 May 10 00:09 python3-rados_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root   323690 May 10 00:09 python3-rbd_17.2.5-0ubuntu0.22.04.3_amd64.deb<br>-rw-r--r-- 1 root root    21924 Jan 28  2022 python3-wcwidth_0.2.5+dfsg1-1_all.deb<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">离线安装</span><br>root@ceph-node1:/bsn/iso# dpkg -i *.deb<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查</span><br>root@ceph-node1:~# dpkg --list |grep ceph<br>ii  ceph-common                           17.2.5-0ubuntu0.22.04.3                 amd64        common utilities to mount and interact with a ceph storage cluster<br>ii  cephadm                               17.2.5-0ubuntu0.22.04.3                 amd64        cephadm utility to bootstrap ceph daemons with systemd and containers<br>ii  libcephfs2                            17.2.5-0ubuntu0.22.04.3                 amd64        Ceph distributed file system client library<br>ii  python3-ceph-argparse                 17.2.5-0ubuntu0.22.04.3                 amd64        Python 3 utility libraries for Ceph CLI<br>ii  python3-ceph-common                   17.2.5-0ubuntu0.22.04.3                 all          Python 3 utility libraries for Ceph<br>ii  python3-cephfs                        17.2.5-0ubuntu0.22.04.3                 amd64        Python 3 libraries for the Ceph libcephfs library<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">cephadm安装</span><br>cephadm --image &lt;ceph镜像地址&gt; bootstrap --mon-ip &lt;mon_ip&gt;  --initial-dashboard-user admin --initial-dashboard-password &lt;passwd&gt; --config &lt;init.conf&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># init-ceph.conf 添加监控本地镜像地址</span></span><br>cat &gt;&gt;init-ceph.conf &lt;&lt;EOF<br>[mgr]<br>mgr/cephadm/container_image_prometheus = harbor.ops.bsnbase.com/ceph/prometheus:v2.33.4<br>mgr/cephadm/container_image_node_exporter = harbor.ops.bsnbase.com/ceph/node-exporter:v1.3.1<br>mgr/cephadm/container_image_grafana = harbor.ops.bsnbase.com/ceph/ceph-grafana:8.3.5<br>mgr/cephadm/container_image_alertmanager = harbor.ops.bsnbase.com/ceph/alertmanager:v0.23.0<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 启动</span></span><br>root@ceph-node1:~# cephadm --image harbor.ops.bsnbase.com/ceph/ceph:v17  bootstrap --mon-ip 10.0.51.215 --config init-ceph.conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">集群状态信息</span><br>ceph -s<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看节点信息</span><br>ceph orch host ls<br><span class="hljs-meta prompt_"># </span><span class="language-bash">拷贝公钥</span><br>ssh-copy-id -f -i /etc/ceph/ceph.pub ceph-node2<br>ssh-copy-id -f -i /etc/ceph/ceph.pub ceph-node3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加节点docker</span><br>ceph orch host add ceph-node2<br>ceph orch host add ceph-node3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看节点信息</span><br>ceph orch host ls<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加所有可用磁盘到集群(磁盘需裸盘挂载，不做任何操作，不需要格式化)</span><br>ceph orch daemon add osd ceph-node1:/dev/sdb<br>ceph orch daemon add osd ceph-node2:/dev/sdb<br>ceph orch daemon add osd ceph-node3:/dev/sdb<br></code></pre></td></tr></table></figure><h3 id="三、部署k8s基础环境"><a href="#三、部署k8s基础环境" class="headerlink" title="三、部署k8s基础环境"></a>三<strong>、部署k8s基础环境</strong></h3><h4 id="1、关闭ubuntu版selinux"><a href="#1、关闭ubuntu版selinux" class="headerlink" title="1、关闭ubuntu版selinux"></a>1、<strong>关闭ubuntu版selinux</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">systemctl stop  apparmor <br>systemctl disable apparmor<br></code></pre></td></tr></table></figure><h4 id="2、配置基础依赖"><a href="#2、配置基础依赖" class="headerlink" title="2、配置基础依赖"></a>2、<strong>配置基础依赖</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Shell">修改apt源<br>sed -i &#x27;s/archive.ubuntu.com/mirrors.aliyun.com/g&#x27;  /etc/apt/sources.list <br>sed -i &#x27;s/security.ubuntu.com/mirrors.aliyun.com/g&#x27;  /etc/apt/sources.list<br>apt-get update<br>apt install -y conntrack socat<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 安装包会在/var/cache/apt/archives/ 将deb结尾包压缩上传到需要安装得主机即可(目录可以指定)</span></span><br>dpkg -i *.deb<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 查询</span></span><br>apt-cache policy &lt;软件名称&gt;<br><br>保证主机时间同步<br>timedatectl set-timezone &quot;Asia/Shanghai&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#如果主机磁盘不足得话可以删除</span></span><br>apt-get clean all<br></code></pre></td></tr></table></figure><h4 id="3、在线安装docker国内"><a href="#3、在线安装docker国内" class="headerlink" title="3、在线安装docker国内"></a>3、<strong>在线安装docker国内</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 下载依赖</span></span><br>apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 导入key</span></span><br>curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 导入源</span></span><br>add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 安装</span></span><br>apt-get -y install docker-ce<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 添加daemon.json</span></span><br>&#123;<br>    &quot;registry-mirrors&quot;: [&quot;https://obou6wyb.mirror.aliyuncs.com&quot;],<br>    &quot;log-driver&quot;:&quot;json-file&quot;,<br>    &quot;log-opts&quot;:&#123;&quot;max-size&quot; :&quot;100m&quot;,&quot;max-file&quot;:&quot;1&quot;&#125;,<br>    &quot;dns&quot;:[&quot;10.233.0.3&quot;],<br>    &quot;insecure-registries&quot;:[&quot;harbor.ops.bsnbase.com&quot;]<br>&#125;<br>systemctl daemon-reload <br>systemctl start docker <br>systemctl stop docker<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 查看</span></span><br>root@node1:~# docker -v<br>Docker version 20.10.17, build 100c701<br></code></pre></td></tr></table></figure><h4 id="4、在线安装docker国际版"><a href="#4、在线安装docker国际版" class="headerlink" title="4、在线安装docker国际版"></a>4、<strong>在线安装docker国际版</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 更新ubuntu</span></span><br>apt update<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 添加docker库</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 安装依赖软件</span></span><br>apt install apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 添加docker官方GPG密钥</span></span><br>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 添加docker库</span></span><br>echo &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 再次更新</span></span><br>apt update<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 安装Docker</span></span><br>apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 可选版本安装</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 查看可以安装得版本</span></span><br>apt-cache madison docker-ce<br>docker-ce | 5:20.10.17~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages<br>    docker-ce | 5:20.10.16~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages<br>    docker-ce | 5:20.10.15~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages<br>    docker-ce | 5:20.10.14~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages<br>    docker-ce | 5:20.10.13~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages<br>    <br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 选版本安装</span></span><br>apt install docker-ce=5:20.10.16~3-0~ubuntu-jammy docker-ce-cli=5:20.10.16~3-0~ubuntu-jammy containerd.io<br></code></pre></td></tr></table></figure><h4 id="5、离线安装docker"><a href="#5、离线安装docker" class="headerlink" title="5、离线安装docker"></a>5、<strong>离线安装docker</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs Shell">下载docker 安装包<br><br>https://mirrors.aliyun.com/docker-ce/linux/static/stable/x86_64/docker-20.10.8.tgz<br><br>tar zxf docker-20.10.8.tgz<br>cp docker/* /usr/bin/<br><br>创建启动脚本<br><br>cat /usr/lib/systemd/system/docker.service<br>[Unit]<br>Description=Docker Application Container Engine<br>Documentation=https://docs.docker.com<br>After=network-online.target firewalld.service containerd.service<br>Wants=network-online.target<br><span class="hljs-meta prompt_">#</span><span class="language-bash">Requires=docker.socket containerd.service</span><br><br>[Service]<br>Type=notify<br><span class="hljs-meta prompt_"># </span><span class="language-bash">the default is not to use systemd <span class="hljs-keyword">for</span> cgroups because the delegate issues still</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">exists and systemd currently does not support the cgroup feature <span class="hljs-built_in">set</span> required</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">for</span> containers run by docker</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br>ExecStart=/usr/bin/dockerd<br>ExecReload=/bin/kill -s HUP $MAINPID<br>TimeoutSec=0<br>RestartSec=2<br>Restart=always<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Note that StartLimit* options were moved from <span class="hljs-string">&quot;Service&quot;</span> to <span class="hljs-string">&quot;Unit&quot;</span> <span class="hljs-keyword">in</span> systemd 229.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Both the old, and new location are accepted by systemd 229 and up, so using the old location</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">to make them work <span class="hljs-keyword">for</span> either version of systemd.</span><br>StartLimitBurst=3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Note that StartLimitInterval was renamed to StartLimitIntervalSec <span class="hljs-keyword">in</span> systemd 230.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Both the old, and new name are accepted by systemd 230 and up, so using the old name to make</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">this option work <span class="hljs-keyword">for</span> either version of systemd.</span><br>StartLimitInterval=60s<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Having non-zero Limit*s causes performance problems due to accounting overhead</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">in</span> the kernel. We recommend using cgroups to <span class="hljs-keyword">do</span> container-local accounting.</span><br>LimitNOFILE=infinity<br>LimitNPROC=infinity<br>LimitCORE=infinity<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Comment TasksMax <span class="hljs-keyword">if</span> your systemd version does not support it.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Only systemd 226 and above support this option.</span><br>TasksMax=infinity<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">set</span> delegate <span class="hljs-built_in">yes</span> so that systemd does not reset the cgroups of docker containers</span><br>Delegate=yes<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">kill</span> only the docker process, not all processes <span class="hljs-keyword">in</span> the cgroup</span><br>KillMode=process<br>OOMScoreAdjust=-500<br><br>[Install]<br>WantedBy=multi-user.target<br><br>创建 daemon.json<br>mkdir /etc/docker<br>cat /etc/docker/daemon.json<br>&#123; <br>&quot;registry-mirrors&quot;: [&quot;https://obou6wyb.mirror.aliyuncs.com&quot;],<br>&quot;log-driver&quot;:&quot;json-file&quot;,<br>&quot;log-opts&quot;:&#123;&quot;max-size&quot; :&quot;100m&quot;,&quot;max-file&quot;:&quot;1&quot;&#125;,<br>&quot;insecure-registries&quot;:[&quot;harbor.ops.bsnbase.com&quot;]<br>&#125;<br><br>需要注意得是配置私有仓库地址 需要在/etc/hosts 解析相对应的地址<br></code></pre></td></tr></table></figure><h4 id="6、离线安装haproxy"><a href="#6、离线安装haproxy" class="headerlink" title="6、离线安装haproxy"></a>6、<strong>离线安装haproxy</strong></h4><h5 id="6-1、获取离线部署包"><a href="#6-1、获取离线部署包" class="headerlink" title="6.1、获取离线部署包"></a>6.1、<strong>获取离线部署包</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Shell">找一台新装的主机<br>apt-get --download-only install haproxy keepalived<br><br>离线包文件<br>root@node3:/var/cache/apt/archives# ll<br>total 3664<br>-rw-r--r-- 1 root root 1634662 Mar  1 02:17 haproxy_2.4.14-1ubuntu1_amd64.deb<br>-rw-r--r-- 1 root root   42170 Mar 25 00:58 ipvsadm_1%3a1.31-1build2_amd64.deb<br>-rw-r--r-- 1 root root  452554 Mar 25 00:57 keepalived_1%3a2.2.4-0.2build1_amd64.deb<br>-rw-r--r-- 1 root root  140026 Mar 25 19:37 liblua5.3-0_5.3.6-1build1_amd64.deb<br>-rw-r--r-- 1 root root   59070 Feb  9 13:59 libnl-3-200_3.5.0-0.1_amd64.deb<br>-rw-r--r-- 1 root root   12412 Feb  9 13:59 libnl-genl-3-200_3.5.0-0.1_amd64.deb<br>-rw-r--r-- 1 root root    5274 Apr  5 16:14 libsensors-config_1%3a3.6.0-7ubuntu1_all.deb<br>-rw-r--r-- 1 root root   26346 Apr  5 16:14 libsensors5_1%3a3.6.0-7ubuntu1_amd64.deb<br>-rw-r--r-- 1 root root  200614 Apr 23 05:24 libsnmp-base_5.9.1+dfsg-1ubuntu2.1_all.deb<br>-rw-r--r-- 1 root root 1069086 Apr 23 05:24 libsnmp40_5.9.1+dfsg-1ubuntu2.1_amd64.deb<br>-rw-r----- 1 root root       0 Jul  8 16:57 lock<br>-rw-r--r-- 1 root root   74800 May  5  2018 lrzsz_0.12.21-10_amd64.deb<br>drwx------ 2 _apt root    4096 Jul 15 15:41 partial/<br></code></pre></td></tr></table></figure><h5 id="6-2、配置haproxy-cgf"><a href="#6-2、配置haproxy-cgf" class="headerlink" title="6.2、配置haproxy.cgf"></a>6.2、<strong>配置haproxy.cgf</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root@localhost ~]# cat /etc/haproxy/haproxy.cfg<br>global<br>    log /dev/log  local0 warning<br>    chroot      /var/lib/haproxy<br>    pidfile     /var/run/haproxy.pid<br>    maxconn     4000<br>    user        haproxy<br>    group       haproxy<br>    daemon<br>   <br>   stats socket /var/lib/haproxy/stats<br>   <br>defaults<br>  log global<br>  option  httplog<br>  option  dontlognull<br>        timeout connect 5000<br>        timeout client 50000<br>        timeout server 50000<br>   <br>frontend kube-apiserver<br>  bind *:16443   ## 端口需要开通，后续需要使用<br>  mode tcp<br>  option tcplog<br>  default_backend kube-apiserver<br>   <br>backend kube-apiserver<br>    mode tcp<br>    option tcplog<br>    option tcp-check<br>    balance roundrobin<br>    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100<br>    server kube-apiserver-1 192.168.40.120:6443 check # Replace the IP address with your own.<br>    server kube-apiserver-2 192.168.40.121:6443 check # Replace the IP address with your own.<br>    server kube-apiserver-3 192.168.40.122:6443 check # Replace the IP address with your own.<br></code></pre></td></tr></table></figure><h5 id="6-3、启动haproxy"><a href="#6-3、启动haproxy" class="headerlink" title="6.3、启动haproxy"></a>6.3、<strong>启动haproxy</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">systemctl start haproxy<br>systemctl enable haproxy<br>检查端口 6443<br></code></pre></td></tr></table></figure><h4 id="7、离线安装keepalived"><a href="#7、离线安装keepalived" class="headerlink" title="7、离线安装keepalived"></a>7、<strong>离线安装keepalived</strong></h4><h5 id="7-1、获取离线部署包"><a href="#7-1、获取离线部署包" class="headerlink" title="7.1、获取离线部署包"></a>7.1、<strong>获取离线部署包</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">apt-get --download-only install  keepalived<br></code></pre></td></tr></table></figure><h5 id="7-2、配置keepalived-conf"><a href="#7-2、配置keepalived-conf" class="headerlink" title="7.2、配置keepalived.conf"></a>7.2、<strong>配置keepalived.conf</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># master 配置</span></span><br>global_defs &#123;<br>  notification_email &#123;<br>  &#125;<br>  router_id LVS_DEVEL<br>  vrrp_skip_check_adv_addr<br>  vrrp_garp_interval 0<br>  vrrp_gna_interval 0<br>&#125;<br>   <br>vrrp_script chk_haproxy &#123;<br><span class="hljs-meta prompt_">  #</span><span class="language-bash">script <span class="hljs-string">&quot;killall -0 haproxy&quot;</span></span><br>  script &quot;/etc/keepalived/check_haproxy.sh&quot;<br>  interval 2<br>  weight 2<br>&#125;<br>   <br>vrrp_instance haproxy-vip &#123;<br>  state MASTER<br>  priority 100<br>  interface eth0                       # Network card<br>  virtual_router_id 60<br>  advert_int 1<br>  authentication &#123;<br>    auth_type PASS<br>    auth_pass 1111<br>  &#125;<br>  unicast_src_ip 192.168.40.120      # The IP address of this machine<br>  unicast_peer &#123;<br>    192.168.40.121                         # The IP address of peer machines<br>    192.168.40.122                         # The IP address of peer machines<br>  &#125;<br>   <br>  virtual_ipaddress &#123;<br>    192.168.40.111/32                  # The VIP address  需注意子网掩码位数<br>  &#125;<br>   <br>  track_script &#123;<br>    chk_haproxy<br>  &#125;<br>&#125;<br><br>其他两条主机 只需要修改unicast_src_ip 为当前主机的IP unicast_peer 里面配置备节点的IP，state设为BACKUP<br></code></pre></td></tr></table></figure><h5 id="7-3、配置check-haproxy-sh"><a href="#7-3、配置check-haproxy-sh" class="headerlink" title="7.3、配置check_haproxy.sh"></a>7.3、<strong>配置check_haproxy.sh</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>killall -0 haproxy<br>if [[ $? != 0 ]];then<br>   systemctl stop keepalived<br>else<br>  exit 0<br>fi<br></code></pre></td></tr></table></figure><h5 id="7-4、启动keepalived"><a href="#7-4、启动keepalived" class="headerlink" title="7.4、启动keepalived"></a>7.4、<strong>启动keepalived</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">systemctl start keepalived<br>systemctl enable keepalived<br>检查服务 ps -ef|grep keep<br></code></pre></td></tr></table></figure><h5 id="7-5、测试vip飘移动"><a href="#7-5、测试vip飘移动" class="headerlink" title="7.5、测试vip飘移动"></a>7.5、<strong>测试vip飘移动</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">在有vip的主机上 关闭systemctl stop haproxy 查看vip是否删除 并且已经在备节点中的一台生成<br>需要注意 关闭haproxy后 keepalived也一同关闭了 恢复需要先启动haproxy 在启动keepalived<br></code></pre></td></tr></table></figure><h3 id="四、离线部署kubesphere"><a href="#四、离线部署kubesphere" class="headerlink" title="四、离线部署kubesphere"></a>四、<strong>离线部署kubesphere</strong></h3><h4 id="1、部署docker私有仓库"><a href="#1、部署docker私有仓库" class="headerlink" title="1、部署docker私有仓库"></a><strong>1、部署docker私有仓库</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载离线安装包</span></span><br>wget https://github.com/goharbor/harbor/releases/download/v2.2.0<br>tar -xf harbor-offline-install-v2.2.0.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 解压后并备份配置文件,创建ssl证书目录</span></span><br>[root@harbor harbor]# ll -h<br>总用量 15G<br>drwxr-xr-x  2   10000 10000    6 8月   4 21:17 ca_download<br>drwxr-xr-x  3 root    root    20 8月   4 21:17 common<br>-rw-r--r--  1 root    root  3.3K 5月  15 2021 common.sh<br>drwx------ 19 polkitd input 4.0K 12月 21 10:11 database<br>-rw-r--r--  1 root    root  6.0K 8月   4 21:17 docker-compose.yml<br>-rw-r--r--  1 root    root  484M 5月  15 2021 harbor.v2.2.2.tar.gz<br>-rw-r--r--  1 root    root  7.8K 8月   4 21:17 harbor.yml<br>-rw-r--r--  1 root    root  7.7K 5月  15 2021 harbor.yml.tmpl<br>-rwxr-xr-x  1 root    root  2.5K 5月  15 2021 install.sh<br>drwxr-xr-x  2   10000 10000    6 8月   4 21:17 job_logs<br>-rw-r--r--  1 root    root   12K 5月  15 2021 LICENSE<br>-rwxr-xr-x  1 root    root  1.9K 5月  15 2021 prepare<br>drwxr-xr-x  2 polkitd input   22 1月  11 16:03 redis<br>drwxr-xr-x  3   10000 10000   20 8月   4 21:20 registry<br>drwxr-xr-x  6 root    root    58 8月   4 21:17 secret<br>drwxr-xr-x  2 root    root    56 8月  11 14:11 ssl<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 修改配置 hostname和证书dns扩展相匹配，后续所有镜像前缀均为hostname</span></span><br>cd harbor<br>cp harbor.yml.tmpl harbor.yml<br>    5 hostname: domin<br>    17 certificate: /data/harbor/ssl/tls.cert<br>    18 private_key: /data/harbor/ssl/tls.key<br>    34 harbor_admin_password: Harbor12345<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 创建访问域证书(可选)</span></span><br>openssl genrsa -out tls.key 2048<br>openssl  req -new -x509 -key tls.key -out tls.cert -days 360 -subj /CN=*.bsngate.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 执行安装脚本</span></span><br>./install.sh<br></code></pre></td></tr></table></figure><h4 id="现有私有仓库迁移-参考"><a href="#现有私有仓库迁移-参考" class="headerlink" title="现有私有仓库迁移(参考)"></a><strong>现有私有仓库迁移(参考)</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载离线安装包</span></span><br>wget https://github.com/goharbor/harbor/releases/download/v2.2.0<br>tar -xf harbor-offline-install-v2.2.0.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 解压文件后并拷贝目录 common、database、registry、ssl 执行install.sh</span></span><br>./install.sh<br></code></pre></td></tr></table></figure><h4 id="2、下载kubesphere离线安装包-能上网机器上执行"><a href="#2、下载kubesphere离线安装包-能上网机器上执行" class="headerlink" title="2、下载kubesphere离线安装包(能上网机器上执行)"></a><strong>2、下载kubesphere离线安装包(能上网机器上执行)</strong></h4><h5 id="编译kk和kubeadm-证书100年，可不做"><a href="#编译kk和kubeadm-证书100年，可不做" class="headerlink" title="编译kk和kubeadm(证书100年，可不做)"></a><strong>编译kk和kubeadm(证书100年，可不做)</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## kubeadm</span></span><br>wget https://github.com/kubernetes/kubernetes/archive/refs/tags/v1.20.6.zip<br>apt-get install -y unzip<br>unzip v1.20.6.zip<br>cd kubernetes-1.20.6<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 修改证书有效性</span></span> <br>vi  cmd/kubeadm/app/constants/constants.go<br>// CertificateValidity defines the validity for all the signed certificates generated by kubeadm<br>        // CertificateValidity = time.Hour * 24 * 365<br>        CertificateValidity = time.Hour * 24 * 365 * 100<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 修改签发年限</span></span>        <br>vim staging/src/k8s.io/client-go/util/cert/cert.go<br> // NotAfter:              now.Add(duration365d * 10).UTC(),<br>                NotAfter:              now.Add(duration365d * 100).UTC(),<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载依赖</span></span><br>yum groupinstall &quot;Development Tools&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 编译</span></span><br>make all WHAT=cmd/kubeadm GOFLAGS=-v<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 查看sha256sum</span></span><br>sha256sum kubeadm<br>3af7918faa88586d7155e778608160156740ddc48c6d85848620f37db58fac91  kubeadm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## kubukey kk</span></span><br>git  clone https://github.com/kubesphere/kubekey.git<br>git checkout -b remotes/origin/release-1.1<br>cd kubekey/pkg/files<br>vim file.go<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 修改kubeadm sha256码为上面编译好的kubeadm码</span></span><br>&quot;v1.20.6&quot;:  &quot;3af7918faa88586d7155e778608160156740ddc48c6d85848620f37db58fac91&quot;,<br></code></pre></td></tr></table></figure><h5 id="下载离线安装包"><a href="#下载离线安装包" class="headerlink" title="下载离线安装包"></a><strong>下载离线安装包</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载镜像列表</span></span><br>curl -L -O https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/images-list.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载 offline-installation-tool.sh</span></span><br>curl -L -O https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/offline-installation-tool.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 添加执行权限</span></span><br>chmod +x offline-installation-tool.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载 Kubernetes 二进制文件 (替换之前编译好得kubeadm)</span></span><br>./offline-installation-tool.sh -b -v v1.20.6<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#### 如果不能访问Google 添加环境变量</span></span><br>export KKZONE=cn;./offline-installation-tool.sh -b -v v1.20.6<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 拉取镜像</span></span><br>./offline-installation-tool.sh -s -l images-list.txt -d ./kubesphere-images<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 修改脚本换成自己仓库项目，推送到私有仓库</span></span><br>imageurl=$registryurl&quot;/library/&quot;$image  imageurl=$registryurl&quot;/kubesphere/&quot;$image <br>./offline-installation-tool.sh -l images-list.txt -d ./kubesphere-images -r harbor.ops.bsnbase.com <br></code></pre></td></tr></table></figure><h4 id="3、离线安装kubesphere"><a href="#3、离线安装kubesphere" class="headerlink" title="3、离线安装kubesphere"></a>3、离线安装kubesphere</h4><p>官方离线文档地址</p><p><a href="https://v3-1.docs.kubesphere.io/zh/docs/installing-on-linux/introduction/air-gapped-installation/">https://v3-1.docs.kubesphere.io/zh/docs/installing-on-linux/introduction/air-gapped-installation/</a></p><h5 id="3-1、上传kubekey文件查看目录结构-树形"><a href="#3-1、上传kubekey文件查看目录结构-树形" class="headerlink" title="3.1、上传kubekey文件查看目录结构(树形)"></a>3.1、上传kubekey文件查看目录结构(树形)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root@node3 kubekey]# ll<br>总用量 614072<br>-rw-r--r-- 1 root root      5058 11月 11 16:18 config-sample.yaml<br>-rw-r--r-- 1 root root       780 11月 11 16:18 glusterfs-sc.yaml<br>-rw-r--r-- 1 root root  54910976 10月 28 18:02 kk<br>drwxr-xr-x 8 root root       107 3月   1 17:59 kubekey<br></code></pre></td></tr></table></figure><h5 id="3-2、修改配置文件config-sample-yaml"><a href="#3-2、修改配置文件config-sample-yaml" class="headerlink" title="3.2、修改配置文件config-sample.yaml"></a>3.2、修改配置文件config-sample.yaml</h5><p>一定要看这些说明</p><p>hosts部分，下面标记红色，自行修改IP用户名密码，有几个master写几行，几个worker写几行。</p><p>测试环境黄色不用动</p><p>可以写域名？</p><p>一主多从模式                                                                          三主多从模式 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">一主三从模式</span><br>cat &gt; ./config-sample.yaml &lt;&lt;PPYY<br>---<br>apiVersion: kubekey.kubesphere.io/v1alpha2<br>kind: Cluster<br>metadata:<br>  name: sample<br>spec:<br>  hosts:<br>  - &#123;name: master1, address: 10.4.7.10, internalAddress: 10.4.7.10, user: root, password: &quot;123456&quot;&#125;<br>  - &#123;name: node1, address: 10.4.7.20, internalAddress: 10.4.7.20, user: root, password: &quot;123456&quot;&#125;<br>  - &#123;name: node2, address: 10.4.7.30, internalAddress: 10.4.7.30, user: root, password: &quot;123456&quot;&#125;<br>  - &#123;name: node3, address: 10.4.7.40, internalAddress: 10.4.7.40, user: root, password: &quot;123456&quot;&#125;<br>  roleGroups:<br>    etcd:<br>    - master1<br>    control-plane: <br>    - master1<br>    worker:<br>    - node1<br>    - node2<br>    - node3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">   registry:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - node2</span><br>  controlPlaneEndpoint:<br>    ## Internal loadbalancer for apiservers <br>    # internalLoadbalancer: haproxy<br><br>    domain: lb.kubesphere.local<br><span class="hljs-meta prompt_"># </span><span class="language-bash">   address: <span class="hljs-string">&quot;10.0.80.250&quot;</span></span><br>    address: &quot;&quot;<br>    port: 6443<br>  kubernetes:<br>    version: v1.22.10<br>    clusterName: cluster.local<br>    autoRenewCerts: true<br>    containerManager: docker<br>  etcd:<br>    type: kubekey<br>  network:<br>    plugin: calico<br>    kubePodsCIDR: 11.233.64.0/18<br>    kubeServiceCIDR: 11.233.0.0/18<br>    ## multus support. https://github.com/k8snetworkplumbingwg/multus-cni<br>    multusCNI:<br>      enabled: false<br>  registry:<br><span class="hljs-meta prompt_"># </span><span class="language-bash">   <span class="hljs-built_in">type</span>: harbor</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   auths:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">     <span class="hljs-string">&quot;dockerhub.kubekey.local&quot;</span>:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">       username: admin</span><br><span class="hljs-meta prompt_"> # </span><span class="language-bash">      password: Harbor12345</span><br>    privateRegistry: &quot;harbor.ops.bsnbase.com&quot;<br>    namespaceOverride: &quot;kubesphereio&quot;<br>    registryMirrors: []<br>    insecureRegistries: []<br><br><br><br><br><br>---<br>apiVersion: installer.kubesphere.io/v1alpha1<br>kind: ClusterConfiguration<br>metadata:<br>  name: ks-installer<br>  namespace: kubesphere-system<br>  labels:<br>    version: v3.3.0<br>spec:<br>  persistence:<br>    storageClass: &quot;&quot;<br>  authentication:<br>    jwtSecret: &quot;&quot;<br>  zone: &quot;&quot;<br>  local_registry: &quot;&quot;<br>  namespace_override: &quot;&quot;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">dev_tag: <span class="hljs-string">&quot;&quot;</span></span><br>  etcd:<br>    monitoring: false<br>    endpointIps: localhost<br>    port: 2379<br>    tlsEnable: true<br>  common:<br>    core:<br>      console:<br>        enableMultiLogin: true<br>        port: 30880<br>        type: NodePort<br>    # apiserver:<br>    #  resources: &#123;&#125;<br>    # controllerManager:<br>    #  resources: &#123;&#125;<br>    redis:<br>      enabled: false<br>      volumeSize: 2Gi<br>    openldap:<br>      enabled: false<br>      volumeSize: 2Gi<br>    minio:<br>      volumeSize: 20Gi<br>    monitoring:<br>      # type: external<br>      endpoint: http://prometheus-operated.kubesphere-monitoring-system.svc:9090<br>      GPUMonitoring:<br>        enabled: false<br>    gpu:<br>      kinds:<br>      - resourceName: &quot;nvidia.com/gpu&quot;<br>        resourceType: &quot;GPU&quot;<br>        default: true<br>    es:<br>      # master:<br>      #   volumeSize: 4Gi<br>      #   replicas: 1<br>      #   resources: &#123;&#125;<br>      # data:<br>      #   volumeSize: 20Gi<br>      #   replicas: 1<br>      #   resources: &#123;&#125;<br>      logMaxAge: 7<br>      elkPrefix: logstash<br>      basicAuth:<br>        enabled: false<br>        username: &quot;&quot;<br>        password: &quot;&quot;<br>      externalElasticsearchHost: &quot;&quot;<br>      externalElasticsearchPort: &quot;&quot;<br>  alerting:<br>    enabled: false<br>    # thanosruler:<br>    #   replicas: 1<br>    #   resources: &#123;&#125;<br>  auditing:<br>    enabled: false<br>    # operator:<br>    #   resources: &#123;&#125;<br>    # webhook:<br>    #   resources: &#123;&#125;<br>  devops:<br>    enabled: false<br>    # resources: &#123;&#125;<br>    jenkinsMemoryLim: 2Gi<br>    jenkinsMemoryReq: 1500Mi<br>    jenkinsVolumeSize: 8Gi<br>    jenkinsJavabsns_Xms: 1200m<br>    jenkinsJavabsns_Xmx: 1600m<br>    jenkinsJavabsns_MaxRAM: 2g<br>  events:<br>    enabled: false<br>    # operator:<br>    #   resources: &#123;&#125;<br>    # exporter:<br>    #   resources: &#123;&#125;<br>    # ruler:<br>    #   enabled: true<br>    #   replicas: 2<br>    #   resources: &#123;&#125;<br>  logging:<br>    enabled: false<br>    logsidecar:<br>      enabled: true<br>      replicas: 2<br>      # resources: &#123;&#125;<br>  metrics_server:<br>    enabled: false<br>  monitoring:<br>    storageClass: &quot;&quot;<br>    node_exporter:<br>      port: 9100<br>      # resources: &#123;&#125;<br>    # kube_rbac_proxy:<br>    #   resources: &#123;&#125;<br>    # kube_state_metrics:<br>    #   resources: &#123;&#125;<br>    # prometheus:<br>    #   replicas: 1<br>    #   volumeSize: 20Gi<br>    #   resources: &#123;&#125;<br>    #   operator:<br>    #     resources: &#123;&#125;<br>    # alertmanager:<br>    #   replicas: 1<br>    #   resources: &#123;&#125;<br>    # notification_manager:<br>    #   resources: &#123;&#125;<br>    #   operator:<br>    #     resources: &#123;&#125;<br>    #   proxy:<br>    #     resources: &#123;&#125;<br>    gpu:<br>      nvidia_dcgm_exporter:<br>        enabled: false<br>        # resources: &#123;&#125;<br>  multicluster:<br>    clusterRole: none<br>  network:<br>    networkpolicy:<br>      enabled: false<br>    ippool:<br>      type: none<br>    topology:<br>      type: none<br>  openpitrix:<br>    store:<br>      enabled: false<br>  servicemesh:<br>    enabled: false<br>    istio:<br>      components:<br>        ingressGateways:<br>        - name: istio-ingressgateway<br>          enabled: false<br>        cni:<br>          enabled: false<br>  edgeruntime:<br>    enabled: false<br>    kubeedge:<br>      enabled: false<br>      cloudCore:<br>        cloudHub:<br>          advertiseAddress:<br>            - &quot;&quot;<br>        service:<br>          cloudhubNodePort: &quot;30000&quot;<br>          cloudhubQuicNodePort: &quot;30001&quot;<br>          cloudhubHttpsNodePort: &quot;30002&quot;<br>          cloudstreamNodePort: &quot;30003&quot;<br>          tunnelNodePort: &quot;30004&quot;<br>        # resources: &#123;&#125;<br>        # hostNetWork: false<br>      iptables-manager:<br>        enabled: true<br>        mode: &quot;external&quot;<br>        # resources: &#123;&#125;<br>      # edgeService:<br>      #   resources: &#123;&#125;<br>  terminal:<br>    timeout: 600<br>PPYY<br><span class="hljs-meta prompt_">#</span><span class="language-bash">三主三从模式</span><br>cat &gt; ./config-sample.yaml &lt;&lt;PPYY<br>---<br>apiVersion: kubekey.kubesphere.io/v1alpha2<br>kind: Cluster<br>metadata:<br>  name: sample<br>spec:<br>  hosts:<br>  - &#123;name: master1, address: 10.4.7.10, internalAddress: 10.4.7.10, user: root, password: &quot;123456&quot;&#125;<br>  - &#123;name: master2, address: 10.0.80.251, internalAddress: 10.0.80.251, user: root, password: &quot;123456&quot;&#125;<br>  - &#123;name: master3, address: 10.0.80.254, internalAddress: 10.0.80.254, user: root, password: &quot;123456&quot;&#125;<br>  - &#123;name: node1, address: 10.4.7.20, internalAddress: 10.4.7.20, user: root, password: &quot;123456&quot;&#125;<br>  - &#123;name: node2, address: 10.4.7.30, internalAddress: 10.4.7.30, user: root, password: &quot;123456&quot;&#125;<br>  - &#123;name: node3, address: 10.4.7.40, internalAddress: 10.4.7.40, user: root, password: &quot;123456&quot;&#125;<br>  roleGroups:<br>    etcd:<br>    - master1<br>    - master2<br>    - master3<br>    control-plane: <br>    - master1<br>    - master2<br>    - master3<br>    worker:<br>    - node1<br>    - node2<br>    - node3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">   registry:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   - node2</span><br>  controlPlaneEndpoint:<br>    ## Internal loadbalancer for apiservers <br>    # internalLoadbalancer: haproxy<br><br>    domain: lb.kubesphere.local<br>    address: &quot;10.0.80.250&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">   address: <span class="hljs-string">&quot;&quot;</span></span><br>    port: 6443<br>  kubernetes:<br>    version: v1.22.10<br>    clusterName: cluster.local<br>    autoRenewCerts: true<br>    containerManager: docker<br>  etcd:<br>    type: kubekey<br>  network:<br>    plugin: calico<br>    kubePodsCIDR: 11.233.64.0/18<br>    kubeServiceCIDR: 11.233.0.0/18<br>    ## multus support. https://github.com/k8snetworkplumbingwg/multus-cni<br>    multusCNI:<br>      enabled: false<br><span class="hljs-meta prompt_"># </span><span class="language-bash"> registry:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   <span class="hljs-built_in">type</span>: harbor</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   auths:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">     <span class="hljs-string">&quot;dockerhub.kubekey.local&quot;</span>:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">       username: admin</span><br><span class="hljs-meta prompt_"> # </span><span class="language-bash">      password: Harbor12345</span><br>    privateRegistry: &quot;harbor.ops.bsnbase.com&quot;<br>    namespaceOverride: &quot;kubesphereio&quot;<br>    registryMirrors: []<br>    insecureRegistries: []<br><br><br><br><br><br>---<br>apiVersion: installer.kubesphere.io/v1alpha1<br>kind: ClusterConfiguration<br>metadata:<br>  name: ks-installer<br>  namespace: kubesphere-system<br>  labels:<br>    version: v3.3.0<br>spec:<br>  persistence:<br>    storageClass: &quot;&quot;<br>  authentication:<br>    jwtSecret: &quot;&quot;<br>  zone: &quot;&quot;<br>  local_registry: &quot;&quot;<br>  namespace_override: &quot;&quot;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">dev_tag: <span class="hljs-string">&quot;&quot;</span></span><br>  etcd:<br>    monitoring: false<br>    endpointIps: localhost<br>    port: 2379<br>    tlsEnable: true<br>  common:<br>    core:<br>      console:<br>        enableMultiLogin: true<br>        port: 30880<br>        type: NodePort<br>    # apiserver:<br>    #  resources: &#123;&#125;<br>    # controllerManager:<br>    #  resources: &#123;&#125;<br>    redis:<br>      enabled: false<br>      volumeSize: 2Gi<br>    openldap:<br>      enabled: false<br>      volumeSize: 2Gi<br>    minio:<br>      volumeSize: 20Gi<br>    monitoring:<br>      # type: external<br>      endpoint: http://prometheus-operated.kubesphere-monitoring-system.svc:9090<br>      GPUMonitoring:<br>        enabled: false<br>    gpu:<br>      kinds:<br>      - resourceName: &quot;nvidia.com/gpu&quot;<br>        resourceType: &quot;GPU&quot;<br>        default: true<br>    es:<br>      # master:<br>      #   volumeSize: 4Gi<br>      #   replicas: 1<br>      #   resources: &#123;&#125;<br>      # data:<br>      #   volumeSize: 20Gi<br>      #   replicas: 1<br>      #   resources: &#123;&#125;<br>      logMaxAge: 7<br>      elkPrefix: logstash<br>      basicAuth:<br>        enabled: false<br>        username: &quot;&quot;<br>        password: &quot;&quot;<br>      externalElasticsearchHost: &quot;&quot;<br>      externalElasticsearchPort: &quot;&quot;<br>  alerting:<br>    enabled: false<br>    # thanosruler:<br>    #   replicas: 1<br>    #   resources: &#123;&#125;<br>  auditing:<br>    enabled: false<br>    # operator:<br>    #   resources: &#123;&#125;<br>    # webhook:<br>    #   resources: &#123;&#125;<br>  devops:<br>    enabled: false<br>    # resources: &#123;&#125;<br>    jenkinsMemoryLim: 2Gi<br>    jenkinsMemoryReq: 1500Mi<br>    jenkinsVolumeSize: 8Gi<br>    jenkinsJavabsns_Xms: 1200m<br>    jenkinsJavabsns_Xmx: 1600m<br>    jenkinsJavabsns_MaxRAM: 2g<br>  events:<br>    enabled: false<br>    # operator:<br>    #   resources: &#123;&#125;<br>    # exporter:<br>    #   resources: &#123;&#125;<br>    # ruler:<br>    #   enabled: true<br>    #   replicas: 2<br>    #   resources: &#123;&#125;<br>  logging:<br>    enabled: false<br>    logsidecar:<br>      enabled: true<br>      replicas: 2<br>      # resources: &#123;&#125;<br>  metrics_server:<br>    enabled: false<br>  monitoring:<br>    storageClass: &quot;&quot;<br>    node_exporter:<br>      port: 9100<br>      # resources: &#123;&#125;<br>    # kube_rbac_proxy:<br>    #   resources: &#123;&#125;<br>    # kube_state_metrics:<br>    #   resources: &#123;&#125;<br>    # prometheus:<br>    #   replicas: 1<br>    #   volumeSize: 20Gi<br>    #   resources: &#123;&#125;<br>    #   operator:<br>    #     resources: &#123;&#125;<br>    # alertmanager:<br>    #   replicas: 1<br>    #   resources: &#123;&#125;<br>    # notification_manager:<br>    #   resources: &#123;&#125;<br>    #   operator:<br>    #     resources: &#123;&#125;<br>    #   proxy:<br>    #     resources: &#123;&#125;<br>    gpu:<br>      nvidia_dcgm_exporter:<br>        enabled: false<br>        # resources: &#123;&#125;<br>  multicluster:<br>    clusterRole: none<br>  network:<br>    networkpolicy:<br>      enabled: false<br>    ippool:<br>      type: none<br>    topology:<br>      type: none<br>  openpitrix:<br>    store:<br>      enabled: false<br>  servicemesh:<br>    enabled: false<br>    istio:<br>      components:<br>        ingressGateways:<br>        - name: istio-ingressgateway<br>          enabled: false<br>        cni:<br>          enabled: false<br>  edgeruntime:<br>    enabled: false<br>    kubeedge:<br>      enabled: false<br>      cloudCore:<br>        cloudHub:<br>          advertiseAddress:<br>            - &quot;&quot;<br>        service:<br>          cloudhubNodePort: &quot;30000&quot;<br>          cloudhubQuicNodePort: &quot;30001&quot;<br>          cloudhubHttpsNodePort: &quot;30002&quot;<br>          cloudstreamNodePort: &quot;30003&quot;<br>          tunnelNodePort: &quot;30004&quot;<br>        # resources: &#123;&#125;<br>        # hostNetWork: false<br>      iptables-manager:<br>        enabled: true<br>        mode: &quot;external&quot;<br>        # resources: &#123;&#125;<br>      # edgeService:<br>      #   resources: &#123;&#125;<br>  terminal:<br>    timeout: 600<br>PPYY<br></code></pre></td></tr></table></figure><h5 id="3-3、启动节点"><a href="#3-3、启动节点" class="headerlink" title="3.3、启动节点"></a>3.3、启动节点</h5><p>授权给kk</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">chmod +x kk<br></code></pre></td></tr></table></figure><p>启动集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 多节点集群启动</span></span><br>./kk create cluster -f config-sample.yaml<br></code></pre></td></tr></table></figure><p>结果验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 安装完成后验证</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####################################################</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##              Welcome to KubeSphere!           ###</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####################################################</span></span><br><br>Console: http://192.168.0.2:30880<br>Account: admin<br>Password: P@88w0rd<br><br>NOTES：<br>  1. After you log into the console, please check the<br>     monitoring status of service components in<br>     the &quot;Cluster Management&quot;. If any service is not<br>     ready, please wait patiently until all components<br>     are up and running.<br>  2. Please change the default password after login.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####################################################</span></span><br>https://kubesphere.io             20xx-xx-xx xx:xx:xx<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####################################################</span></span><br></code></pre></td></tr></table></figure><h5 id="kubesphere中文文档地址"><a href="#kubesphere中文文档地址" class="headerlink" title="kubesphere中文文档地址"></a><strong>kubesphere中文文档地址</strong></h5><p><a href="https://www.bookstack.cn/read/kubesphere-3.1-zh/807436df96a6eb8a.md">https://www.bookstack.cn/read/kubesphere-3.1-zh/807436df96a6eb8a.md</a></p><h3 id="五、kubernetes安装csi"><a href="#五、kubernetes安装csi" class="headerlink" title="五、kubernetes安装csi"></a><strong>五、kubernetes安装csi</strong></h3><h4 id="官方地址以及版本推荐"><a href="#官方地址以及版本推荐" class="headerlink" title="官方地址以及版本推荐"></a><strong>官方地址以及版本推荐</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">参考官方csi适配的kubenetes版本</span><br>https://github.com/ceph/ceph-csi/<br><br>Ceph CSI Version    Container Orchestrator Name Version Tested<br>v3.6.1  Kubernetes  v1.21, v1.22, v1.23<br>v3.6.0  Kubernetes  v1.21, v1.22, v1.23<br>v3.5.1  Kubernetes  v1.21, v1.22, v1.23<br>v3.5.0  Kubernetes  v1.21, v1.22, v1.23<br>v3.4.0  Kubernetes  v1.20, v1.21, v1.22<br></code></pre></td></tr></table></figure><p> ceph为k8s提供存储服务主要有两种方式，cephfs和ceph rdb；cephfs方式支持k8s的pv的3种访问模式<code>ReadWriteOnce，ReadOnlyMany，ReadWriteMany</code> ，RBD支持<code>ReadWriteOnce，ReadOnlyMany</code>。 </p><h4 id="1、使用rbd-不建议使用"><a href="#1、使用rbd-不建议使用" class="headerlink" title="1、使用rbd(不建议使用)"></a><strong>1、使用rbd(不建议使用)</strong></h4><h5 id="1-1、ceph集群创建pool"><a href="#1-1、ceph集群创建pool" class="headerlink" title="1.1、ceph集群创建pool"></a><strong>1.1、ceph集群创建pool</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 创建名称为 kubernetes pool</span></span><br>ceph osd pool create kubernetes 200<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 初始化 kubernetes poll</span></span><br>rbd poll init kubernetes<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 输出</span></span><br>[client.kubernetes]<br>    key = AQB7aHVk54mYCRAAkXsflBVWU3GGcbgsFlDS1Q==<br>    <br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建k8s访问ceph的用户，在ceph的admin或者mon节点</span><br>ceph auth get-or-create client.kubernetes mon &#x27;allow r&#x27; osd &#x27;allow class-read object_prefix rbd_children, allow rwx pool=kubernetes&#x27; -o ceph.client.kubernetes.keyring<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看key，在ceph的admin或者mon节点</span><br>ceph auth get-key client.admin<br>ceph auth get-key client.kubernetes<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">csi使用的权限使用默认的admin用户，也可以创建新的用户</span><br>[root@ceph1 ~]# cat /etc/ceph/ceph.client.admin.keyring <br>[client.admin]<br>    key = AQB+ialiIn9dDRAAWFOCHqc+2QYHIx9NwWvKmA==<br>    caps mds = &quot;allow *&quot;<br>    caps mgr = &quot;allow *&quot;<br>    caps mon = &quot;allow *&quot;<br>    caps osd = &quot;allow *&quot;    <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取cephfs集群clusterid</span><br>root@ceph-node1:~# ceph -s<br>  cluster:<br>    id:     bcccd25c-fdc8-11ed-ae63-000c29be755f<br>    health: HEALTH_WARN<br>            clock skew detected on mon.ceph-node2<br> <br>  services:<br>    mon: 3 daemons, quorum ceph-node1,ceph-node2,ceph-node3 (age 10h)<br>    mgr: ceph-node1.hleyvm(active, since 2d), standbys: ceph-node2.qacter<br>    mds: 1/1 daemons up, 1 standby<br>    osd: 3 osds: 3 up (since 2d), 3 in (since 2d)<br> <br>  data:<br>    volumes: 1/1 healthy<br>    pools:   3 pools, 49 pgs<br>    objects: 26 objects, 708 KiB<br>    usage:   91 MiB used, 900 GiB / 900 GiB avail<br>    pgs:     49 active+clean<br></code></pre></td></tr></table></figure><h5 id="1-2、ceph-csi配置文件"><a href="#1-2、ceph-csi配置文件" class="headerlink" title="1.2、ceph-csi配置文件"></a><strong>1.2、ceph-csi配置文件</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载github文件,切换分支符合k8s版本</span><br>https://github.com/ceph/ceph-csi/tree/devel/deploy/rbd/kubernetes<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改csi-config-map.yaml文件 增加ceph集群配置</span><br><br>cat &gt;&gt; csi-config-map.yaml &lt;&lt; EOF<br>---<br>apiVersion: v1<br>kind: ConfigMap<br>data:<br>  config.json: |-<br>    [<br>      &#123;<br>        &quot;clusterID&quot;: &quot;bcccd25c-fdc8-11ed-ae63-000c29be755f&quot;,<br>        &quot;monitors&quot;: [<br>          &quot;10.0.51.215:6789&quot;,<br>          &quot;10.0.51.216:6789&quot;,<br>          &quot;10.0.51.217:6789&quot;<br>         ]<br>       &#125;<br>     ]<br>metadata:<br>  name: ceph-csi-config<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建csi-kms-config-map.yaml (这个文件是空的但是必须有，要不然服务启动会报错)</span><br>cat &gt;&gt; csi-kms-config-map.yaml &lt;&lt;EOF<br>---<br>apiVersion: v1<br>kind: ConfigMap<br>data:<br>  config.json: |-<br>    &#123;&#125;<br>metadata:<br>  name: ceph-csi-encryption-kms-config<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建ceph-config-map.yaml</span><br>cat &gt;&gt; ceph-config-map.yaml &lt;&lt;EOF<br>---<br>apiVersion: v1<br>kind: ConfigMap<br>data:<br>  ceph.conf: |<br>    [global]<br>    auth_cluster_required = cephx<br>    auth_service_required = cephx<br>    auth_client_required = cephx<br><br><span class="hljs-meta prompt_">   # </span><span class="language-bash">keyring is a required key and its value should be empty</span><br>  keyring: |<br>metadata:<br>  name: ceph-config<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建csi-rbd-secret.yaml</span><br>cat &gt;&gt; csi-rbd-secret.yaml &lt;&lt; EOF<br>---<br>apiVersion: v1<br>kind: Secret<br>metadata:<br>  name: csi-rbd-secret<br>  namespace: default<br>stringData:<br>  userID: kubernetes<br>  userKey: AQDpuN1jIlPBABAAaGhYtIUSonIiHirrM9SFkQ==<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建cefs-StorageClass.yaml</span><br>cat &gt;&gt; ceph-StorageClass.yaml &lt;&lt; EOF<br>---<br>apiVersion: storage.k8s.io/v1<br>kind: StorageClass<br>metadata:<br>   name: csi-rbd-sc<br>   annotations:<br>     storageclass.beta.kubernetes.io/is-default-class: &quot;true&quot;<br>     storageclass.kubesphere.io/supported-access-modes: &#x27;[&quot;ReadWriteOnce&quot;,&quot;ReadOnlyMany&quot;,&quot;ReadWriteMany&quot;]&#x27;<br>provisioner: rbd.csi.ceph.com<br>parameters:<br>   clusterID: &quot;bcccd25c-fdc8-11ed-ae63-000c29be755f&quot;<br>   pool: &quot;kubernetes&quot;    # &lt;--ToBeReplaced--&gt;<br>   imageFeatures: layering<br>   csi.storage.k8s.io/provisioner-secret-name: csi-rbd-secret<br>   csi.storage.k8s.io/provisioner-secret-namespace: default<br>   csi.storage.k8s.io/controller-expand-secret-name: csi-rbd-secret<br>   csi.storage.k8s.io/controller-expand-secret-namespace: default<br>   csi.storage.k8s.io/node-stage-secret-name: csi-rbd-secret<br>   csi.storage.k8s.io/node-stage-secret-namespace: default<br><span class="hljs-meta prompt_">   #</span><span class="language-bash">csi.storage.k8s.io/fstype: ext4</span><br>reclaimPolicy: Delete<br>allowVolumeExpansion: true<br>mountOptions:<br>   - discard<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">其他文件展示(不需要修改)</span><br>[root@master kubernetes]# ll<br>总用量 56<br>-rw-r--r-- 1 root root  273 5月  30 14:02 ceph-configmap.yaml<br>-rw-r--r-- 1 root root  925 5月  30 15:51 ceph-StorageClass.yaml<br>-rw-r--r-- 1 root root  299 5月  30 14:02 csi-config-map.yaml<br>-rw-r--r-- 1 root root  226 5月  30 14:02 csidriver.yaml<br>-rw-r--r-- 1 root root  111 5月  30 14:11 csi-kms-config-map.yaml<br>-rw-r--r-- 1 root root 1740 5月  30 14:02 csi-nodeplugin-psp.yaml<br>-rw-r--r-- 1 root root 1110 5月  30 14:02 csi-nodeplugin-rbac.yaml<br>-rw-r--r-- 1 root root 1312 5月  30 14:02 csi-provisioner-psp.yaml<br>-rw-r--r-- 1 root root 3116 5月  30 14:02 csi-provisioner-rbac.yaml<br>-rw-r--r-- 1 root root 7471 5月  30 14:02 csi-rbdplugin-provisioner.yaml<br>-rw-r--r-- 1 root root 6397 5月  30 14:02 csi-rbdplugin.yaml<br>-rw-r--r-- 1 root root  195 5月  30 14:02 css-rbd-secret.yaml<br></code></pre></td></tr></table></figure><h4 id="2、使用cephfs"><a href="#2、使用cephfs" class="headerlink" title="2、使用cephfs"></a><strong>2、使用cephfs</strong></h4><p>Ceph文件系统： <a href="https://docs.ceph.com/en/latest/cephfs/">https://docs.ceph.com/en/latest/cephfs/</a></p><h5 id="2-1、创建cephfs"><a href="#2-1、创建cephfs" class="headerlink" title="2.1、创建cephfs"></a><strong>2.1、创建cephfs</strong></h5><p> 对于大多数 Ceph 部署，设置第一个 CephFS 文件系统非常简单： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建cepfs系统 会去启动一个mds容器</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ceph fs volume create &lt;cephfs_name&gt;</span><br>root@ceph-node1:~# ceph fs volume create cephfs<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看pool</span><br>root@ceph-node1:~# ceph osd pool ls<br>.mgr<br>cephfs.cephfs.meta<br>cephfs.cephfs.data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看mds</span><br>root@ceph-node1:~# ceph mds stat<br>cephfs:1 &#123;0=cephfs.ceph-node3.jrkixp=up:active&#125; 1 up:standby<br>root@ceph-node1:~# ceph fs ls<br>name: cephfs, metadata pool: cephfs.cephfs.meta, data pools: [cephfs.cephfs.data ]<br>root@ceph-node1:~# ceph fs get cephfs<br>Filesystem &#x27;cephfs&#x27; (1)<br>fs_name cephfs<br>epoch   5<br>flags   12 joinable allow_snaps allow_multimds_snaps<br>created 2023-06-02T09:21:35.082813+0000<br>modified    2023-06-02T09:21:47.056959+0000<br>tableserver 0<br>root    0<br>session_timeout 60<br>session_autoclose   300<br>max_file_size   1099511627776<br>required_client_features    &#123;&#125;<br>last_failure    0<br>last_failure_osd_epoch  0<br>compat  compat=&#123;&#125;,rocompat=&#123;&#125;,incompat=&#123;1=base v0.20,2=client writeable ranges,3=default file layouts on dirs,4=dir inode in separate object,5=mds uses versioned encoding,6=dirfrag is stored in omap,7=mds uses inline data,8=no anchor table,9=file layout v2,10=snaprealm v2&#125;<br>max_mds 1<br>in  0<br>up  &#123;0=34145&#125;<br>failed  <br>damaged <br>stopped <br>data_pools  [3]<br>metadata_pool   2<br>inline_data disabled<br>balancer    <br>standby_count_wanted    1<br>[mds.cephfs.ceph-node3.jrkixp&#123;0:34145&#125; state up:active seq 2 join_fscid=1 addr [v2:10.0.51.217:6808/185298052,v1:10.0.51.217:6809/185298052] compat &#123;c=[1],r=[1],i=[7ff]&#125;]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">强制 mds 处于失败状态</span><br>ceph fs fail &lt;fs_name&gt;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除非活动的 mds</span><br>ceph fs rm &lt;fs_name&gt; <br></code></pre></td></tr></table></figure><h5 id="2-2、用户管理"><a href="#2-2、用户管理" class="headerlink" title="2.2、用户管理"></a><strong>2.2、用户管理</strong></h5><p>Ceph 把数据以对象的形式存于各存储池中。Ceph 用户必须具有访问存储池的权限才能够读写数据。另外，Ceph 用户必须具有执行权限才能够使用 Ceph 的管理命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 查看所有用户信息</span></span><br>root@ceph-node1:~# ceph auth list<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 获取所有用户的key与权限相关信息</span></span><br>root@ceph-node1:~# ceph auth get client.admin<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 如果只需要某个用户的key信息，可以使用pring-key子命令</span></span><br>root@ceph-node1:~# ceph auth print-key client.admin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">csi使用的权限使用默认的admin用户，也可以创建新的用户</span><br>root@ceph-node1:~# ceph auth get client.admin<br>[client.admin]<br>    key = AQASnnlkxrv5HhAAEDKUBjI7il1d1HDxnRwqVQ==<br>    caps mds = &quot;allow *&quot;<br>    caps mgr = &quot;allow *&quot;<br>    caps mon = &quot;allow *&quot;<br>    caps osd = &quot;allow *&quot;<br><br>root@ceph-node1:~# cat /etc/ceph/ceph.client.admin.keyring <br>[client.admin]<br>    key = AQASnnlkxrv5HhAAEDKUBjI7il1d1HDxnRwqVQ==<br>    caps mds = &quot;allow *&quot;<br>    caps mgr = &quot;allow *&quot;<br>    caps mon = &quot;allow *&quot;<br>    caps osd = &quot;allow *&quot; <br></code></pre></td></tr></table></figure><h5 id="2-3、ceph-csi配置"><a href="#2-3、ceph-csi配置" class="headerlink" title="2.3、ceph-csi配置"></a><strong>2.3、ceph-csi配置</strong></h5><p>GitHub地址：<a href="https://github.com/ceph/ceph-csi/tree/devel/deploy/cephfs/kubernetes">https://github.com/ceph/ceph-csi/tree/devel/deploy/cephfs/kubernetes</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">官方yaml信息</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载包文件</span><br>git clone https://github.com/ceph/ceph-csi.git<br><span class="hljs-meta prompt_">#</span><span class="language-bash">切换分支为release-v3.0</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1、查看所有分支</span><br>git branch -a<br><span class="hljs-meta prompt_">#</span><span class="language-bash">2、查看当前分支(*号表示当前分支)</span><br>git branch<br><span class="hljs-meta prompt_">#</span><span class="language-bash">3、切换分支</span><br>git checkout &quot;remotes/origin/release-v3.0&quot;<br>root@master1:/bsn/ceph-csi/deploy/cephfs/kubernetes# pwd<br>/bsn/ceph-csi/deploy/cephfs/kubernetes<br>root@master1:/bsn/ceph-csi/deploy/cephfs# cp -r kubernetes /bsn/kubernetes<br>root@master1:/bsn/ceph-csi/deploy/cephfs# cd /bsn/kubernetes/<br>[root@master kubernetes]# ll<br>总用量 48<br>-rw-r--r-- 1 root root 5831 5月  31 13:40 csi-cephfsplugin-provisioner.yaml<br>-rw-r--r-- 1 root root 5704 5月  31 13:40 csi-cephfsplugin.yaml<br>-rw-r--r-- 1 root root  229 5月  31 13:40 csidriver.yaml<br>-rw-r--r-- 1 root root 1761 5月  31 13:40 csi-nodeplugin-psp.yaml<br>-rw-r--r-- 1 root root  551 5月  31 13:40 csi-nodeplugin-rbac.yaml<br>-rw-r--r-- 1 root root 1330 5月  31 13:40 csi-provisioner-psp.yaml<br>-rw-r--r-- 1 root root 2898 5月  31 13:40 csi-provisioner-rbac.yaml<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">以下三个配置文件需要：userKey、adminKey和clusterID</span><br>查询 clusterID命令：ceph -s<br>查询 userKey和adminKey命令：ceph auth get client.admin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建ceph集群节点信息</span><br>cat &gt;&gt;csi-config-map.yaml &lt;&lt; EOF<br>---<br>apiVersion: v1<br>kind: ConfigMap<br>data:<br>  config.json: |-<br>    [<br>      &#123;<br>        &quot;clusterID&quot;: &quot;9140c662-1000-11ee-a8c2-b18a6e371df1&quot;,<br>        &quot;monitors&quot;: [<br>          &quot;10.0.6.224:6789&quot;,<br>          &quot;10.0.6.225:6789&quot;<br>         ]<br>       &#125;<br>    ]<br>metadata:<br>  name: ceph-csi-config<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建连接ceph集群screct</span><br>cat &gt;&gt; css-cephfs-secret.yaml &lt;&lt; EOF<br>---<br>kind: Secret<br>apiVersion: v1<br>metadata:<br>  name: csi-cephfs-secret<br>  namespace: default<br>stringData:<br>  userID: admin  <br>  userKey: &quot;AQB+n5Jke4W9HxAA52X3NMhpDXO69ytb4ex8ow==&quot;<br>  adminID: admin  <br>  adminKey: &quot;AQB+n5Jke4W9HxAA52X3NMhpDXO69ytb4ex8ow==&quot;<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建ceph-StorageClass.yaml</span><br>cat &gt;&gt; ceph-StorageClass.yaml &lt;&lt;EOF<br>---<br>apiVersion: storage.k8s.io/v1<br>kind: StorageClass<br>metadata:<br>   name: cephfs<br>   annotations:<br>     storageclass.beta.kubernetes.io/is-default-class: &quot;true&quot;<br>     storageclass.kubesphere.io/supported-access-modes: &#x27;[&quot;ReadWriteOnce&quot;,&quot;ReadOnlyMany&quot;,&quot;ReadWriteMany&quot;]&#x27;<br>provisioner: cephfs.csi.ceph.com<br><span class="hljs-meta prompt_">#</span><span class="language-bash">provisioner: ceph.com/cephfs</span><br>parameters:<br>   clusterID: &quot;9140c662-1000-11ee-a8c2-b18a6e371df1&quot;<br>   fsName: &quot;cephfs&quot;<br>   pool: &quot;cephfs.cephfs.data&quot;    # cepfs数据name<br><span class="hljs-meta prompt_">   #</span><span class="language-bash">rootPath: /test</span><br>   csi.storage.k8s.io/provisioner-secret-name: csi-cephfs-secret<br>   csi.storage.k8s.io/provisioner-secret-namespace: default<br>   csi.storage.k8s.io/controller-expand-secret-name: csi-cephfs-secret<br>   csi.storage.k8s.io/controller-expand-secret-namespace: default<br>   csi.storage.k8s.io/node-stage-secret-name: csi-cephfs-secret<br>   csi.storage.k8s.io/node-stage-secret-namespace: default<br><span class="hljs-meta prompt_">   #</span><span class="language-bash">csi.storage.k8s.io/fstype: ext4</span><br>reclaimPolicy: Delete<br>allowVolumeExpansion: true<br>mountOptions:<br>   - discard<br>EOF<br>sed -i &#x27;s/k8s.gcr.io\/sig-storage/harbor.bsnbase.com\/ceph/g&#x27;  ./*<br>sed -i &#x27;s/quay.io\/cephcsi/harbor.bsnbase.com\/ceph/g&#x27; ./*<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 启动</span></span><br>[root@master kubernetes]# kubectl apply -f .<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 查看</span></span><br>[root@master ~]# kubectl get pod <br>NAME                                            READY   STATUS    RESTARTS   AGE<br>csi-cephfsplugin-4wzm5                          3/3     Running   0          30m<br>csi-cephfsplugin-gbf5s                          3/3     Running   0          30m<br>csi-cephfsplugin-l9qhg                          3/3     Running   0          30m<br>csi-cephfsplugin-provisioner-67fb594df9-87ssb   6/6     Running   0          30m<br>csi-cephfsplugin-provisioner-67fb594df9-rdtsf   6/6     Running   0          30m<br>csi-cephfsplugin-provisioner-67fb594df9-z26dp   6/6     Running   0          30m<br>csi-cephfsplugin-qjbrd                          3/3     Running   0          30m<br>csi-cephfsplugin-v2fdh                          3/3     Running   0          30m<br>[root@master kubernetes]# kubectl get sc<br>NAME                  PROVISIONER               RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE<br>cephfs (default)      cephfs.csi.ceph.com       Delete          Immediate              true                   25m<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># pvc测试</span></span><br>cat &gt;&gt;cephfs-test.yaml &lt;&lt;EOF<br>apiVersion: v1<br>kind: PersistentVolumeClaim<br>metadata:<br>  name: ceph-test<br>  labels: &#123;&#125;<br>  finalizers:<br>    - kubernetes.io/pvc-protection<br>spec:<br>  accessModes:<br>    - ReadWriteMany<br>  volumeMode: Filesystem<br>  resources:<br>    requests:<br>      storage: 5Gi<br>  storageClassName: cephfs<br>EOF<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>污点管理</title>
    <link href="/2023/09/12/%E6%B1%A1%E7%82%B9%E7%AE%A1%E7%90%86/"/>
    <url>/2023/09/12/%E6%B1%A1%E7%82%B9%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="污点管理"><a href="#污点管理" class="headerlink" title="污点管理"></a>污点管理</h1><p>要让一个服务永远调度到一台机器并且不允许其他服务调度到这台机器，可以使用以下两个Kubernetes功能配合完成:</p><ol><li>Node Selector:</li></ol><p>使用NodeSelector字段指定部署Pod的节点，只有符合条件的节点才会被选中。可以在Deployment或者StatefulSet的spec.template.spec.nodeSelector字段中添加标签选择条件，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs SQL">apiVersion: apps<span class="hljs-operator">/</span>v1<br>kind: Deployment<br>metadata:<br>  name: my<span class="hljs-operator">-</span>deployment<br>spec:<br>  replicas: <span class="hljs-number">3</span><br>  selector:<br>    matchLabels:<br>      app: my<span class="hljs-operator">-</span>app<br>  template:<br>    metadata:<br>      labels:<br>        app: my<span class="hljs-operator">-</span>app<br>    spec:<br>      nodeSelector:<br>        disktype: ssd<br>      containers:<br>        <span class="hljs-operator">-</span> name: my<span class="hljs-operator">-</span>container<br>          image: nginx<br></code></pre></td></tr></table></figure><ol><li>Taints and Tolerations:</li></ol><p>一个Taint是对一个Node的约束条件，保证只有符合该条件的Pod才能被部署到该Node上。而Toleration则是对这些Taint的容忍程度，告诉Scheduler 可以将哪些Pod 调度到拥有这个Taint 的 Node 上。</p><p>下面是一个添加污点的例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL">kubectl taint nodes <span class="hljs-operator">&lt;</span>node<span class="hljs-operator">-</span>name<span class="hljs-operator">&gt;</span> key<span class="hljs-operator">=</span><span class="hljs-keyword">value</span>:taint<span class="hljs-operator">-</span>effect<br></code></pre></td></tr></table></figure><ul><li><code>&lt;node-name&gt;</code>是要添加污点的节点名称。</li><li><code>key=value</code>是用户自定义的键值对，用于设定污点的类型。</li><li><code>taint-effect</code> 表示污点效应，它有三种设置：NoSchedule、PreferNoSchedule和 NoExecute。</li></ul><p>下面是一个添加了污点的节点的例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL">kubectl taint nodes node1 app<span class="hljs-operator">=</span>nginx:NoSchedule<br></code></pre></td></tr></table></figure><p>这个命令告诉Kubernetes，node1这个节点上有一个”app&#x3D;nginx”的Taint（污点），它的效应是NoSchedule。这样，即使Scheduler希望在该节点上调度Pod，只要该Pod没有对这个Taint的容忍，它就不能被调度到这个节点。</p><p>在Deployment或者StatefulSet的spec.template.spec.tolerations字段中可以设置某个Pod对Taint的容忍条件，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs SQL">apiVersion: apps<span class="hljs-operator">/</span>v1<br>kind: Deployment<br>metadata:<br>  name: my<span class="hljs-operator">-</span>deployment<br>spec:<br>  replicas: <span class="hljs-number">3</span><br>  selector:<br>    matchLabels:<br>      app: my<span class="hljs-operator">-</span>app<br>  template:<br>    metadata:<br>      labels:<br>        app: my<span class="hljs-operator">-</span>app<br>    spec:<br>      tolerations:<br>      <span class="hljs-operator">-</span> key: &quot;app&quot;<br>        operator: &quot;Equal&quot;<br>        <span class="hljs-keyword">value</span>: &quot;nginx&quot;<br>        effect: &quot;NoSchedule&quot;<br>      containers:<br>        <span class="hljs-operator">-</span> name: my<span class="hljs-operator">-</span>container<br>          image: nginx<br></code></pre></td></tr></table></figure><p>这个例子中，在Pod的spec.tolerations字段中添加了一条用于拉起Nginx的容忍规则，来允许Pod被部署到node1上。这样，只要Pod包含与Taint中定义的键和值匹配的容忍项，就可以被Scheduler调度到这个节点上执行部署。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu安装NFS存储(k8s)</title>
    <link href="/2023/09/12/Ubuntu%E5%AE%89%E8%A3%85NFS%E5%AD%98%E5%82%A8/"/>
    <url>/2023/09/12/Ubuntu%E5%AE%89%E8%A3%85NFS%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ubuntu安装NFS存储-k8s"><a href="#Ubuntu安装NFS存储-k8s" class="headerlink" title="Ubuntu安装NFS存储(k8s)"></a>Ubuntu安装NFS存储(k8s)</h1><p><strong>服务器A是192.168.49.160　　作为服务端</strong></p><p><strong>服务器B是192.168.50.123　　作为客户端</strong></p><h3 id="1、搭建服务端"><a href="#1、搭建服务端" class="headerlink" title="1、搭建服务端"></a>1、搭建服务端</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs SQL"># 安装nfs<span class="hljs-operator">-</span>server<br>apt<span class="hljs-operator">-</span><span class="hljs-keyword">get</span> install nfs<span class="hljs-operator">-</span>kernel<span class="hljs-operator">-</span>server <span class="hljs-operator">-</span>y<br># 创建共享文件夹<br>sudo mkdir <span class="hljs-operator">/</span>home<span class="hljs-operator">/</span>nfsfile　　# 创建一个共享文件夹<br>sudo chown <span class="hljs-operator">-</span>Rf <span class="hljs-number">777</span> <span class="hljs-operator">/</span>home<span class="hljs-operator">/</span>nfsfile<br><br># 修改配置参数文件<br>vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>exports　<br><span class="hljs-operator">/</span>home<span class="hljs-operator">/</span>nfsfile <span class="hljs-operator">*</span>(rw,no_root_squash,sync)<br><br># 启动服务<br>sudo systemctl enable nfs<span class="hljs-operator">-</span>server<br>sudo systemctl <span class="hljs-keyword">start</span> nfs<span class="hljs-operator">-</span>server　<br><br># 查看服务<br>sudo systemctl status nfs<span class="hljs-operator">-</span>server<br></code></pre></td></tr></table></figure><h3 id="2、搭建客户端"><a href="#2、搭建客户端" class="headerlink" title="2、搭建客户端"></a>2、搭建客户端</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs SQL"># 安装软件<br>apt<span class="hljs-operator">-</span><span class="hljs-keyword">get</span> install nfs<span class="hljs-operator">-</span>common <span class="hljs-operator">-</span>y<br><br># 创建文件夹验证<br>mkdir .<span class="hljs-operator">/</span>nfsfile    # 在当前目录下创建一个nfsfile<br><br># 挂载<br>sudo mount <span class="hljs-operator">-</span>t nfs <span class="hljs-number">192.168</span><span class="hljs-number">.49</span><span class="hljs-number">.160</span>:<span class="hljs-operator">/</span>home<span class="hljs-operator">/</span>nfsfile .<span class="hljs-operator">/</span>nfsfile  #把远程的nfsfile挂载到自己的<br><br># 查看 df <span class="hljs-operator">-</span>h可以找到<br></code></pre></td></tr></table></figure><h3 id="3、pv和pvc验证"><a href="#3、pv和pvc验证" class="headerlink" title="3、pv和pvc验证"></a>3、pv和pvc验证</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs SQL"># pv<br>cat <span class="hljs-operator">&gt;&gt;</span> nfs<span class="hljs-operator">-</span>pv<span class="hljs-operator">-</span>test.yaml <span class="hljs-operator">&lt;&lt;</span>EOF<br>apiVersion: v1<br>kind: PersistentVolume<br>metadata:<br>  name: nfs<span class="hljs-operator">-</span>pv001<br>  labels:<br>    pv: nfs<span class="hljs-operator">-</span>pv001<br>spec:<br>  capacity:<br>    storage: <span class="hljs-number">10</span>Gi<br>  accessModes:<br>    <span class="hljs-operator">-</span> ReadWriteMany<br>  persistentVolumeReclaimPolicy: Recycle<br>  storageClassName: nfs<br>  nfs:<br>    path: <span class="hljs-operator">/</span>home<span class="hljs-operator">/</span>nfsfile<br>    server: <span class="hljs-number">192.168</span><span class="hljs-number">.49</span><span class="hljs-number">.160</span><br>EOF<br><br># pvc<br>cat <span class="hljs-operator">&gt;&gt;</span>nfs<span class="hljs-operator">-</span>pvc<span class="hljs-operator">-</span>test.yaml <span class="hljs-operator">&lt;&lt;</span>EOF<br>apiVersion: v1<br>kind: PersistentVolumeClaim<br>metadata:<br>  name: nfs<span class="hljs-operator">-</span>pvc<br>  namespace: <span class="hljs-keyword">default</span><br>spec:<br>  accessModes:<br>    <span class="hljs-operator">-</span> ReadWriteMany<br>  resources:<br>    requests:<br>      storage: <span class="hljs-number">50</span>Mi  #容量<br>  selector:<br>    matchLabels:<br>      pv: nfs<span class="hljs-operator">-</span>pv001   #关联pv 的label,key<span class="hljs-operator">/</span><span class="hljs-keyword">value</span>要一致<br>  storageClassName: nfs<br>EOF<br></code></pre></td></tr></table></figure><p>#####  PV 的访问模式（accessModes）有三种：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL">ReadWriteOnce（RWO）：是最基本的方式，可读可写，但只支持被单个 Pod 挂载。<br>ReadOnlyMany（ROX）：可以以只读的方式被多个 Pod 挂载。<br>ReadWriteMany（RWX）：这种存储可以以读写的方式被多个 Pod 共享。<br></code></pre></td></tr></table></figure><h6 id="PV-的回收策略（persistentVolumeReclaimPolicy，即-PVC-释放卷的时候-PV-该如何操作）也有三种："><a href="#PV-的回收策略（persistentVolumeReclaimPolicy，即-PVC-释放卷的时候-PV-该如何操作）也有三种：" class="headerlink" title="PV 的回收策略（persistentVolumeReclaimPolicy，即 PVC 释放卷的时候 PV 该如何操作）也有三种："></a>PV 的回收策略（persistentVolumeReclaimPolicy，即 PVC 释放卷的时候 PV 该如何操作）也有三种：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">保留 Volume（需要手动清理）<br></code></pre></td></tr></table></figure><p>Recycle，删除数据，即 rm -rf &#x2F;volume&#x2F;*（只有 NFS 和 HostPath 支持）</p><p>Delete，删除存储资源，比如删除 AWS EBS 卷（只有 AWS EBS, GCE PD, Azure Disk 和 Cinder 支持）</p><p>PVC释放卷是指用户删除一个PVC对象时，那么与该PVC对象绑定的PV就会被释放。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL">PersistentVolume有四种状态：<br><br>Available: 可用状态<br>Bound: 绑定到PVC<br>Released: PVC被删掉，但是尚未回收<br>Failed : 自动回收失败<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/12/Centos%E5%AE%89%E8%A3%85NFS%E5%AD%98%E5%82%A8(k8s)/"/>
    <url>/2023/09/12/Centos%E5%AE%89%E8%A3%85NFS%E5%AD%98%E5%82%A8(k8s)/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="title-Centos安装NFS"><a href="#title-Centos安装NFS" class="headerlink" title="title:Centos安装NFS"></a>title:Centos安装NFS</h2><h1 id="Centos安装NFS存储-k8s"><a href="#Centos安装NFS存储-k8s" class="headerlink" title="Centos安装NFS存储(k8s)"></a>Centos安装NFS存储(k8s)</h1><p>NFS 是什么？ nfs(network file system) 网络文件系统，是FreeBSD支持的文件系统中的一种，允许网络中的计算机之间通过TCP&#x2F;IP网络共享资源</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs SQL"># 操作节点为NFS服务器<br><br># 安装nfs<br>yum <span class="hljs-operator">-</span>y install nfs<span class="hljs-operator">-</span>utils rpcbind<br><br># 创建nfs目录<br>mkdir <span class="hljs-operator">-</span>p <span class="hljs-operator">/</span>nfs<span class="hljs-operator">/</span>data<span class="hljs-operator">/</span><br>mkdir <span class="hljs-operator">-</span>p <span class="hljs-operator">/</span>nfs<span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>k8s<br><br># 授予权限<br>chmod <span class="hljs-operator">-</span>R <span class="hljs-number">777</span> <span class="hljs-operator">/</span>nfs<span class="hljs-operator">/</span>data<br><br># 编辑export文件<br># vim <span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>exports<br><span class="hljs-operator">/</span>nfs<span class="hljs-operator">/</span>data <span class="hljs-operator">*</span>(rw,no_root_squash,sync)  # 这里给的是root权限<span class="hljs-comment">---生产环境不推荐</span><br># 或者<span class="hljs-operator">/</span>nfs<span class="hljs-operator">/</span>data   <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-operator">/</span><span class="hljs-number">0</span>(rw,sync,all_squash)  # 所有用户权限被映射成服务端上的普通用户nobody,权限被压缩<br><br><br># 使得配置生效<br>exportfs <span class="hljs-operator">-</span>r<br><br># 查看生效<br>exportfs<br><br># 启动rpcbind、nfs服务<br>systemctl <span class="hljs-keyword">start</span> rpcbind <span class="hljs-operator">&amp;&amp;</span> systemctl enable rpcbind   #端口是<span class="hljs-number">111</span><br>systemctl <span class="hljs-keyword">start</span> nfs <span class="hljs-operator">&amp;&amp;</span> systemctl enable nfs           # 端口是 <span class="hljs-number">2049</span> <br><br># 查看rpc服务的注册情况<br>rpcinfo <span class="hljs-operator">-</span>p localhost<br><br># showmount测试<br>showmount <span class="hljs-operator">-</span>e ip(ip地址)<br></code></pre></td></tr></table></figure><h2 id="NFS配置参数说明"><a href="#NFS配置参数说明" class="headerlink" title="NFS配置参数说明:"></a>NFS配置参数说明:</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs SQL"># root_squash：在登入 NFS 主机使用分享之目录的使用者如果是 root 时，那么这个使用者的权限将被压缩成为匿名使用者，通常他的 UID 与 GID 都会变成 nobody 那个系统账号的身份。<br><br># no_root_squash：登入 NFS 主机使用分享目录的使用者，如果是 root 的话，那么对于这个分享的目录来说，他就具有 root 的权限！这个项目『极不安全』，不建议使用！<br><br># all_squash：登入 NFS 主机使用分享目录的使用者，所有用户均被压缩成为匿名使用者，即以nobody用户的身份登录。<br><br># anonuid和anongid：明确指定匿名使用者使用指定的id值用户的权限，访问分享的目录。<br><br># secure：限制客户端只能从小于<span class="hljs-number">1024</span>的tcp<span class="hljs-operator">/</span>ip端口连接nfs服务器（默认设置）。<br><br># insecure：允许客户端从大于<span class="hljs-number">1024</span>的tcp<span class="hljs-operator">/</span>ip端口连接服务器。<br></code></pre></td></tr></table></figure><h3 id="在K8S集群所有node节点上安装NFS客户端"><a href="#在K8S集群所有node节点上安装NFS客户端" class="headerlink" title="在K8S集群所有node节点上安装NFS客户端"></a>在K8S集群所有node节点上安装NFS客户端</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"># 操作节点为k8s集群所有node节点<br>yum <span class="hljs-operator">-</span>y install nfs<span class="hljs-operator">-</span>utils  rpcbind<br># systemctl <span class="hljs-keyword">start</span> nfs <span class="hljs-operator">&amp;&amp;</span> systemctl enable nfs<br></code></pre></td></tr></table></figure><h2 id="创建pv"><a href="#创建pv" class="headerlink" title="创建pv"></a>创建pv</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs SQL">apiVersion: v1<br>kind: PersistentVolume<br>metadata:<br>  name: nfs<span class="hljs-operator">-</span>pv001<br>  labels:<br>    pv: nfs<span class="hljs-operator">-</span>pv001<br>spec:<br>  capacity:<br>    storage: <span class="hljs-number">10</span>Gi<br>  accessModes:<br>    <span class="hljs-operator">-</span> ReadWriteMany<br>  persistentVolumeReclaimPolicy: Recycle<br>  storageClassName: nfs<br>  nfs:<br>    path: <span class="hljs-operator">/</span>root<span class="hljs-operator">/</span>nfs<span class="hljs-operator">-</span>server<span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>nginx<br>    server: <span class="hljs-number">10.0</span><span class="hljs-number">.6</span><span class="hljs-number">.4</span><br></code></pre></td></tr></table></figure><h2 id="创建pvc"><a href="#创建pvc" class="headerlink" title="创建pvc"></a>创建pvc</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs SQL">apiVersion: v1<br>kind: PersistentVolumeClaim<br>metadata:<br>  name: nfs<span class="hljs-operator">-</span>pvc<br>  namespace: <span class="hljs-keyword">default</span><br>spec:<br>  accessModes:<br>    <span class="hljs-operator">-</span> ReadWriteMany<br>  resources:<br>    requests:<br>      storage: <span class="hljs-number">50</span>Mi  #容量<br>  selector:<br>    matchLabels:<br>      pv: nfs<span class="hljs-operator">-</span>pv001   #关联pv 的label,key<span class="hljs-operator">/</span><span class="hljs-keyword">value</span>要一致<br>  storageClassName: nfs<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 版本升级</title>
    <link href="/2023/09/12/MySQL%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
    <url>/2023/09/12/MySQL%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、升级前准备"><a href="#一、升级前准备" class="headerlink" title="一、升级前准备:"></a>一、升级前准备:</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通外网机器执行 pull镜像</span><br>docker pull mysql:5.7.43<br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存镜像</span><br>docker save mysql:5.7.43 &gt; mysql-5.7.43.tar<br></code></pre></td></tr></table></figure><h1 id="二、升级"><a href="#二、升级" class="headerlink" title="二、升级"></a>二、升级</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">需升级机器执行</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">导入镜像</span><br>docker load -i mysql-5.7.43.tar<br><span class="hljs-meta prompt_"># </span><span class="language-bash">停服备份</span><br>cd /bsn/fisco<br>docker-compose -f docker-compose-sign-manager-mysql.yaml down<br>cp -r /bsn/fisco/mysql /bsn/fisco/mysql_bak<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改配置</span><br>cd /bsn/fisco<br>vim docker-compose-sign-manager-mysql.yaml<br>version: &#x27;2&#x27;<br>services:<br>  mysql:<br>    image: mysql:5.7.43<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>docker-compose -f docker-compose-sign-manager-mysql.yaml up -d<br></code></pre></td></tr></table></figure><h1 id="三、验证"><a href="#三、验证" class="headerlink" title="三、验证"></a>三、验证</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">验证</span><br>docker ps -a | grep mysql<br>CONTAINER ID   IMAGE                                             COMMAND                  CREATED         STATUS        PORTS                                                  NAMES<br>cfdf6da235fe   mysql:5.7.43                                      &quot;docker-entrypoint.s…&quot;   7 days ago      Up 7 days     0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   webase-mysql<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Rabbitmq版本升级</title>
    <link href="/2023/09/12/Rabbitmq%20%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
    <url>/2023/09/12/Rabbitmq%20%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、升级前操作"><a href="#一、升级前操作" class="headerlink" title="一、升级前操作:"></a>一、升级前操作:</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通外网机器执行 pull镜像</span><br>docker pull rabbitmq:3.10.25<br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存镜像</span><br>docker save rabbitmq:3.10.25 &gt; rabbitmq-3.10.25.tar<br></code></pre></td></tr></table></figure><h1 id="二、升级"><a href="#二、升级" class="headerlink" title="二、升级"></a>二、升级</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">需升级机器执行</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">导入镜像</span><br>docker load -i rabbitmq-3.10.25.tar<br><span class="hljs-meta prompt_"># </span><span class="language-bash">停服备份</span><br>cd /bsn/rabbitmq<br>docker-compose -f docker-compose-mq.yml down<br>cp -r /bsn/rabbitmq /bsn/rabbitmq_bak<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改配置</span><br>cd /bsn/rabbitmq<br>vim docker-compose-mq.yml<br>version: &#x27;3&#x27;  #&quot;登录容器请执行:rabbitmq-plugins enable rabbitmq_management 才可&gt;使用WEB管理页面&quot;<br>services:<br>  rabbitmq:<br>    image: rabbitmq:3.10.25<br>    container_name: rabbitmq<br>    hostname: myRabbitmq<br>    ports:<br>      - &quot;5672:5672&quot;<br>      - &quot;15672:15672&quot;<br>    environment:<br>     - RABBITMQ_DEFAULT_VHOST=my_vhost<br>     - RABBITMQ_DEFAULT_USER=admin<br>     - RABBITMQ_DEFAULT_PASS=admin<br>     - RABBITMQ_LOGS=/var/lib/rabbitmq/rabbitmq.log<br>    privileged: true<br>    volumes:<br>      - /bsn/rabbitmq/data:/var/lib/rabbitmq<br>      - /bsn/rabbitmq/init.sh:/root/init.sh<br>      - /etc/localtime:/etc/localtime<br>    restart: always<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>docker-compose -f docker-compose-mq.yml up -d<br></code></pre></td></tr></table></figure><h1 id="三、验证"><a href="#三、验证" class="headerlink" title="三、验证"></a>三、验证</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">验证</span><br>docker ps -a | grep rabbitmq<br>018564679af1   rabbitmq:3.10.25                                         &quot;docker-entrypoint.s…&quot;   5 hours ago     Up 5 hours   4369/tcp, 0.0.0.0:5672-&gt;5672/tcp, :::5672-&gt;5672/tcp, 5671/tcp, 15691-15692/tcp, 25672/tcp, 0.0.0.0:15672-&gt;15672/tcp, :::15672-&gt;15672/tcp   rabbitmq<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx版本升级</title>
    <link href="/2023/09/12/Nginx%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
    <url>/2023/09/12/Nginx%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、升级前操作"><a href="#一、升级前操作" class="headerlink" title="一、升级前操作:"></a>一、升级前操作:</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通外网机器执行</span><br>yum install yum-utils<br>yum-config-manager --enable nginx-mainline<br>yum reinstall --downloadonly --downloaddir=/root/nginx/ nginx<br>yum reinstall --downloadonly --downloaddir=/root/nginx/ nginx-module-*<br>yum reinstall --downloadonly --downloaddir=/root/nginx/ pcre2-10.23-2.el7.x86_64<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将.rpm安装包拷贝到需升级机器</span><br>cd /root/nginx<br>ll<br><span class="hljs-meta prompt_">#</span><span class="language-bash">total 1036</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-rw-r--r-- 1 root root 823020 Apr 12 01:47 nginx-1.24.0-1.el7.ngx.x86_64.rpm</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-rw-r--r-- 1 root root  25448 Apr 12 01:47 nginx-module-image-filter-1.24.0-1.el7.ngx.x86_64.rpm</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-rw-r--r-- 1 root root 206176 Aug 11  2017 pcre2-10.23-2.el7.x86_64.rpm</span><br></code></pre></td></tr></table></figure><h1 id="二、升级"><a href="#二、升级" class="headerlink" title="二、升级"></a>二、升级</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;设置时间变量&quot;</span></span><br>TIME=`date &#x27;+%Y%m%d%H%M&#x27;`<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看nginx位置</span><br>which nginx<br><span class="hljs-meta prompt_">#</span><span class="language-bash">/usr/sbin/nginx</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;备份&quot;</span></span><br>cp /usr/sbin/nginx /usr/sbin/nginx_bak$TIME<br>cp -r /etc/nginx /etc/nginx_bak$TIME<br>cp -r /usr/lib64/nginx /usr/lib64/nginx_bak$TIME<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;yum安装&quot;</span></span><br>cd /bsn/package/nginx20230807<br>ll<br><span class="hljs-meta prompt_">#</span><span class="language-bash">total 1036</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-rw-r--r-- 1 root root 823020 Aug  7 18:10 nginx-1.24.0-1.el7.ngx.x86_64.rpm</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-rw-r--r-- 1 root root  25448 Aug  7 18:10 nginx-module-image-filter-1.24.0-1.el7.ngx.x86_64.rpm</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-rw-r--r-- 1 root root 206176 Aug  7 18:10 pcre2-10.23-2.el7.x86_64.rpm</span><br>yum install -y nginx-1.24.0-1.el7.ngx.x86_64.rpm<br></code></pre></td></tr></table></figure><h1 id="三、验证"><a href="#三、验证" class="headerlink" title="三、验证"></a>三、验证</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">验证</span><br>nginx -v<br><span class="hljs-meta prompt_">#</span><span class="language-bash">nginx version: nginx/1.24.0</span><br>nginx -t<br><span class="hljs-meta prompt_">#</span><span class="language-bash">nginx: [emerg] module <span class="hljs-string">&quot;/usr/lib64/nginx/modules/ngx_http_image_filter_module.so&quot;</span> version 1016001 instead of 1024000 <span class="hljs-keyword">in</span> /usr/share/nginx/modules/mod-http-image-filter.conf:1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">nginx: configuration file /etc/nginx/nginx.conf <span class="hljs-built_in">test</span> failed</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">调整nginx配置</span><br>vim /etc/nginx/nginx.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">include /usr/share/nginx/modules/*.conf;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重新加载配置</span><br>systemctl reload nginx<br><span class="hljs-meta prompt_">#</span><span class="language-bash">或</span><br>nginx -s reload<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>OpenSSL SSH 版本升级</title>
    <link href="/2023/09/12/OpenSSL%20SSH%20%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
    <url>/2023/09/12/OpenSSL%20SSH%20%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、升级前操作"><a href="#一、升级前操作" class="headerlink" title="一、升级前操作:"></a>一、升级前操作:</h1><p>开启telnet备用远程连接，防止ssh意外中断后可采用备用控制渠道</p><h2 id="1）-安装telnet服务，用于远程控制处理ssh升级"><a href="#1）-安装telnet服务，用于远程控制处理ssh升级" class="headerlink" title="1）****安装telnet服务，用于远程控制处理ssh升级"></a><strong>1）****安装telnet服务，用于远程控制处理ssh升级</strong></h2><p>防止SSH远程控制时，升级过程中出现连接中断，可通过telnet备用方式进行远程连接（由于telnet是明文传输，不安全，只作为临时使用，升级完成后，必须停止卸载该服务）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装telnet服务</span><br>yum -y install telnet-server<br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动telnet服务</span><br>systemctl start telnet.socket<br><span class="hljs-meta prompt_">#</span><span class="language-bash">检测防火墙状态</span><br>systemctl status firewalld<br><span class="hljs-meta prompt_">#</span><span class="language-bash">开启防火墙23端口（若防火墙禁用的请略过该命令）</span><br>firewall-cmd --permanent --add-port=23/tcp --zone=public<br>firewall-cmd --reload<br><span class="hljs-meta prompt_">#</span><span class="language-bash">默认情况下，linux不允许root用户以telnet方式登录linux主机，移除securetty文件</span><br>mv /etc/securetty&#123;,.bak&#125;<br></code></pre></td></tr></table></figure><h2 id="2）若ssh中断可采用telnet进行远程控制，进行处理ssh升级"><a href="#2）若ssh中断可采用telnet进行远程控制，进行处理ssh升级" class="headerlink" title="2）若ssh中断可采用telnet进行远程控制，进行处理ssh升级"></a>2）若ssh中断可采用telnet进行远程控制，进行处理ssh升级</h2><p>#使用windows<a href="https://so.csdn.net/so/search?q=%E6%89%93%E5%BC%80cmd&spm=1001.2101.3001.7020">打开cmd</a>窗口,使用telnet远程控制服务器 telnet [服务器ip]</p><h1 id="二、OpenSSl-SSH升级"><a href="#二、OpenSSl-SSH升级" class="headerlink" title="二、OpenSSl SSH升级"></a>二、OpenSSl SSH升级</h1><h2 id="1-安装升级zlib"><a href="#1-安装升级zlib" class="headerlink" title="1, 安装升级zlib"></a>1, <strong>安装升级zlib</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Shell">TIME=`date &#x27;+%Y%m%d%H%M&#x27;`<br>cp -r /usr/local/zlib /usr/local/zlib_bak$TIME<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;解压zlib&quot;</span></span><br>cd /root/<br>tar zvxf /root/zlib-1.2.13.tar.gz<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;进入zlib目录&quot;</span></span><br>cd /root/zlib-1.2.13<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;开始编译&quot;</span></span><br>./configure --prefix=/usr/local/zlib<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;执行make&quot;</span></span><br>make<br>make install<br></code></pre></td></tr></table></figure><h2 id="2-安装升级OpenSSl"><a href="#2-安装升级OpenSSl" class="headerlink" title="2, 安装升级OpenSSl"></a>2, <strong>安装升级OpenSSl</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;解压openssl&quot;</span></span><br>cd /root/<br>tar zvxf /root/openssl-1.1.1u.tar.gz<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;进入openssl目录&quot;</span></span><br>cd /root/openssl-1.1.1u<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;开始编译&quot;</span></span><br>cp -r /usr/local/openssl/ /usr/local/openssl_bak$TIME<br>./config --prefix=/usr/local/openssl shared zlib <br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;执行make&quot;</span></span><br>make<br>make install<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;备份openssl&quot;</span></span><br>mv /usr/bin/openssl /usr/bin/openssl_bak$TIME<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;创建软链接&quot;</span></span><br>ln -sv /usr/local/openssl/bin/openssl /usr/bin/openssl<br>ln -sv /usr/local/openssl/include/openssl /usr/include/openssl<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;将openssl 的lib 库添加到系统&quot;</span></span><br>echo &quot;/usr/local/openssl/lib64&quot; &gt; /etc/ld.so.conf.d/openssl.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;执行 ldconfig&quot;</span></span><br>ldconfig -v<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;查看openssl版本&quot;</span></span><br>openssl version<br></code></pre></td></tr></table></figure><h2 id="3-安装升级OpenSSH"><a href="#3-安装升级OpenSSH" class="headerlink" title="3, 安装升级OpenSSH"></a>3, <strong>安装升级OpenSSH</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;备份ssh文件&quot;</span></span><br>mkdir /root/ssh_bak$TIME<br>sed -i &#x27;s/GSSAPIAuthentication/#GSSAPIAuthentication/g&#x27; /etc/ssh/sshd_config<br>sed -i &#x27;s/GSSAPICleanupCredentials/#GSSAPICleanupCredentials/g&#x27; /etc/ssh/sshd_config<br>sed -i &#x27;s/UsePrivilegeSeparation/#UsePrivilegeSeparation/g&#x27; /etc/ssh/sshd_config<br>cp -r /etc/ssh/* /root/ssh_bak$TIME<br>echo &quot;解压openssh包&quot;<br>cd /root/<br>tar zvxf /root/openssh-9.3p2.tar.gz<br>echo &quot;进入openssh目录&quot;<br>cd /root/openssh-9.3p2<br>echo &quot;编译openssh&quot;<br>./configure --prefix=/usr --sysconfdir=/etc/ssh --with-ssl-dir=/usr/local/openssl --with-zlib=/usr/local/zlib --with-md5-passwords --with-pam --with-privsep-path=/var/lib/sshd<br>echo &quot;执行make&quot;<br>make<br>make install<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;恢复ssh配置文件&quot;</span></span><br>sed -i &#x27;s/#PermitRootLogin yes/PermitRootLogin yes/g&#x27; /etc/ssh/sshd_config<br>echo &#x27;PubkeyAuthentication yes&#x27; &gt;&gt;/etc/ssh/sshd_config<br>echo &#x27;PubkeyAcceptedKeyTypes=+ssh-rsa&#x27; &gt;&gt;/etc/ssh/sshd_config<br>sed -i &#x27;s/Type=notify/#Type=notify/g&#x27; /usr/lib/systemd/system/sshd.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;重启sshd&quot;</span></span><br>systemctl daemon-reload<br>systemctl restart sshd<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;查看ssh ssl版本&quot;</span></span><br>ssh -V<br>openssl version<br></code></pre></td></tr></table></figure><h2 id="4-开机自启动"><a href="#4-开机自启动" class="headerlink" title="4, 开机自启动"></a>4, 开机自启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;开机自启动&quot;</span></span><br>echo &#x27;systemctl start sshd&#x27; &gt;&gt;/etc/rc.d/rc.local<br>chmod + /etc/rc.d/rc.local<br></code></pre></td></tr></table></figure><h1 id="三，验证"><a href="#三，验证" class="headerlink" title="三，验证"></a>三，验证</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;查看ssh ssl版本&quot;</span></span><br>ssh -V<br>OpenSSH_9.3p2, OpenSSL 1.1.1u  30 May 2023<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat 版本升级</title>
    <link href="/2023/09/12/Tomcat%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
    <url>/2023/09/12/Tomcat%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、升级前准备"><a href="#一、升级前准备" class="headerlink" title="一、升级前准备"></a>一、升级前准备</h1><p>由于tomcat版本经常会有漏洞，所以经常需要升级更新。</p><p>但是每次升级tomcat都需要把logs和webapps文件夹重新copy出来，造成了很多不必要的工作量</p><p>下面提供两种方式的升级，仅供参考、更新前最好做好备份，以防万一</p><p>1、小版本升级</p><p>如果类似于8.1到8.5的升级、那么只需要更换lib文件夹的内容即可</p><p>2、大版本升级</p><p>类似于7.1-8.5的升级、那么更换lib文件夹和bin文件夹下的内容即可</p><p>更换后重启tomcat</p><p><strong>操作：</strong></p><p>1：查看当前tomcat版本:</p><p>一般tomcat安装在&#x2F;usr&#x2F;local&#x2F;下</p><p>cd 至apache-tomcat-xxx&#x2F;bin</p><p>sh version.sh命令，查看版本信息</p><p>2:下载需要的tomcat安装包：</p><p>下载网址：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p><p>选择需要下载的版本：</p><p><img src="https://reddateinfo.feishu.cn/space/api/box/stream/download/asynccode/?code=Njc5MzE4NGU3ZjM3YTM0ZWE0OTlhMTEwZDVhYmMwMWJfaW0yTVdhRlBxbUNob1NzY3Myak1JUkZBRkNVNG4wS1NfVG9rZW46Rm1URmJCNGd2b3EzaUl4UzVJMmNhUEgwbmFkXzE2OTQ0ODY3NTM6MTY5NDQ5MDM1M19WNA" alt="img"></p><h1 id="二、升级"><a href="#二、升级" class="headerlink" title="二、升级"></a>二、升级</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">去服务器备份apache-tomcat-xx 下的全部文件。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">先停tomcat服务</span><br>cd /bsn/tomcat-portal/bin<br>sh shutdown.sh<br>或者<br>ps -ef | grep tomcat | grep -v grep<br>Kill -9 PID<br><span class="hljs-meta prompt_"># </span><span class="language-bash">备份</span><br>cd /bsn/<br>cp -r tomcat-portal tomcat-portal_bak202303031116<br><span class="hljs-meta prompt_"># </span><span class="language-bash">清除lib旧文件 <span class="hljs-comment">###注意路径和文件 rm -rf操作</span></span><br>cd tomcat-portal/lib<br>rm -rf *<br><span class="hljs-meta prompt_"># </span><span class="language-bash">上传新包到服务器 apache-tomcat-9.0.73.tar.gz</span><br>cd /root<br>tar -zxvf apache-tomcat-9.0.73.tar.gz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">拷贝新lib文件到旧lib文件夹里</span><br>cd /root/apache-tomcat-9.0.73/lib<br>cp * /bsn/tomcat-portal/lib<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启tomcat服务</span><br>cd /bsn/tomcat-portal/bin<br>sh startup.sh<br></code></pre></td></tr></table></figure><h1 id="三、验证"><a href="#三、验证" class="headerlink" title="三、验证"></a>三、验证</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看版本</span><br>sh version.sh <br>Using CATALINA_BASE:   /bsn/tomcat<br>Using CATALINA_HOME:   /bsn/tomcat<br>Using CATALINA_TMPDIR: /bsn/tomcat/temp<br>Using JRE_HOME:        /bsn/java<br>Using CLASSPATH:       /bsn/tomcat/bin/bootstrap.jar:/bsn/tomcat/bin/tomcat-juli.jar<br>Using CATALINA_OPTS:   <br>Server version: Apache Tomcat/9.0.78<br>Server built:   Jul 4 2023 13:15:43 UTC<br>Server number:  9.0.78.0<br>OS Name:        Linux<br>OS Version:     3.10.0-693.el7.x86_64<br>Architecture:   amd64<br>JVM Version:    1.8.0_231-b11<br>JVM Vendor:     Oracle Corporation<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查验证服务</span><br>ps -ef | grep tomcat | grep -v grep<br>tail -111f /bsn/tomcat-portal/logs/catalina.out<br>curl IP+端口或者浏览器网页查看<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>磁盘挂载</title>
    <link href="/2023/09/12/%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD/"/>
    <url>/2023/09/12/%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、版本信息"><a href="#一、版本信息" class="headerlink" title="一、版本信息"></a>一、版本信息</h1><p>版本号：1.1</p><p>创建日期2023-2-14</p><p>审核人周晓明</p><h1 id="二、变更日志"><a href="#二、变更日志" class="headerlink" title="二、变更日志"></a>二、变更日志</h1><table><thead><tr><th><strong>时间</strong></th><th><strong>版本号</strong></th><th><strong>变更人</strong></th><th><strong>主要变更内容</strong></th></tr></thead><tbody><tr><td>2023-2-14</td><td>V1.0</td><td>周晓明</td><td>编写文件大纲及示例</td></tr><tr><td>2023-2-14</td><td>V1.1</td><td>张云龙</td><td>算力中心部署内容填充</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="三、名词解释"><a href="#三、名词解释" class="headerlink" title="三、名词解释"></a>三、名词解释</h1><table><thead><tr><th><strong>术语 &#x2F; 缩略词</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td>eos</td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h1 id="四、磁盘挂载–5m"><a href="#四、磁盘挂载–5m" class="headerlink" title="四、磁盘挂载–5m"></a>四、磁盘挂载–5m</h1><p>数据盘可实际数据保存要求进行挂载</p><p>创建&#x2F;bsn目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo <span class="hljs-built_in">mkdir</span> /bsn<br></code></pre></td></tr></table></figure><p>查看新挂载的数据盘的设备标识符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo fdisk -l<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Shell">磁盘 /dev/nvme1n1p1：21.5 GB, 21474836480 字节，41943040 个扇区<br>Units = 扇区 of 1 * 512 = 512 bytes<br>扇区大小(逻辑/物理)：512 字节 / 512 字节<br>I/O 大小(最小/最佳)：512 字节 / 512 字节<br><br><br>磁盘 /dev/sda：53.7 GB, 53687091200 字节，104857600 个扇区<br>Units = 扇区 of 1 * 512 = 512 bytes<br>扇区大小(逻辑/物理)：512 字节 / 512 字节<br>I/O 大小(最小/最佳)：512 字节 / 512 字节<br>磁盘标签类型：dos<br>磁盘标识符：0x00098b66<br><br>   设备 Boot      Start         End      Blocks   Id  System<br>/dev/sda1   *        2048     2099199     1048576   83  Linux<br>/dev/sda2         2099200   104857599    51379200   8e  Linux LVM<br><br>磁盘 /dev/mapper/centos-root：48.4 GB, 48444211200 字节，94617600 个扇区<br>Units = 扇区 of 1 * 512 = 512 bytes<br>扇区大小(逻辑/物理)：512 字节 / 512 字节<br>I/O 大小(最小/最佳)：512 字节 / 512 字节<br><br><br>磁盘 /dev/mapper/centos-swap：4160 MB, 4160749568 字节，8126464 个扇区<br>Units = 扇区 of 1 * 512 = 512 bytes<br>扇区大小(逻辑/物理)：512 字节 / 512 字节<br>I/O 大小(最小/最佳)：512 字节 / 512 字节<br></code></pre></td></tr></table></figure><p>数据盘新建分区（此处以&#x2F;dev&#x2F;nvme1n1p1为例，sdb根据用户自己的磁盘标识符修改）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo fdisk /dev/nvme1n1p1<br></code></pre></td></tr></table></figure><p>输入 <strong>m</strong> 可以看到相关命令帮助，这里我们用到以下几个选项 <strong>g</strong> 配置磁盘格式为GPT</p><p><strong>n</strong> 创建新分区</p><p><strong>p</strong> 打印分区表 <strong>w</strong> 写入更改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Plain">欢迎使用 fdisk (util-linux 2.23.2)。<br><br>更改将停留在内存中，直到您决定将更改写入磁盘。<br>使用写入命令前请三思。<br><br>Device does not contain a recognized partition table<br>使用磁盘标识符 0x7820e016 创建新的 DOS 磁盘标签。<br><br>命令(输入 m 获取帮助)：m<br>命令操作<br>   a   toggle a bootable flag<br>   b   edit bsd disklabel<br>   c   toggle the dos compatibility flag<br>   d   delete a partition<br>   g   create a new empty GPT partition table<br>   G   create an IRIX (SGI) partition table<br>   l   list known partition types<br>   m   print this menu<br>   n   add a new partition<br>   o   create a new empty DOS partition table<br>   p   print the partition table<br>   q   quit without saving changes<br>   s   create a new empty Sun disklabel<br>   t   change a partition&#x27;s system id<br>   u   change display/entry units<br>   v   verify the partition table<br>   w   write table to disk and exit<br>   x   extra functionality (experts only)<br><br>命令(输入 m 获取帮助)：<br></code></pre></td></tr></table></figure><p>依次输入  <strong>g n</strong> 三<strong>个回车 p  w</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Bash">[root@localhost ~]<span class="hljs-comment"># fdisk /dev/sdb </span><br>欢迎使用 fdisk (util-linux 2.23.2)。<br><br>更改将停留在内存中，直到您决定将更改写入磁盘。<br>使用写入命令前请三思。<br><br>Device does not contain a recognized partition table<br>使用磁盘标识符 0x068fedb7 创建新的 DOS 磁盘标签。<br><br>命令(输入 m 获取帮助)：g<br>Building a new GPT disklabel (GUID: F2BBD1D8-C031-4685-8A51-00FE689480B2)<br><br><br>命令(输入 m 获取帮助)：n<br>分区号 (1-128，默认 1)：<br>第一个扇区 (2048-41943006，默认 2048)：<br>Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (2048-41943006，默认 41943006)：<br>已创建分区 1<br><br><br>命令(输入 m 获取帮助)：p<br><br>磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区<br>Units = 扇区 of 1 * 512 = 512 bytes<br>扇区大小(逻辑/物理)：512 字节 / 512 字节<br>I/O 大小(最小/最佳)：512 字节 / 512 字节<br>磁盘标签类型：gpt<br>Disk identifier: F2BBD1D8-C031-4685-8A51-00FE689480B2<br><br><br><span class="hljs-comment">#         Start          End    Size  Type            Name</span><br> 1         2048     41943006     20G  Linux filesyste <br><br>命令(输入 m 获取帮助)：w<br>The partition table has been altered!<br><br>Calling ioctl() to re-read partition table.<br>正在同步磁盘。<br></code></pre></td></tr></table></figure><p>使用命令确认分区创建成功，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL">sudo fdisk <span class="hljs-operator">-</span>l <span class="hljs-operator">/</span>dev<span class="hljs-operator">/</span>nvme1n1p1<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL">磁盘 <span class="hljs-operator">/</span>dev<span class="hljs-operator">/</span>nvme1n1p1：<span class="hljs-number">21.5</span> GB, <span class="hljs-number">21474836480</span> 字节，<span class="hljs-number">41943040</span> 个扇区<br>Units <span class="hljs-operator">=</span> 扇区 <span class="hljs-keyword">of</span> <span class="hljs-number">1</span> <span class="hljs-operator">*</span> <span class="hljs-number">512</span> <span class="hljs-operator">=</span> <span class="hljs-number">512</span> bytes<br>扇区大小(逻辑<span class="hljs-operator">/</span>物理)：<span class="hljs-number">512</span> 字节 <span class="hljs-operator">/</span> <span class="hljs-number">512</span> 字节<br>I<span class="hljs-operator">/</span>O 大小(最小<span class="hljs-operator">/</span>最佳)：<span class="hljs-number">512</span> 字节 <span class="hljs-operator">/</span> <span class="hljs-number">512</span> 字节<br>磁盘标签类型：dos<br>磁盘标识符：<span class="hljs-number">0x0d659174</span><br><br>   设备 Boot      <span class="hljs-keyword">Start</span>         <span class="hljs-keyword">End</span>      Blocks   Id  <span class="hljs-keyword">System</span><br><span class="hljs-operator">/</span>dev<span class="hljs-operator">/</span>nvme1n1p1            <span class="hljs-number">2048</span>    <span class="hljs-number">41943039</span>    <span class="hljs-number">20970496</span>   <span class="hljs-number">83</span>  Linux<br></code></pre></td></tr></table></figure><p>格式化新建的分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL">sudo mkfs.xfs <span class="hljs-operator">-</span>f <span class="hljs-operator">/</span>dev<span class="hljs-operator">/</span>nvme1n1p1<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SQL">meta<span class="hljs-operator">-</span>data<span class="hljs-operator">=</span><span class="hljs-operator">/</span>dev<span class="hljs-operator">/</span>nvme1n1p1              isize<span class="hljs-operator">=</span><span class="hljs-number">512</span>    agcount<span class="hljs-operator">=</span><span class="hljs-number">4</span>, agsize<span class="hljs-operator">=</span><span class="hljs-number">1310656</span> blks<br>         <span class="hljs-operator">=</span>                       sectsz<span class="hljs-operator">=</span><span class="hljs-number">512</span>   attr<span class="hljs-operator">=</span><span class="hljs-number">2</span>, projid32bit<span class="hljs-operator">=</span><span class="hljs-number">1</span><br>         <span class="hljs-operator">=</span>                       crc<span class="hljs-operator">=</span><span class="hljs-number">1</span>        finobt<span class="hljs-operator">=</span><span class="hljs-number">0</span>, sparse<span class="hljs-operator">=</span><span class="hljs-number">0</span><br>data     <span class="hljs-operator">=</span>                       bsize<span class="hljs-operator">=</span><span class="hljs-number">4096</span>   blocks<span class="hljs-operator">=</span><span class="hljs-number">5242624</span>, imaxpct<span class="hljs-operator">=</span><span class="hljs-number">25</span><br>         <span class="hljs-operator">=</span>                       sunit<span class="hljs-operator">=</span><span class="hljs-number">0</span>      swidth<span class="hljs-operator">=</span><span class="hljs-number">0</span> blks<br>naming   <span class="hljs-operator">=</span>version <span class="hljs-number">2</span>              bsize<span class="hljs-operator">=</span><span class="hljs-number">4096</span>   ascii<span class="hljs-operator">-</span>ci<span class="hljs-operator">=</span><span class="hljs-number">0</span> ftype<span class="hljs-operator">=</span><span class="hljs-number">1</span><br>log      <span class="hljs-operator">=</span>internal log           bsize<span class="hljs-operator">=</span><span class="hljs-number">4096</span>   blocks<span class="hljs-operator">=</span><span class="hljs-number">2560</span>, version<span class="hljs-operator">=</span><span class="hljs-number">2</span><br>         <span class="hljs-operator">=</span>                       sectsz<span class="hljs-operator">=</span><span class="hljs-number">512</span>   sunit<span class="hljs-operator">=</span><span class="hljs-number">0</span> blks, lazy<span class="hljs-operator">-</span>count<span class="hljs-operator">=</span><span class="hljs-number">1</span><br>realtime <span class="hljs-operator">=</span><span class="hljs-keyword">none</span>                   extsz<span class="hljs-operator">=</span><span class="hljs-number">4096</span>   blocks<span class="hljs-operator">=</span><span class="hljs-number">0</span>, rtextents<span class="hljs-operator">=</span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>备份&#x2F;etc&#x2F;fstab文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo <span class="hljs-built_in">cp</span> -a /etc/fstab /etc/fstab.bak<br></code></pre></td></tr></table></figure><p>加入开机自动挂载到&#x2F;bsn目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/dev/sdb /bsn xfs defaults 0 0&quot;</span>&gt;&gt; /etc/fstab<br></code></pre></td></tr></table></figure><p>手动挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">mount -a<br></code></pre></td></tr></table></figure><p>查看是否成功挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Bash">[root@localhost bsn]<span class="hljs-comment"># mount -a</span><br>[root@localhost bsn]<span class="hljs-comment"># df -h</span><br>Filesystem      Size  Used Avail Use% Mounted on<br>/dev/nvme0n1p1   30G  6.7G   24G  23% /<br>devtmpfs        7.7G     0  7.7G   0% /dev<br>tmpfs           7.7G     0  7.7G   0% /dev/shm<br>tmpfs           7.7G   17M  7.7G   1% /run<br>tmpfs           7.7G     0  7.7G   0% /sys/fs/cgroup<br>tmpfs           1.6G     0  1.6G   0% /run/user/1018<br>/dev/nvme1n1p1  200G   33M  200G   1% /bsn<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernets安装高可用，仲裁卷</title>
    <link href="/2023/09/12/filebeat/"/>
    <url>/2023/09/12/filebeat/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="filebeat-配置日志采集"><a href="#filebeat-配置日志采集" class="headerlink" title="filebeat 配置日志采集"></a>filebeat 配置日志采集</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#修改filebeat 配置</span><br><br>filebeat.inputs:<br>  - <span class="hljs-built_in">type</span>: <span class="hljs-built_in">log</span><br>    enabled: <span class="hljs-literal">true</span><br>    paths:<br>      - /var/log/secure<br>    fields:<br>      log_topic: secure-log<br>  - <span class="hljs-built_in">type</span>: <span class="hljs-built_in">log</span><br>    enabled: <span class="hljs-literal">true</span><br>    paths:<br>      - /var/log/audit/audit.log<br>    fields:<br>      log_topic: audit-log<br>filebeat.config.modules:<br>  path: <span class="hljs-variable">$&#123;path.config&#125;</span>/modules.d/*.yml<br>  reload.enabled: <span class="hljs-literal">false</span><br><br>output.kafka:<br>  enabled: <span class="hljs-literal">true</span><br>  hosts: [<span class="hljs-string">&quot;kafka1.bsnbase.com:9092&quot;</span>,<span class="hljs-string">&quot;kafka2.bsnbase.com:9092&quot;</span>,<span class="hljs-string">&quot;kafka3.bsnbase.com:9092&quot;</span>]<br>  topic: <span class="hljs-string">&#x27;%&#123;[fields.log_topic]&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="1-x2F-etc-x2F-audit-x2F-auditd-conf"><a href="#1-x2F-etc-x2F-audit-x2F-auditd-conf" class="headerlink" title="1.&#x2F;etc&#x2F;audit&#x2F;auditd.conf"></a>1.&#x2F;etc&#x2F;audit&#x2F;auditd.conf</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#变更</span><br>    log_format = RAW<br><span class="hljs-comment">#TO</span><br>    log_format = ENRICHED<br></code></pre></td></tr></table></figure><h2 id="2-配置filebeat采集"><a href="#2-配置filebeat采集" class="headerlink" title="2.配置filebeat采集"></a>2.配置filebeat采集</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/var/log/audit/audit.log<br></code></pre></td></tr></table></figure><h2 id="3-配置filebeat采集日志"><a href="#3-配置filebeat采集日志" class="headerlink" title="3.配置filebeat采集日志"></a>3.配置filebeat采集日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/var/log/secure<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernets 速查</title>
    <link href="/2023/09/07/kubernets%E9%80%9F%E6%9F%A5/"/>
    <url>/2023/09/07/kubernets%E9%80%9F%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、Pod-的基础概念"><a href="#一、Pod-的基础概念" class="headerlink" title="一、Pod 的基础概念"></a>一、Pod 的基础概念</h1><p>Pod 是 kubernetes 中最小的资源管理组件，Pod 也是最小化运行容器化应用的资源对象。一个 Pod 代表着集群中运行的一个进程。kubernetes 中其他大多数组件都是围绕着 Pod 来进行支撑和扩展 Pod 功能的，例如用于管理 Pod 运行的 StatefulSet 和 Deployment 等控制器对象，用于暴露 Pod 应用的 Service 和 Ingress 对象，为 Pod 提供存储的 PersistentVolume 存储资源对象等</p><p>1、一个 pod 中运行一个容器<br>每个 Pod 中一个容器的模式是最常见的用法，在这种使用方式中，你可以把 Pod想象成是单个容器的封装，kubernetes 管理的是 Pod 而不是直接管理容器</p><p>2、一个 pod 中同时运行多个容器<br>一个 Pod中也可以同时封装几个需要紧密耦合互相协作的容器，它们之间共享资源。这些在同一个 Pod 中的容器可以互相协作成为一个 service单位，比如一个容器共享文件，另一个 sidecar 容器来更新这些文件。Pod 将这些容器的存储资源作为一个实体来管理</p><p><strong>请不要把陌生人的些许善意，视为珍稀的瑰宝，却把身边亲近人的全部付出，当做天经地义的事情，对其视而不见 ——烽火戏诸侯《剑来》</strong></p><h2 id="镜像拉取策略"><a href="#镜像拉取策略" class="headerlink" title="镜像拉取策略"></a>镜像拉取策略</h2><blockquote><p>测试</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: pod1<br>spec:<br>  container:<br>    - name: nginx<br>      image: nginx: 1.14<br>      imagePullPolicy: Always   <span class="hljs-comment"># 镜像拉取策略</span><br></code></pre></td></tr></table></figure><p>上面的 imagePullPolicy 就是 镜像拉取策略<br> 有3个选项</p><ul><li>IfNotPresent: 默认值， 镜像在宿主机不存在才拉取</li><li>Alway: 每次创建Pod时都会拉取</li><li>Never： Pod 永不会主动拉取镜像</li></ul><h3 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h3><p>我们看1个例子<br>假如我们要构建运行1个POD1， 在k8s 集群中， 系统会把这个POD 分配到其中1个 k8s node上运行。</p><p>如果当前k8s 有如下面3个节点</p><p>其中node1 的规格是4 core 8G<br>node2 的规格是1 core 2G<br>node3 的规格是2 core 4G</p><p>而我们会觉得我们所建立的POD1正常运行至少需要2 core 4G, 如果被分配到POD2 运行则很有可能出问题</p><p>这时我们可以设置POD1 的最少资源需求 为 2 core 4G.<br>则k8s 就不会把这个POD 放到node2 去执行了。</p><p>至于把POD1 放到node3 可行吗？， 则要看node3有没有其他POD在运行， 空闲资源怎么样。</p><p>所以引申出另1个东西： 资源限制<br>当POD1 在node1运行时， 如果我们不想它占用过多的node资源， 则可以作出限制。</p><p><strong>资源限制在yaml的关键字是</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">spec.containers[x].resources.requests.cpu   <span class="hljs-comment"># 最低需求cpu数  1 代表 1 core, 1000m 代表 1 core,  500m 和 0.5 都代表 0.5 core</span><br>spec.containers[x].resources.requests.memory <span class="hljs-comment"># 最低需要内存 单位是Mi, 1 Mi = 1 MB  </span><br>spec.containers[x].resources.limits.cpu   <span class="hljs-comment"># 最高能用到的cpu 数</span><br>spec.containers[x].resources.limits.memory <span class="hljs-comment"># 能用到的最大内存限制</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/338b4763c5474b9ba73a4bc4059f583e.png" alt="在这里插入图片描述"></p><blockquote><p>测试</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: Pod1<br>spec:<br>  containers:<br>    - name: db<br>      image: mysql<br>      <span class="hljs-built_in">env</span>:<br>       - name: MYSQL_ROOT_PASSWORD<br>         value: <span class="hljs-string">&quot;password&quot;</span><br>       <br>      resources:  <span class="hljs-comment"># 资源需求</span><br>      requests:<br>        memory: <span class="hljs-string">&quot;120Mi&quot;</span>    <span class="hljs-comment"># 最低需要内存 单位是Mi, 1 Mi = 1 MB </span><br>        cpu: <span class="hljs-string">&quot;500m&quot;</span>        <span class="hljs-comment"># 最低需求cpu数  1 代表 1 core, 1000m 代表 1 core,  500m 和 0.5 都代表 0.5 core</span><br>      limits:  <span class="hljs-comment"># 资源限制</span><br>        memory: <span class="hljs-string">&quot;500Mi&quot;</span>    <span class="hljs-comment"># 能用到的最大内存限制</span><br>        cpu: <span class="hljs-string">&quot;1000m&quot;</span>       <span class="hljs-comment"># 最高能用到的cpu 数</span><br></code></pre></td></tr></table></figure><h2 id="POD-的重启机制"><a href="#POD-的重启机制" class="headerlink" title="POD 的重启机制"></a>POD 的重启机制</h2><p>当POD里面的容器非正常退出， POD会对容器作一些处理，这就是POD对容器的重启机制</p><blockquote><p>测试</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: Pod1<br>spec:<br>  containers:<br>    - name: busybox<br>      image: busybox:1.28.4<br>      args:<br>        - /bin/sh<br>        - -c<br>        - <span class="hljs-built_in">sleep</span> 36000<br>    restartPolicy: Never <span class="hljs-comment"># 重启机制</span><br></code></pre></td></tr></table></figure><p><strong>restartPolicy 的选项有3种：</strong></p><ul><li><p><strong>Always: 当容器终止退出时， 总是会重启容器， 这个是默认策略</strong></p></li><li><p><strong>OnFailture: 当容器异常退出 (退出码非0）时才会重启</strong></p></li><li><p><strong>Never： 容器退出时不会重启， 多用于执行批量任务（批处理）</strong></p></li></ul><h2 id="POD-的健康检查"><a href="#POD-的健康检查" class="headerlink" title="POD 的健康检查"></a>POD 的健康检查</h2><p>如果我们想查看 POD的运行状态， 可以用下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">gateman@k8smaster:~$ kubectl get pods<br>NAME                     READY   STATUS    RESTARTS   AGE<br>nginx-6799fc88d8-scjht   1/1     Running   0          7d<br></code></pre></td></tr></table></figure><p>但是这个Running status 并不能保证这个pod是健康的， 它并不能检查pod里面是否有oom or 程序已经崩溃的问题.<br> 通常靠谱的方法是调用POD里面程序的health checking 接口</p><blockquote><p>测试</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">gateman@k8smaster:~$ curl -I 127.0.0.1:31407 <br>HTTP/1.1 200 OK<br>Server: nginx/1.21.5<br>Date: Sun, 27 Nov 2022 11:59:18 GMT<br>Content-Type: text/html<br>Content-Length: 615<br>Last-Modified: Tue, 28 Dec 2021 15:28:38 GMT<br>Connection: keep-alive<br>ETag: <span class="hljs-string">&quot;61cb2d26-267&quot;</span><br>Accept-Ranges: bytes<br></code></pre></td></tr></table></figure><h4 id="livenessProbe-（存活检查）"><a href="#livenessProbe-（存活检查）" class="headerlink" title="livenessProbe （存活检查）"></a>livenessProbe （存活检查）</h4><p><strong>这个规则 如果health checking不通过， 则K8s 会kill掉 POD， 然后根据Pod 的restartPolily(上面的章节6) 的规则来操作</strong></p><h4 id="readnessProbe-（就绪检查）"><a href="#readnessProbe-（就绪检查）" class="headerlink" title="readnessProbe （就绪检查）"></a>readnessProbe （就绪检查）</h4><p><strong>这个规则下， 如果health checking 不通过， K8s 会直接将这个pod 从service endpoint 中移除。</strong></p><p>而上面两个Probe 支持一下三种检查方法：</p><ol><li>httpGet</li></ol><p>发送http 请求， 返回200 - 399 认为成功</p><ol start="2"><li>exec</li></ol><p>执行shell 命令，如果返回的退出码是0， 则认为成功</p><ol start="3"><li>tcpSocket</li></ol><p>发起TCP socket 连接， 如果连接建立， 则认为成功</p><blockquote><p>测试未通过</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: 1<br>kind: Pod<br>metadata:<br>  labels:<br>    <span class="hljs-built_in">test</span>: liveness<br>    name: test-pod-liveness<br>spec:<br>  containers:<br>    - name: liveness<br>      image: busybox<br>      args:<br>        - /bin/sh<br>        - c<br>        - <span class="hljs-built_in">mkdir</span> -p /tmp/healthy;<br>        - <span class="hljs-built_in">sleep</span> 30;<br>        - <span class="hljs-built_in">rm</span> -rf /tmp/healthy<br>      livenessProbe:<br>        <span class="hljs-built_in">exec</span>:<br>          <span class="hljs-built_in">command</span>:<br>            - <span class="hljs-built_in">ls</span> /tmp/healthy<br>          initialDelaySeconds: 5<br>          perodSeconds: 5<br></code></pre></td></tr></table></figure><p>上面的例子中， health checking的<a href="https://so.csdn.net/so/search?q=%E6%8E%A2%E9%92%88&spm=1001.2101.3001.7020">探针</a> 在POD创建后5秒后就不断尝试隔5秒去检查 &#x2F;tmp&#x2F;healthy 文件夹， 当这个文件夹被删除后， 则会认为检查失败</p><h2 id="节点选择器标签"><a href="#节点选择器标签" class="headerlink" title="节点选择器标签"></a>节点选择器标签</h2><p>在Pod 的yaml 定义文件中， 我们还可以用<a href="https://so.csdn.net/so/search?q=%E6%A0%87%E7%AD%BE%E9%80%89%E6%8B%A9%E5%99%A8&spm=1001.2101.3001.7020">标签选择器</a>去选择被部署的node</p><blockquote><p>测试</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: pod-env-test<br>spec:<br>  nodeSeletor:<br>    env_role: dev<br>  contianers:<br>    - name: ngnix<br>      images: ngnix: 1.15<br></code></pre></td></tr></table></figure><p>上面的nodeSelector 中的env_role 就是所谓的标签选择器， 看名字也知道这个选择器跟不同的运行环境有关</p><p><img src="https://img-blog.csdnimg.cn/d570fe205275412d882773a67b5fe2ee.png" alt="原理"></p><p>我们可以为每个node分别打上env_role 标签， 去定义这个node是输入 开发 or 测试 or 生产环境.</p><p>当我们的某个pod的yaml文件中制定了 标签， 则master 只会把这个pod 部署去对应的nodes， 这个优先级是最高的</p><p><strong>如何为某个node 打标签：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gateman@k8smaster:~$ kubectl label node k8snode0 env_role=dev<br>node/k8snode0 labeled<br></code></pre></td></tr></table></figure><p><strong>如何查看node的labels</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">gateman@k8smaster:~$ kubectl get nodes --show-labels<br>NAME         STATUS   ROLES                  AGE     VERSION    LABELS<br>admeuc-vm1   Ready    &lt;none&gt;                 7d22h   v1.22.15   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,env_role=uat,kubernetes.io/arch=amd64,kubernetes.io/hostname=admeuc-vm1,kubernetes.io/os=linux<br>amdeuc-vm2   Ready    &lt;none&gt;                 55m     v1.22.15   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,env_role=uat,kubernetes.io/arch=amd64,kubernetes.io/hostname=amdeuc-vm2,kubernetes.io/os=linux<br>amdeuc-vm3   Ready    &lt;none&gt;                 55m     v1.22.15   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,env_role=dev,kubernetes.io/arch=amd64,kubernetes.io/hostname=amdeuc-vm3,kubernetes.io/os=linux<br>k8smaster    Ready    control-plane,master   43d     v1.22.15   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8smaster,kubernetes.io/os=linux,node-role.kubernetes.io/control-plane=,node-role.kubernetes.io/master=,node.kubernetes.io/exclude-from-external-load-balancers=<br>k8snode0     Ready    &lt;none&gt;                 43d     v1.22.15   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,env_role=dev,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8snode0,kubernetes.io/os=linux<br></code></pre></td></tr></table></figure><h3 id="节点亲和性-nodeAffinity"><a href="#节点亲和性-nodeAffinity" class="headerlink" title="节点亲和性 nodeAffinity"></a>节点亲和性 nodeAffinity</h3><h4 id="硬亲和性，requireDuringSchedulingIgnoreDuringExecution"><a href="#硬亲和性，requireDuringSchedulingIgnoreDuringExecution" class="headerlink" title="硬亲和性，requireDuringSchedulingIgnoreDuringExecution"></a><strong>硬亲和性，requireDuringSchedulingIgnoreDuringExecution</strong></h4><p>Node必须要满足亲和性的条件才会被选择， 如果没有任何node满足， 则POD的部署会一直等待</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: node-affinity-test<br>spec:<br>  affinity:<br>   requireDuringSchedulingIgnoreDuringExecution:<br>     nodeSelectorTerms:<br>       - matchExpressions:<br>         - key: env_role<br>           operator: In<br>           values:<br>             - dev<br>             - <span class="hljs-built_in">test</span><br>containers:<br>  - name: ngnix:<br>    image: ngnix: 1.15<br></code></pre></td></tr></table></figure><h4 id="软亲和性，preferredDuringSchedulingIgnoreDuringExecution"><a href="#软亲和性，preferredDuringSchedulingIgnoreDuringExecution" class="headerlink" title="软亲和性，preferredDuringSchedulingIgnoreDuringExecution"></a><strong>软亲和性，preferredDuringSchedulingIgnoreDuringExecution</strong></h4><p>就是require和prefer的区别<br> Node调度会尝试满足亲和性的条件， 但不保证一定满足。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: node-affinity-test<br>spec:<br>  affinity:<br>   preferredDuringSchedulingIgnoreDuringExecution:<br>   - weight： 1 <span class="hljs-comment"># 权重</span><br>     preference:<br>       - matchExpressions:<br>         - key: env_role<br>           operator: In<br>           values:<br>             - dev<br>             - <span class="hljs-built_in">test</span><br>containers:<br>  - name: ngnix:<br>    image: ngnix: 1.15<br></code></pre></td></tr></table></figure><p>Opertor - 常用的操作符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">In<br>NotIn  <span class="hljs-comment"># 所谓的反亲和性</span><br>Exists<br>Gt<br>Lt<br>DoesNotExists <span class="hljs-comment"># 所谓的反亲和性</span><br></code></pre></td></tr></table></figure><h2 id="污点和污点容忍-Taint"><a href="#污点和污点容忍-Taint" class="headerlink" title="污点和污点容忍 Taint"></a>污点和污点容忍 Taint</h2><p>a. 专用节点<br> 例如某些node的有外网网络， 会部署一些专用应用</p><p>b. 配置特点硬件节点<br> 例如某写node具有ssd硬盘， 会部署大量IO的应用</p><p>c. 基于Taint驱逐<br> 用于排除某些node</p><p><strong>查看node 的 污点信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">gateman@k8smaster:~$ kubectl describe node | grep -i taint<br>Taints:             &lt;none&gt;<br>Taints:             &lt;none&gt;<br>Taints:             &lt;none&gt;<br>Taints:             node-role.kubernetes.io/master:NoSchedule<br>Taints:             &lt;none&gt;<br></code></pre></td></tr></table></figure><p>只有master node 有1个污点， 表示 master node 有NoSchedule的污点</p><p> ** NoSchedule 表示一定不会被调度<br> ** PreferNoSchedule 尽量不会被调度<br> ** NoExecute: 不会被调度， 并且还会驱逐Node的已有pods 这个 吊</p><h4 id="为Node打上污点"><a href="#为Node打上污点" class="headerlink" title="为Node打上污点"></a><strong>为Node打上污点</strong></h4><p>kubectl taint node [nodename] key&#x3D;value #污点的3个值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Kubectl taint node k8snode0 env_role=dev:NoSchedule<br></code></pre></td></tr></table></figure><p>这样就代表， 如果POd选择了dev env_role 标签， pod也不会调度到这个k8snode0上， 会选择另个存在 dev标签的节点</p><h4 id="为Node删除污点"><a href="#为Node删除污点" class="headerlink" title="为Node删除污点"></a><strong>为Node删除污点</strong></h4><p>kubectl taint node [nodename] key：[污点值] -</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl taint node k8snode0 env_rloe-<br></code></pre></td></tr></table></figure><p><strong>节点自污染，pod 应对节点故障</strong></p><table><thead><tr><th>key</th><th>注释</th></tr></thead><tbody><tr><td>node.kubernetes.io&#x2F;not-ready</td><td>节点尚未准备好。这对应于 NodeCondition Ready 为 false。</td></tr><tr><td>node.kubernetes.io&#x2F;unreachable</td><td>无法从节点控制器访问节点。这对应于 NodeCondition Ready 为 Unknown。</td></tr><tr><td>node.kubernetes.io&#x2F;out-of-disk</td><td>节点磁盘不足。</td></tr><tr><td>node.kubernetes.io&#x2F;memory-pressure</td><td>节点有内存压力。</td></tr><tr><td>node.kubernetes.io&#x2F;disk-pressure</td><td>节点有磁盘压力。</td></tr><tr><td>node.kubernetes.io&#x2F;network-unavailable</td><td>节点的网络不可用。</td></tr><tr><td>node.kubernetes.io&#x2F;unschedulable</td><td>节点不可调度。</td></tr><tr><td>node.cloudprovider.kubernetes.io&#x2F;uninitialized</td><td>当 kubelet 从 “外部” 云提供程序开始时，此污点在节点上设置为将其标记为不可用。来自 cloud-controller-manager 的控制器初始化此节点后，kubelet 删除此污点。</td></tr></tbody></table><h4 id="污点容忍"><a href="#污点容忍" class="headerlink" title="污点容忍"></a><strong>污点容忍</strong></h4><blockquote><p>测试</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">spec:<br> tolerations:<br>   - key: <span class="hljs-string">&quot;key&quot;</span><br>     operator: <span class="hljs-string">&quot;Equal&quot;</span><br>     value: <span class="hljs-string">&quot;value&quot;</span><br>     effect: <span class="hljs-string">&quot;NoSchedule&quot;</span><br></code></pre></td></tr></table></figure><h2 id="pod的创建过程"><a href="#pod的创建过程" class="headerlink" title="pod的创建过程"></a>pod的创建过程</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2308212/1604128919581-117903ea-eb30-41e5-bdee-7547aa1dadc6.png?x-oss-process=image/resize,w_790,limit_0" alt="未命名图片.png"></p><ol><li>用户通过kubectl或其他API客户端提交Pod Spec给API Server。</li><li>API Server尝试着将Pod对象的相关信息存入etcd中，待写入操作执行完成，API Server即会返回确认信息至客户端。</li><li>API Server开始反映etcd中的状态变化。</li><li>所有的Kubernetes组件均使用“watch”机制来跟踪检查API Server上的相关的变动。</li><li>kube-scheduler（调度器）通过其“watcher”觉察到API Server创建了新的Pod对象但尚未绑定至任何工作节点。</li><li>kube-scheduler为Pod对象挑选一个工作节点并将结果信息更新至API Server。</li><li>调度结果信息由API Server更新至etcd存储系统，而且API Server也开始反映此Pod对象的调度结果。</li><li>Pod被调度到的目标工作节点上的kubelet尝试在当前节点上调用Docker启动容器，并将容器的结果状态回送至API Server。</li><li>API Server将Pod状态信息存入etcd系统中。</li><li>在etcd确认写入操作成功完成后，API Server将确认信息</li></ol><h3 id="pod模板"><a href="#pod模板" class="headerlink" title="pod模板"></a>pod模板</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># yaml格式的pod定义文件完整内容：</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span>     <span class="hljs-comment">#必选，版本号，例如v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span>       <span class="hljs-comment">#必选，指定创建资源的角色/类型  </span><br><span class="hljs-attr">metadata:</span>        <span class="hljs-comment">#必选，资源的元数据/属性 </span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>       <span class="hljs-comment">#必选，资源的名字，在同一个namespace中必须唯一  </span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#必选，Pod所属的命名空间</span><br>  <span class="hljs-attr">labels:</span>      <span class="hljs-comment">#自定义标签,使这个标签在service网络中备案，以便被获知</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>   <span class="hljs-comment">#自定义标签名字</span><br>  <span class="hljs-attr">annotations:</span>       <span class="hljs-comment">#设置自定义注解列表  </span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>   <span class="hljs-comment">#设置自定义注解名字  </span><br><span class="hljs-attr">spec:</span>         <span class="hljs-comment">#必选，设置该资源的详细定义</span><br>  <span class="hljs-attr">containers:</span>    <span class="hljs-comment">#必选，Pod中容器列表</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#必选，容器名称</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#必选，容器的镜像名称</span><br>    <span class="hljs-attr">imagePullPolicy:</span> [<span class="hljs-string">Always</span> <span class="hljs-string">|</span> <span class="hljs-string">Never</span> <span class="hljs-string">|</span> <span class="hljs-string">IfNotPresent</span>] <span class="hljs-comment">#获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">string</span>]    <span class="hljs-comment">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span><br>    <span class="hljs-attr">args:</span> [<span class="hljs-string">string</span>]     <span class="hljs-comment">#容器的启动命令参数列表</span><br>    <span class="hljs-attr">workingDir:</span> <span class="hljs-string">string</span>   <span class="hljs-comment">#容器的工作目录</span><br>    <span class="hljs-attr">volumeMounts:</span>        <span class="hljs-comment">#挂载到容器内部的存储卷配置</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#存储卷在容器内mount的绝对路径，应少于512字符</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-string">boolean</span>    <span class="hljs-comment">#是否为只读模式</span><br>    <span class="hljs-attr">ports:</span>       <span class="hljs-comment">#需要暴露的端口库号列表</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#端口号名称</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-string">int</span>  <span class="hljs-comment">#容器需要监听的端口号</span><br>      <span class="hljs-attr">hostPort:</span> <span class="hljs-string">int</span>    <span class="hljs-comment">#容器所在主机需要监听的端口号，默认与Container相同</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#端口协议，支持TCP和UDP，默认TCP</span><br>    <span class="hljs-attr">env:</span>       <span class="hljs-comment">#容器运行前需设置的环境变量列表</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#环境变量名称</span><br>      <span class="hljs-attr">value:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#环境变量的值</span><br>    <span class="hljs-attr">resources:</span>       <span class="hljs-comment">#资源限制和请求的设置</span><br>      <span class="hljs-attr">limits:</span>      <span class="hljs-comment">#资源限制的设置</span><br>        <span class="hljs-attr">cpu:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span><br>        <span class="hljs-attr">memory:</span> <span class="hljs-string">string</span>   <span class="hljs-comment">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span><br>      <span class="hljs-attr">requests:</span>         <span class="hljs-comment">#资源请求的设置</span><br>        <span class="hljs-attr">cpu:</span> <span class="hljs-string">string</span>    <span class="hljs-comment">#Cpu请求，容器启动的初始可用数量</span><br>        <span class="hljs-attr">memory:</span> <span class="hljs-string">string</span>   <span class="hljs-comment">#内存清楚，容器启动的初始可用数量</span><br>    <span class="hljs-attr">livenessProbe:</span>     <span class="hljs-comment">#对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可</span><br>      <span class="hljs-attr">exec:</span>      <span class="hljs-comment">#对Pod容器内检查方式设置为exec方式</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">string</span>]  <span class="hljs-comment">#exec方式需要制定的命令或脚本</span><br>      <span class="hljs-attr">httpGet:</span>       <span class="hljs-comment">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-string">number</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">scheme:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">HttpHeaders:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">tcpSocket:</span>     <span class="hljs-comment">#对Pod内个容器健康检查方式设置为tcpSocket方式</span><br>         <span class="hljs-attr">port:</span> <span class="hljs-string">number</span><br>       <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">0</span>  <span class="hljs-comment">#容器启动完成后首次探测的时间，单位为秒</span><br>       <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">0</span>   <span class="hljs-comment">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span><br>       <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">0</span>    <span class="hljs-comment">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span><br>       <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">0</span><br>       <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">0</span><br>       <span class="hljs-attr">securityContext:</span><br>         <span class="hljs-string">privileged:false</span><br>    <span class="hljs-attr">restartPolicy:</span> [<span class="hljs-string">Always</span> <span class="hljs-string">|</span> <span class="hljs-string">Never</span> <span class="hljs-string">|</span> <span class="hljs-string">OnFailure</span>]<span class="hljs-comment">#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod</span><br>    <span class="hljs-attr">nodeSelector:</span> <span class="hljs-string">obeject</span>  <span class="hljs-comment">#设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定</span><br>    <span class="hljs-attr">imagePullSecrets:</span>    <span class="hljs-comment">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>    <span class="hljs-string">hostNetwork:false</span>      <span class="hljs-comment">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span><br>    <span class="hljs-attr">volumes:</span>       <span class="hljs-comment">#在该pod上定义共享存储卷列表</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#共享存储卷名称 （volumes类型有很多种）</span><br>      <span class="hljs-attr">emptyDir:</span> &#123;&#125;     <span class="hljs-comment">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span><br>      <span class="hljs-attr">hostPath:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">string</span>     <span class="hljs-comment">#Pod所在宿主机的目录，将被用于同期中mount的目录</span><br>      <span class="hljs-attr">secret:</span>      <span class="hljs-comment">#类型为secret的存储卷，挂载集群与定义的secre对象到容器内部</span><br>        <span class="hljs-attr">scretname:</span> <span class="hljs-string">string</span>  <br>        <span class="hljs-attr">items:</span>     <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">string</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">configMap:</span>     <span class="hljs-comment">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br>        <span class="hljs-attr">items:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">string</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br><br></code></pre></td></tr></table></figure><h3 id="service-yaml-模板"><a href="#service-yaml-模板" class="headerlink" title="service yaml 模板"></a>service yaml 模板</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1                    <span class="hljs-comment"># 资源service对应的api版本,可以用kubectl explain service来查看;</span><br>kind: Service                     <span class="hljs-comment"># 类型,这里指定的是service资源的类型,注意其类型的大小写;</span><br>metadata:                         <span class="hljs-comment"># 元数据,这个必须存在</span><br>  name: lili                        <span class="hljs-comment"># 给service这个资源取个名字,这个名称可以随便写</span><br>  namespace: sc                     <span class="hljs-comment"># 名字为nginx-curl的service资源放在哪个名称空间里面</span><br>  labels:                           <span class="hljs-comment"># 给名字为nginx-curl的service资源打个标签,这个标签的名字你随便写</span><br>    app: sc-lili                    <br>spec:                            <span class="hljs-comment"># 清单</span><br>  selector:                         <span class="hljs-comment"># 标签选择器,这里指定的是pod的标签,key和value都得一样哈</span><br>    app: my-nginx<br>  ports:                         <span class="hljs-comment"># 端口</span><br>  - port: 80                     <span class="hljs-comment"># 给clusterIP的端口 </span><br>    protocol: TCP                   <span class="hljs-comment"># 协议</span><br>    targetPort: 80                  <span class="hljs-comment"># 这个端口是你Pod的端口(pod里面是容器,容器里面业务真正的端口)</span><br>  <span class="hljs-built_in">type</span>: ClusterIP                <span class="hljs-comment"># 类型,默认就是ClusterIP  </span><br></code></pre></td></tr></table></figure><h3 id="pvc模板"><a href="#pvc模板" class="headerlink" title="pvc模板"></a>pvc模板</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">wang</span>                          <span class="hljs-comment">#---指定命名空间，不写默认default</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myservice</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">volume.beta.kubernetes.io/storage-class:</span> <span class="hljs-string">&quot;glusterfs-sc&quot;</span>   <span class="hljs-comment">#---需要与storageclass的名称一致</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">1Gi</span>       <span class="hljs-comment">#---设置请求大小为1G</span><br></code></pre></td></tr></table></figure><blockquote><p>RWO（ReadWriteOnce）： 单节点读写<br>RWX（ReadwriteMany）：  多节点多读写<br>ROX（ReadOnlyMany）：   单节点只读</p></blockquote><h3 id="Deployment-yaml-模板"><a href="#Deployment-yaml-模板" class="headerlink" title="Deployment.yaml 模板"></a>Deployment.yaml 模板</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span>  <span class="hljs-comment"># 指定api版本，此值必须在kubectl api-versions中 </span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span>  <span class="hljs-comment"># 指定创建资源的角色/类型 </span><br><span class="hljs-attr">metadata:</span>  <span class="hljs-comment"># 资源的元数据/属性 </span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">demo</span>  <span class="hljs-comment"># 资源的名字，在同一个namespace中必须唯一</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span> <span class="hljs-comment"># 部署在哪个namespace中</span><br>  <span class="hljs-attr">labels:</span>  <span class="hljs-comment"># 设定资源的标签</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">demo</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">stable</span><br><span class="hljs-attr">spec:</span> <span class="hljs-comment"># 资源规范字段</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 声明副本数目</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 保留历史版本</span><br>  <span class="hljs-attr">selector:</span> <span class="hljs-comment"># 选择器</span><br>    <span class="hljs-attr">matchLabels:</span> <span class="hljs-comment"># 匹配标签</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">demo</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">stable</span><br>  <span class="hljs-attr">strategy:</span> <span class="hljs-comment"># 策略</span><br>    <span class="hljs-attr">rollingUpdate:</span> <span class="hljs-comment"># 滚动更新</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">30</span><span class="hljs-string">%</span> <span class="hljs-comment"># 最大额外可以存在的副本数，可以为百分比，也可以为整数</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">30</span><span class="hljs-string">%</span> <span class="hljs-comment"># 示在更新过程中能够进入不可用状态的 Pod 的最大值，可以为百分比，也可以为整数</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span> <span class="hljs-comment"># 滚动更新策略</span><br>  <span class="hljs-attr">template:</span> <span class="hljs-comment"># 模版</span><br>    <span class="hljs-attr">metadata:</span> <span class="hljs-comment"># 资源的元数据/属性 </span><br>      <span class="hljs-attr">annotations:</span> <span class="hljs-comment"># 自定义注解列表</span><br>        <span class="hljs-attr">sidecar.istio.io/inject:</span> <span class="hljs-string">&quot;false&quot;</span> <span class="hljs-comment"># 自定义注解名字</span><br>      <span class="hljs-attr">labels:</span> <span class="hljs-comment"># 设定资源的标签</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">demo</span><br>        <span class="hljs-attr">version:</span> <span class="hljs-string">stable</span><br>    <span class="hljs-attr">spec:</span> <span class="hljs-comment"># 资源规范字段</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">demo</span> <span class="hljs-comment"># 容器的名字 </span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">demo:v1</span> <span class="hljs-comment"># 容器使用的镜像地址 </span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span> <span class="hljs-comment"># 每次Pod启动拉取镜像策略，三个选择 Always、Never、IfNotPresent</span><br>                                      <span class="hljs-comment"># Always，每次都检查；Never，每次都不检查（不管本地是否有）；IfNotPresent，如果本地有就不检查，如果没有就拉取（手动测试时，</span><br>                                      <span class="hljs-comment"># 已经打好镜像存在docker容器中时，使用存在不检查级别，</span><br>                                      <span class="hljs-comment"># 默认为每次都检查，然后会进行拉取新镜像，因镜像仓库不存在，导致部署失败）</span><br>        <span class="hljs-attr">resources:</span> <span class="hljs-comment"># 资源管理</span><br>          <span class="hljs-attr">limits:</span> <span class="hljs-comment"># 最大使用</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">300m</span> <span class="hljs-comment"># CPU，1核心 = 1000m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">500Mi</span> <span class="hljs-comment"># 内存，1G = 1000Mi</span><br>          <span class="hljs-attr">requests:</span>  <span class="hljs-comment"># 容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">100Mi</span><br>        <span class="hljs-attr">livenessProbe:</span> <span class="hljs-comment"># pod 内部健康检查的设置</span><br>          <span class="hljs-attr">httpGet:</span> <span class="hljs-comment"># 通过httpget检查健康，返回200-399之间，则认为容器正常</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/healthCheck</span> <span class="hljs-comment"># URI地址</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span> <span class="hljs-comment"># 端口</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span> <span class="hljs-comment"># 协议</span><br>            <span class="hljs-comment"># host: 127.0.0.1 # 主机地址</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span> <span class="hljs-comment"># 表明第一次检测在容器启动后多长时间后开始</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span> <span class="hljs-comment"># 检测的超时时间</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">30</span> <span class="hljs-comment"># 检查间隔时间</span><br>          <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 成功门槛</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">5</span> <span class="hljs-comment"># 失败门槛，连接失败5次，pod杀掉，重启一个新的pod</span><br>        <span class="hljs-attr">readinessProbe:</span> <span class="hljs-comment"># Pod 准备服务健康检查设置</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/healthCheck</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br>          <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">5</span><br>          <span class="hljs-comment">#也可以用这种方法 </span><br>          <span class="hljs-comment">#exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常 </span><br>          <span class="hljs-comment"># command: </span><br>          <span class="hljs-comment"># - cat </span><br>          <span class="hljs-comment"># - /tmp/health </span><br>          <span class="hljs-comment">#也可以用这种方法 </span><br>          <span class="hljs-comment">#tcpSocket: # 通过tcpSocket检查健康 </span><br>          <span class="hljs-comment"># port: number </span><br>        <span class="hljs-attr">ports:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span> <span class="hljs-comment"># 名称</span><br>            <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span> <span class="hljs-comment"># 容器开发对外的端口 </span><br>            <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span> <span class="hljs-comment"># 协议</span><br>      <span class="hljs-attr">imagePullSecrets:</span> <span class="hljs-comment"># 镜像仓库拉取密钥</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">harbor-certification</span><br>      <span class="hljs-attr">affinity:</span> <span class="hljs-comment"># 亲和性调试</span><br>        <span class="hljs-attr">nodeAffinity:</span> <span class="hljs-comment"># 节点亲和力</span><br>          <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span> <span class="hljs-comment"># pod 必须部署到满足条件的节点上</span><br>            <span class="hljs-attr">nodeSelectorTerms:</span> <span class="hljs-comment"># 节点满足任何一个条件就可以</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">matchExpressions:</span> <span class="hljs-comment"># 有多个选项，则只有同时满足这些逻辑选项的节点才能运行 pod</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">beta.kubernetes.io/arch</span><br>                <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>                <span class="hljs-attr">values:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">amd64</span><br></code></pre></td></tr></table></figure><h1 id="二、命名空间"><a href="#二、命名空间" class="headerlink" title="二、命名空间"></a>二、命名空间</h1><p>默认情况下，kubernetes集群中的所有的Pod都是可以相互访问的。但是在实际中，可能不想让两个Pod之间进行互相的访问，那此时就可以将两个Pod划分到不同的namespace下。kubernetes通过将集群内部的资源分配到不同的Namespace中，可以形成逻辑上的”组”，以方便不同的组的资源进行隔离使用和管理。</p><p>kubernetes在集群启动之后，会默认创建几个namespace</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master ~]<span class="hljs-comment"># kubectl  get namespace</span><br>NAME              STATUS   AGE<br>default           Active   45h     <span class="hljs-comment">#  所有未指定Namespace的对象都会被分配在default命名空间</span><br>kube-node-lease   Active   45h     <span class="hljs-comment">#  集群节点之间的心跳维护，v1.13开始引入</span><br>kube-public       Active   45h     <span class="hljs-comment">#  此命名空间下的资源可以被所有人访问（包括未认证用户）</span><br>kube-system       Active   45h     <span class="hljs-comment">#  所有由Kubernetes系统创建的资源都处于这个命名空间</span><br></code></pre></td></tr></table></figure><h2 id="namespace资源的具体操作"><a href="#namespace资源的具体操作" class="headerlink" title="namespace资源的具体操作"></a>namespace资源的具体操作</h2><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><p>查看所有的ns 命令：kubectl get ns</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master ~]<span class="hljs-comment"># kubectl get ns</span><br>NAME              STATUS   AGE<br>default           Active   45h<br>kube-node-lease   Active   45h<br>kube-public       Active   45h     <br>kube-system       Active   45h  <br></code></pre></td></tr></table></figure><p>查看指定的ns 命令：kubectl get ns ns名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master ~]<span class="hljs-comment"># kubectl get ns default</span><br>NAME      STATUS   AGE<br>default   Active   45h<br></code></pre></td></tr></table></figure><p>指定输出格式 命令：kubectl get ns ns名称 -o 格式参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># kubernetes支持的格式有很多，比较常见的是wide、json、yam</span><br><br>[root@master ~]<span class="hljs-comment"># kubectl get ns default -o yaml</span><br>apiVersion: v1<br>kind: Namespace<br>metadata:<br>  creationTimestamp: <span class="hljs-string">&quot;2021-05-08T04:44:16Z&quot;</span><br>  name: default<br>  resourceVersion: <span class="hljs-string">&quot;151&quot;</span><br>  selfLink: /api/v1/namespaces/default<br>  uid: 7405f73a-e486-43d4-9db6-145f1409f090<br>spec:<br>  finalizers:<br>  - kubernetes<br>status:<br>  phase: Active<br></code></pre></td></tr></table></figure><p>查看ns详情 命令：kubectl describe ns ns名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master ~]<span class="hljs-comment"># kubectl describe ns default</span><br>Name:         default<br>Labels:       &lt;none&gt;<br>Annotations:  &lt;none&gt;<br>Status:       Active  <span class="hljs-comment"># Active 命名空间正在使用中  Terminating 正在删除命名空间</span><br><br><span class="hljs-comment"># ResourceQuota 针对namespace做的资源限制</span><br><span class="hljs-comment"># LimitRange针对namespace中的每个组件做的资源限制</span><br>No resource quota.<br>No LimitRange resource.<br></code></pre></td></tr></table></figure><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建namespace</span><br>[root@master ~]<span class="hljs-comment"># kubectl create ns dev</span><br>namespace/dev created<br></code></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除namespace</span><br>[root@master ~]<span class="hljs-comment"># kubectl delete ns dev</span><br>namespace <span class="hljs-string">&quot;dev&quot;</span> deleted<br></code></pre></td></tr></table></figure><p>首先准备一个yaml文件：ns-dev.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">创建：kubectl create -f ns-dev.yaml<br><br>删除：kubectl delete -f ns-dev.yaml<br></code></pre></td></tr></table></figure><h4 id="查看资源版本信息apiVersion"><a href="#查看资源版本信息apiVersion" class="headerlink" title="查看资源版本信息apiVersion"></a>查看资源版本信息apiVersion</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl api-resources --namespaced=<span class="hljs-literal">true</span>  <span class="hljs-comment">##查看哪些资源在命令空间 </span><br>kubectl api-resources --namespaced=<span class="hljs-literal">false</span>  <span class="hljs-comment">##查看哪些资源不在命令空间</span><br></code></pre></td></tr></table></figure><h1 id="三、控制器"><a href="#三、控制器" class="headerlink" title="三、控制器"></a>三、控制器</h1><p>无状态服务Deployment意思就是无状态的。。。用于部署无状态的服务。</p><p>类似网页访问之类的请求就是无状态的，每次请求都包含了需要的所有信息，每次请求都和上次没有关系。<br>Deployment是最常用的控制器。一般用于管理维护企业内部的无状态的微服务，比如configserver、zuul、springboot。可以管理多个副本的Pod实现无缝迁移、自动扩容缩容、自动灾难恢复、一键回滚等功能。</p><h2 id="deployment的创建"><a href="#deployment的创建" class="headerlink" title="deployment的创建"></a>deployment的创建</h2><p>可以通过命令创建一个Deployment：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create deployment nginx --image=nginx:1.20.2<br></code></pre></td></tr></table></figure><p>可以将创建的副本生成yaml文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get deployment nginx -o yaml &gt; nginx.yaml<br></code></pre></td></tr></table></figure><p>然后可以修改yaml文件的参数，然后重新加载新的yaml文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl replace -f nginx.yaml<br></code></pre></td></tr></table></figure><p>也可以通过在线修改yaml文件，退出后直接生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl edit deploy nginx<br></code></pre></td></tr></table></figure><p>从yaml文件生成deployment：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">deployment.kubernetes.io/revision:</span> <span class="hljs-string">&quot;1&quot;</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-string">&quot;2022-12-21T07:54:00Z&quot;</span><br>  <span class="hljs-attr">generation:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">resourceVersion:</span> <span class="hljs-string">&quot;1135473&quot;</span><br>  <span class="hljs-attr">uid:</span> <span class="hljs-string">18d14c6f-724e-4984-a126-d3c9cbb54a89</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">progressDeadlineSeconds:</span> <span class="hljs-number">600</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.20.2</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">resources:</span> &#123;&#125;<br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br><span class="hljs-attr">status:</span><br>  <span class="hljs-attr">conditions:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">lastTransitionTime:</span> <span class="hljs-string">&quot;2022-12-21T07:54:00Z&quot;</span><br>    <span class="hljs-attr">lastUpdateTime:</span> <span class="hljs-string">&quot;2022-12-21T07:54:00Z&quot;</span><br>    <span class="hljs-attr">message:</span> <span class="hljs-string">Deployment</span> <span class="hljs-string">does</span> <span class="hljs-string">not</span> <span class="hljs-string">have</span> <span class="hljs-string">minimum</span> <span class="hljs-string">availability.</span><br>    <span class="hljs-attr">reason:</span> <span class="hljs-string">MinimumReplicasUnavailable</span><br>    <span class="hljs-attr">status:</span> <span class="hljs-string">&quot;False&quot;</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Available</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">lastTransitionTime:</span> <span class="hljs-string">&quot;2022-12-21T07:54:00Z&quot;</span><br>    <span class="hljs-attr">lastUpdateTime:</span> <span class="hljs-string">&quot;2022-12-21T07:54:00Z&quot;</span><br>    <span class="hljs-attr">message:</span> <span class="hljs-string">ReplicaSet</span> <span class="hljs-string">&quot;nginx-5777589579&quot;</span> <span class="hljs-string">is</span> <span class="hljs-string">progressing.</span><br>    <span class="hljs-attr">reason:</span> <span class="hljs-string">ReplicaSetUpdated</span><br>    <span class="hljs-attr">status:</span> <span class="hljs-string">&quot;True&quot;</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Progressing</span><br>  <span class="hljs-attr">observedGeneration:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">unavailableReplicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">updatedReplicas:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>deployment状态说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get deployments.apps -o wide </span><br>NAME      READY   UP-TO-DATE   AVAILABLE   AGE    CONTAINERS   IMAGES   SELECTOR<br>mynginx   1/1     1            1           4d5h   mynginx      nginx    k8s-app=mynginx<br></code></pre></td></tr></table></figure><blockquote><p>NAME：Deployment名称<br>READY：Pod的状态，已经达到Ready的个数<br>UP-TO-DATE：已经达到期望状态的副本数<br>AVAILABLE：已经可以使用的个数<br>AGE：程序运行的时间<br>CONTAINERS：容器的自定义名称<br>IMAGES：容器镜像名称<br>SELECTOR：管理的Pod标签</p></blockquote><h2 id="deployment的升级"><a href="#deployment的升级" class="headerlink" title="deployment的升级"></a>deployment的升级</h2><p>查看创建nginx的deploy中镜像的版本：可以看到是1.18.0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get deploy -o yaml | grep image</span><br>        - image: nginx:1.18.0<br>          imagePullPolicy: Always<br></code></pre></td></tr></table></figure><p>我们可以使用set命令更新镜像的版本：这里的set是设置的意思。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl set image deploy nginx nginx=nginx:1.20.2 --record</span><br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get deployments.apps nginx -o yaml | grep image</span><br>    kubernetes.io/change-cause: kubectl <span class="hljs-built_in">set</span> image deploy nginx nginx=1.18.1 --record=<span class="hljs-literal">true</span><br>      - image: nginx:1.20.2<br>        imagePullPolicy: Always<br></code></pre></td></tr></table></figure><p>可以使用下列命令查看升级过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl rollout status deployment nginx</span><br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl describe deployments.apps nginx</span><br></code></pre></td></tr></table></figure><p>升级过程大概为：创建deploy时，系统也会同时创建depoly的RS，更新deploy时，系统会增加一个新的RS，旧的RS会相应减少1，直到替换完成。</p><h2 id="deployment的回滚"><a href="#deployment的回滚" class="headerlink" title="deployment的回滚"></a>deployment的回滚</h2><p><strong>deployment的回滚可以回滚到上个版本，也可以回滚到指定指定版本，历史版本的数量由下面这个参数控制</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">revisionHistoryLimit<span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p><strong>查看历史版本：可以看到副本发生了几次变化</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl rollout history deployment nginx </span><br>deployment.apps/nginx <br>REVISION  CHANGE-CAUSE<br>8         kubectl <span class="hljs-built_in">set</span> image deploy nginx nginx=1.18.1 --record=<span class="hljs-literal">true</span><br>9         kubectl <span class="hljs-built_in">set</span> image deploy nginx nginx=nginx:1.20.2 --record=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>回滚到上一个版本：undo是撤销的意思（我的理解是撤销现在的版本回到之前的版本）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl rollout undo deployment nginx</span><br>deployment.apps/nginx rolled back<br></code></pre></td></tr></table></figure><p><strong>查看已经由1.20.2回到了1.18.0版本：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get deployments.apps nginx -o yaml | grep image</span><br>    kubernetes.io/change-cause: kubectl <span class="hljs-built_in">set</span> image deploy nginx nginx=1.18.1 --record=<span class="hljs-literal">true</span><br>      - image: nginx:1.18.0<br>        imagePullPolicy: Always<br></code></pre></td></tr></table></figure><p><strong>如果多次发布，回滚到指定版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl rollout history deployment nginx </span><br>deployment.apps/nginx <br>REVISION  CHANGE-CAUSE<br>9         kubectl <span class="hljs-built_in">set</span> image deploy nginx nginx=nginx:1.20.2 --record=<span class="hljs-literal">true</span><br>10        kubectl <span class="hljs-built_in">set</span> image deploy nginx nginx=1.18.1 --record=<span class="hljs-literal">true</span><br><br>您在 /var/spool/mail/root 中有新邮件<br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl rollout history deployment nginx --revision=9</span><br>deployment.apps/nginx with revision <span class="hljs-comment">#9</span><br>Pod Template:<br>  Labels:app=nginx<br>pod-template-hash=67d5b4548c<br>  Annotations:kubernetes.io/change-cause: kubectl <span class="hljs-built_in">set</span> image deploy nginx nginx=nginx:1.20.2 --record=<span class="hljs-literal">true</span><br>  Containers:<br>   nginx:<br>    Image:nginx:1.20.2<br>    Port:&lt;none&gt;<br>    Host Port:&lt;none&gt;<br>    Environment:&lt;none&gt;<br>    Mounts:&lt;none&gt;<br>  Volumes:&lt;none&gt;<br><br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl rollout undo deployment nginx --to-revision=9</span><br>deployment.apps/nginx rolled back<br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get deployments.apps nginx -o yaml | grep image</span><br>    kubernetes.io/change-cause: kubectl <span class="hljs-built_in">set</span> image deploy nginx nginx=nginx:1.20.2<br>      - image: nginx:1.20.2<br>        imagePullPolicy: Always<br></code></pre></td></tr></table></figure><p><strong>可以看到以上信息版本已经回滚到1.20.2版本；另外就算更新时候失败，新镜像拉取失败，旧的副本不会停止工作，会一直持续工作，直到升级成功。</strong></p><h2 id="deployment的扩容和缩容"><a href="#deployment的扩容和缩容" class="headerlink" title="deployment的扩容和缩容"></a>deployment的扩容和缩容</h2><p>使用命令扩容：将nginx副本由一个变成两个，注意扩容RS不会发生变化，因为Pod的本质没有发生改变。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get deployments.apps </span><br>NAME    READY   UP-TO-DATE   AVAILABLE   AGE<br>nginx   1/1     1            1           17h<br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl scale --replicas=2 deployment nginx </span><br>deployment.apps/nginx scaled<br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get deployments.apps </span><br>NAME    READY   UP-TO-DATE   AVAILABLE   AGE<br>nginx   2/2     2            2           17h<br></code></pre></td></tr></table></figure><h2 id="deployment的更新暂停及恢复"><a href="#deployment的更新暂停及恢复" class="headerlink" title="deployment的更新暂停及恢复"></a>deployment的更新暂停及恢复</h2><p>更新暂停：这条命令的作用是将更新暂停后，你使用<code>kubectl set</code>命令修改Pod的配置后不会立刻生效，即使多次修改也只是积累起来不会马上生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl rollout pause deployment nginx</span><br></code></pre></td></tr></table></figure><p>暂停恢复：解除之前的更新暂停功能，在暂停期间做过的修改将都会生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl rollout resume deployment nginx</span><br></code></pre></td></tr></table></figure><h2 id="Statefulset基本概念"><a href="#Statefulset基本概念" class="headerlink" title="Statefulset基本概念"></a>Statefulset基本概念</h2><p><strong>StatefulSet主要用于管理有状态的应用程序的工作负载的API对象。比如生产中的Elastic Search集群、MongoDB集群、Kafka集群、Reids集群、Zookeeper集群等。。。</strong></p><p><strong>与Deployment相似的是，StatefulSet也同样管理着基本相同容器规范的Pod。不同的是，StatefulSet为每个Pod维护了一个粘性标识。</strong></p><p><strong>这些Pod是根据相同的规范创建的，但是不可互换，每个Pod都有一个持久的标识符，在重新调度时也会保留，一般格式为StatefulSetName-Number。</strong></p><p><strong>比如定义一个Redis-Sentinel的StatefulSet，指定三个副本，就会依次创建名为Redis-Sentinel-0、Redis-Sentinel-1、Redis-Sentinel-2的三个副本。而StatefulSet的Pod的Service一般使用Headless Service（无头服务）进行通信。</strong></p><p><strong>Headless的格式为一般为：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">statefulSetName-&#123;0..N-1&#125;.serviceName.namespace.svc.cluster.local</span><br></code></pre></td></tr></table></figure><ul><li>statefulSetName：StatefulSet的名称</li><li>{0…N-1}：名称后面的序号</li><li>serviceName：Headless Service的名称</li><li>namespace：服务所在的命名空间</li><li>cluster.local：Cluster Daemon（集群域）</li></ul><h3 id="定义一个StatefulSet资源"><a href="#定义一个StatefulSet资源" class="headerlink" title="定义一个StatefulSet资源"></a>定义一个StatefulSet资源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: Service<br>metadata:<br>  name: nginx<br>  labels:<br>    app: nginx<br>spec: <br>  ports:<br>  - port: 80<br>    name: web<br>  clusterIP: None<br>  selector: <br>    app: nginx<br>---<br>apiVersion: apps/v1<br>kind: StatefulSet<br>metadata:<br>  name: web<br>spec:<br>  serviceName: <span class="hljs-string">&quot;nginx&quot;</span><br>  replicas: 2<br>  selector:<br>    matchLabels:<br>      app: nginx<br>  template:<br>    metadata:<br>      labels:<br>        app: nginx<br>    spec:<br>      containers:<br>      - name: nginx<br>        image: nginx:1.18.0<br>        ports:<br>        - containerPort: 80<br>          name: web<br></code></pre></td></tr></table></figure><p>使用kubectl创建一下：可以看到service和statefulset副本都创建了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl create -f nginx-sts.yaml </span><br>service/nginx created<br>statefulset.apps/web created<br></code></pre></td></tr></table></figure><p>查看Pod：可以看到副本的名称是按序号从0开始的 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get pod</span><br>NAME      READY   STATUS    RESTARTS       AGE<br>busybox   1/1     Running   17 (50m ago)   7d18h<br>web-0     1/1     Running   0              74s<br>web-1     1/1     Running   0              73s<br></code></pre></td></tr></table></figure><p>查看service：可以看到nginx的service是没有CLUSTER-IP的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get svc</span><br>NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE<br>kubernetes   ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP   7d21h<br>nginx        ClusterIP   None         &lt;none&gt;        80/TCP    2m43s<br></code></pre></td></tr></table></figure><p>扩容副本：可以看到与deployment不同的是，新生成的Pod名称序号是有规律的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl scale --replicas=3 sts web </span><br>statefulset.apps/web scaled<br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get pod</span><br>NAME      READY   STATUS              RESTARTS       AGE<br>busybox   1/1     Running             17 (55m ago)   7d18h<br>web-0     1/1     Running             0              6m30s<br>web-1     1/1     Running             0              6m29s<br>web-2     0/1     ContainerCreating   0              28s<br></code></pre></td></tr></table></figure><p>测试访问一下是否可以通信：可以看到网络是通的，IP直接解析到172.18.195.18上，也就是Pod的IP而不用通过一层service代理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl exec -ti busybox -- sh</span><br>/ <span class="hljs-comment"># nslookup web-0.nginx</span><br>Server:    10.96.0.10<br>Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local<br><br>Name:      web-0.nginx<br>Address 1: 172.18.195.18 web-0.nginx.default.svc.cluster.local<br>/ <span class="hljs-comment"># ping web-0.nginx</span><br>PING web-0.nginx (172.18.195.18): 56 data bytes<br>64 bytes from 172.18.195.18: <span class="hljs-built_in">seq</span>=0 ttl=62 time=1.020 ms<br>64 bytes from 172.18.195.18: <span class="hljs-built_in">seq</span>=1 ttl=62 time=0.860 ms<br><br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get pod -o wide </span><br>NAME      READY   STATUS    RESTARTS       AGE     IP               NODE           NOMINATED NODE   READINESS GATES<br>busybox   1/1     Running   18 (28s ago)   7d18h   172.27.14.193    k8s-node02     &lt;none&gt;           &lt;none&gt;<br>web-0     1/1     Running   0              11m     172.18.195.18    k8s-master03   &lt;none&gt;           &lt;none&gt;<br>web-1     1/1     Running   0              11m     172.25.92.78     k8s-master02   &lt;none&gt;           &lt;none&gt;<br>web-2     1/1     Running   0              5m9s    172.25.244.199   k8s-master01   &lt;none&gt;           &lt;none&gt;<br><br></code></pre></td></tr></table></figure><h2 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h2><h3 id="DaemonSet又是什么？"><a href="#DaemonSet又是什么？" class="headerlink" title="DaemonSet又是什么？"></a>DaemonSet又是什么？</h3><p>DaemonSet是<a href="https://so.csdn.net/so/search?q=%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B&spm=1001.2101.3001.7020">守护进程</a>集，简写为ds；是在所有的节点或者匹配的节点上都部署一个Pod。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get nodes</span><br>NAME           STATUS   ROLES    AGE   VERSION<br>k8s-master01   Ready    &lt;none&gt;   8d    v1.23.3<br>k8s-master02   Ready    &lt;none&gt;   8d    v1.23.3<br>k8s-master03   Ready    &lt;none&gt;   8d    v1.23.3<br>k8s-node01     Ready    &lt;none&gt;   8d    v1.23.3<br>k8s-node02     Ready    &lt;none&gt;   8d    v1.23.3<br></code></pre></td></tr></table></figure><p>比如从上段代码中可以看到我们集群有五个节点，Daemon会在这五个节点都部署一个Pod；又或者我们只需要在node节点部署，那么可以利用标签的方式只在node节点上部署Pod。比如我们的<a href="https://so.csdn.net/so/search?q=calico&spm=1001.2101.3001.7020">calico</a>网络插件就是用DaemonSet部署的。</p><h3 id="DaemonSet-的使用场景："><a href="#DaemonSet-的使用场景：" class="headerlink" title="DaemonSet 的使用场景："></a>DaemonSet 的使用场景：</h3><ul><li>监控数据收集：需要每个节点上收集数据</li><li>监控节点状态</li><li>负责每个节点的网络、存储等组件，如calico、ceph等</li></ul><h3 id="DaemonSet的使用："><a href="#DaemonSet的使用：" class="headerlink" title="DaemonSet的使用："></a>DaemonSet的使用：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">DaemonSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.18.0</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attr">resources:</span> &#123;&#125;<br>        <span class="hljs-attr">terminationMessagePath:</span> <span class="hljs-string">/dev/termination-log</span><br>        <span class="hljs-attr">terminationMessagePolicy:</span> <span class="hljs-string">File</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">ClusterFirst</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">default-scheduler</span><br>      <span class="hljs-attr">securityContext:</span> &#123;&#125;<br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>注意：没有副本数的参数</p><p>创建一个ds；然后查看可以看到每个节点上都生成了一个nginx副本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl create -f nginx-ds.yaml </span><br>daemonset.apps/nginx created<br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get pod -o wide </span><br>NAME          READY   STATUS    RESTARTS         AGE    IP               NODE           NOMINATED NODE   READINESS GATES<br>busybox       1/1     Running   21 (2m45s ago)   8d     172.27.14.193    k8s-node02     &lt;none&gt;           &lt;none&gt;<br>nginx-2c7xf   1/1     Running   0                2m2s   172.25.92.79     k8s-master02   &lt;none&gt;           &lt;none&gt;<br>nginx-kjdx8   1/1     Running   0                2m2s   172.25.244.200   k8s-master01   &lt;none&gt;           &lt;none&gt;<br>nginx-wwltz   1/1     Running   0                2m2s   172.27.14.199    k8s-node02     &lt;none&gt;           &lt;none&gt;<br>nginx-zl2lr   1/1     Running   0                2m2s   172.18.195.19    k8s-master03   &lt;none&gt;           &lt;none&gt;<br>nginx-znprg   1/1     Running   0                2m2s   172.17.125.7     k8s-node01     &lt;none&gt;           &lt;none&gt;<br></code></pre></td></tr></table></figure><p>需要注意的地方：</p><ul><li>restartPolicy字段默认是Always</li><li>Daemon Set没有副本数</li><li>最大失败数需要写数字，建议1</li><li>更新策略建议使用OnDelete，保留历史版本为1</li></ul><h2 id="Job控制器"><a href="#Job控制器" class="headerlink" title="Job控制器"></a>Job控制器</h2><h3 id="job控制器介绍"><a href="#job控制器介绍" class="headerlink" title="job控制器介绍"></a>job控制器介绍</h3><p>ob控制器用于Pod对象运行一次性任务，容器中的进程在正常运行结束后不会对其进行重启，而是将Pod对象置于”Completed”(完成)状态，若容器中的进程因错误而终止，则需要按照重启策略配置确定是否重启，未运行完成的Pod对象因其所在的节点故障而意外终止后会被调度。Job控制器的Pod对象的状态转换如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/35fd665d9fe24eaf32daa38455b19e3f.jpeg" alt="img"></p><h3 id="Job控制器运行模式"><a href="#Job控制器运行模式" class="headerlink" title="Job控制器运行模式"></a>Job控制器运行模式</h3><p>有的作业可能需要运行不止一次，用户可以配置它们以串行或者并行的方式运行。</p><p>•单工作队列(work queue)：串行式Job，N个作业需要串行运行N次，直至满足期望的次数。如下图所示，这次Job也可以理解为并行度为1的作业执行方式，在某个时刻仅存在一个Pod资源对象。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/614d9cb0cdf19fb330e77a98300532c8.jpeg" alt="img"></p><p>•多工作队列：并行式Job，这种方式可以设置工作队列数量，即为一次可以执行多个工作队列，每个队列负责一个运行作业，如下图所示，有五个作业，我们就启动五个工作队列去并行执行，当然五个作业，我们也可以只启动两个工作队列去串行执行，两个队列每次各执行一个作业，则一个队列需要执行三次，另一个执行两次。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b62a30942eeda33244f5336591bc4e0e.jpeg" alt="img"></p><h3 id="创建Job对象"><a href="#创建Job对象" class="headerlink" title="创建Job对象"></a>创建Job对象</h3><p>Job控制器的spec字段内嵌的必要字段只有template，不需要定义标签选择器，控制器会自动关联，除了这一点与Deployment控制器不同，其它别无二致。</p><p><strong>1.创建Job控制器配置清单</strong> 使用busybox镜像，然后沉睡120s，完成后即正常退出容器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span> <span class="hljs-string">busybox-job.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Job</span><br><span class="hljs-attr">metadata:</span><br> <span class="hljs-attr">name:</span> <span class="hljs-string">busybox-job</span><br><span class="hljs-attr">spec:</span><br> <span class="hljs-attr">template:</span><br> <span class="hljs-attr">spec:</span><br> <span class="hljs-attr">containers:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">busybox</span><br> <span class="hljs-attr">image:</span> <span class="hljs-string">busybox:latest</span><br> <span class="hljs-attr">command:</span> [ <span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;sleep 120s&quot;</span> ]<br> <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br></code></pre></td></tr></table></figure><blockquote><p>Pod模版中的spec.restartPolicy默认为”Always”，这对Job控制器来说非常不适用，”Never”和”OnFeailure”才比较合适Job控制器</p></blockquote><p><strong>2.创建Job控制器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f busybox-job.yaml<br></code></pre></td></tr></table></figure><p><strong>3.查看Job控制器及Pod状态</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get job -o wide<br>NAME          COMPLETIONS   DURATION   AGE   CONTAINERS   IMAGES           SELECTOR<br>busybox-job 0/1 36s 36s busybox      busybox:latest   controller-uid=8e85200f-43eb-4f24-ab6d-64c545287d51<br> <br>kubectl get pods -o wide | grep busybox<br>busybox-job-wtdvf 1/1 Running 0 45s 10.244.3.150 k8s-node01 &lt;none&gt; &lt;none&gt;<br></code></pre></td></tr></table></figure><p>120s后，Job控制器创建的Pod对象完成了任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get pods -o wide | grep busybox<br>busybox-job-wtdvf 0/1 Completed 0 3m38s 10.244.3.150 k8s-node01 &lt;none&gt; &lt;none&gt;<br></code></pre></td></tr></table></figure><p>查看Job控制器的详细信息  如下Selector与Lables都是Job控制器自动生成后自动关联，控制器自动生成的controller-uid-随机字符串，控制器携带了后面的字符串是为了防止所管理的Pod发生重合。下面可以看到Job运行成功后及完成了操作并没有进程重启，这得助于我们设置的restartPolicy。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a7df0cb5c98e1c41541361a31f4b0000.jpeg" alt="img"></p><h3 id="串行式Job"><a href="#串行式Job" class="headerlink" title="串行式Job"></a>串行式Job</h3><p>将并行度属性job.spec.parallelism的值设置为1，并设置总任务数job.spec.completions属性便能够让Job控制器以串行方式运行多任务，下面是一个需要串行5此任务的Job控制器示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> busybox-job.yaml<br>apiVersion: batch/v1<br>kind: Job<br>metadata:<br> name: busybox-job<br>spec:<br> parallelism: 1<br> completions: 5<br> template:<br> spec:<br> containers:<br> - name: busybox<br> image: busybox:latest<br> <span class="hljs-built_in">command</span>: [ <span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;sleep 20s&quot;</span> ]<br> restartPolicy: OnFailure<br></code></pre></td></tr></table></figure><p>创建Job控制器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f busybox-job.yaml<br></code></pre></td></tr></table></figure><p>动态监控Pod对象作业的变化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get pods -l job-name=busybox-job --watch<br> <br>NAME                READY   STATUS    RESTARTS   AGE<br>busybox-job-q8wqr 0/1 Pending 0 0s<br>busybox-job-q8wqr 0/1 Pending 0 0s<br>busybox-job-q8wqr 0/1 ContainerCreating 0 0s<br>busybox-job-q8wqr 1/1 Running 0 20s<br>busybox-job-q8wqr 0/1 Completed 0 39s<br>busybox-job-lppcw 0/1 Pending 0 0s<br>busybox-job-lppcw 0/1 Pending 0 0s<br>busybox-job-lppcw 0/1 ContainerCreating 0 0s<br>busybox-job-lppcw 1/1 Running 0 19s<br>busybox-job-lppcw 0/1 Completed 0 39s<br>busybox-job-8jw2q 0/1 Pending 0 0s<br>busybox-job-8jw2q 0/1 Pending 0 0s<br>busybox-job-8jw2q 0/1 ContainerCreating 0 0s<br>busybox-job-8jw2q 1/1 Running 0 19s<br>busybox-job-8jw2q 0/1 Completed 0 40s<br>busybox-job-bcxpn 0/1 Pending 0 0s<br>busybox-job-bcxpn 0/1 Pending 0 0s<br>busybox-job-bcxpn 0/1 ContainerCreating 0 0s<br>busybox-job-bcxpn 1/1 Running 0 18s<br>busybox-job-bcxpn 0/1 Completed 0 38s<br>busybox-job-5t7xm 0/1 Pending 0 0s<br>busybox-job-5t7xm 0/1 Pending 0 0s<br>busybox-job-5t7xm 0/1 ContainerCreating 0 0s<br>busybox-job-5t7xm 1/1 Running 0 20s<br>busybox-job-5t7xm 0/1 Completed 0 41s<br></code></pre></td></tr></table></figure><p>如上，Job控制器需要执行五次任务，每次一个Pod执行一个任务，依次执行，执行成功后的Pod即为完成状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get pods -l job-name=busybox-job<br>NAME                READY   STATUS      RESTARTS   AGE<br>busybox-job-5t7xm 0/1 Completed 0 4m22s<br>busybox-job-8jw2q 0/1 Completed 0 5m40s<br>busybox-job-bcxpn 0/1 Completed 0 5m<br>busybox-job-lppcw 0/1 Completed 0 6m19s<br>busybox-job-q8wqr 0/1 Completed 0 6m58s<br></code></pre></td></tr></table></figure><h3 id="并行式Job"><a href="#并行式Job" class="headerlink" title="并行式Job"></a>并行式Job</h3><p>并行式Job我们只需要修改job.spec.parallelism属性与job.spec.completions属性即可； job.spec.parallelism属性表示了每次启动多少队列执行作业(即为Pod数量)  job.spec.completions属性表示了作业的总数量</p><p>如下示例一个5个作业，同时启动5个队列进行作业。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span> <span class="hljs-string">busybox-job.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Job</span><br><span class="hljs-attr">metadata:</span><br> <span class="hljs-attr">name:</span> <span class="hljs-string">busybox-job</span><br><span class="hljs-attr">spec:</span><br> <span class="hljs-attr">parallelism:</span> <span class="hljs-number">5</span><br> <span class="hljs-attr">completions:</span> <span class="hljs-number">5</span><br> <span class="hljs-attr">template:</span><br> <span class="hljs-attr">spec:</span><br> <span class="hljs-attr">containers:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">busybox</span><br> <span class="hljs-attr">image:</span> <span class="hljs-string">busybox:latest</span><br> <span class="hljs-attr">command:</span> [ <span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;sleep 20s&quot;</span> ]<br> <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">OnFailure</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f busybox-job.yaml<br></code></pre></td></tr></table></figure><p>查看Job控制器运行状态，如下Job控制器中的Pod对象创建时间是一致的。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a3b9288184d904e18d34b54cacd93cfc.jpeg" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/10f2324b90f98d037bfb2a04392e3ed2.jpeg" alt="img"></p><h3 id="删除Job"><a href="#删除Job" class="headerlink" title="删除Job"></a>删除Job</h3><p>Job控制器中的Pod运行完成后，将不再占用系统资源，用户可以按照需求保留或使用资源删除命令将Pod删除，不过如果某控制器的容器应用总是无法正常结束运行，而其restartPolicy又设置为了重启，则它可能会一直处于不停地重启和错误的循环当中。所幸的是，Job控制器提供了两个属性用于抑制这种情况的发生，具体如下：</p><p>•backoffLimit：将作业标记为失败状态之前的重试次数，默认值为6•activeDeadlineSeconds：Job的deadline，用于为其指定最大活动时间长度，超出此时长的作业将被终止。</p><p>例如，下面的配置清单为，表示其失败重试次数为5此，并且如果超出100秒的时间仍然未运行完成，那么则将其终止：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> busybox-job.yaml<br>apiVersion: batch/v1<br>kind: Job<br>metadata:<br> name: busybox-job<br>spec:<br> backoffLimit: 5<br> activeDeadlineSeconds: 100<br> parallelism: 1<br> completions: 5<br> template:<br> spec:<br> containers:<br> - name: busybox<br> image: busybox:latest<br> <span class="hljs-built_in">command</span>: [ <span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;sleep 30s&quot;</span> ]<br> restartPolicy: OnFailure<br></code></pre></td></tr></table></figure><h2 id="CronJob控制器"><a href="#CronJob控制器" class="headerlink" title="CronJob控制器"></a>CronJob控制器</h2><p> <strong>CronJob控制器以 Job控制器资源为其管控对象，并借助它管理pod资源对象，Job控制器定义的作业任务在其控制器资源创建之后便会立即执行，但CronJob可以以类似于Linux操作系统的周期性任务作业计划的方式控制其运行时间点及重复运行的方式。也就是说，CronJob可以在特定的时间点(反复的)去运行job任务。</strong><br><img src="https://img-blog.csdnimg.cn/db2bf5d5dc684e22880793539372370d.png" alt="img"></p><h3 id="CronJob的资源清单文件"><a href="#CronJob的资源清单文件" class="headerlink" title="CronJob的资源清单文件"></a>CronJob的资源清单文件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">apiVersion<span class="hljs-punctuation">:</span> batch/v1<br>kind<span class="hljs-punctuation">:</span> CronJob<br>metadata<span class="hljs-punctuation">:</span><br>  name<span class="hljs-punctuation">:</span> pc-cronjob<br>  namespace<span class="hljs-punctuation">:</span> dev<br>  labels<span class="hljs-punctuation">:</span><br>    controller<span class="hljs-punctuation">:</span> cronjob<br>spec<span class="hljs-punctuation">:</span><br>  schedule<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*/1 * * * *&quot;</span><br>  jobTemplate<span class="hljs-punctuation">:</span><br>    metadata<span class="hljs-punctuation">:</span><br>    spec<span class="hljs-punctuation">:</span><br>      template<span class="hljs-punctuation">:</span><br>        spec<span class="hljs-punctuation">:</span><br>          restartPolicy<span class="hljs-punctuation">:</span> Never<br>          containers<span class="hljs-punctuation">:</span><br>          - name<span class="hljs-punctuation">:</span> counter<br>            image<span class="hljs-punctuation">:</span> busybox<span class="hljs-punctuation">:</span><span class="hljs-number">1.30</span><br>            command<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;bin/sh&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;-c&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 3;done&quot;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">需要重点解释的几个选项：<br>schedule: cron表达式，用于指定任务的执行时间<br>    */1    *      *    *     *<br>    &lt;分钟&gt; &lt;小时&gt; &lt;日&gt; &lt;月份&gt; &lt;星期&gt;<br> <br>    分钟 值从 0 到 59.<br>    小时 值从 0 到 23.<br>    日 值从 1 到 31.<br>    月 值从 1 到 12.<br>    星期 值从 0 到 6, 0 代表星期日<br>    多个时间可以用逗号隔开； 范围可以用连字符给出；*可以作为通配符； /表示每...<br>concurrencyPolicy:<br>    Allow:   允许Jobs并发运行(默认)<br>    Forbid:  禁止并发运行，如果上一次运行尚未完成，则跳过下一次运行<br>    Replace: 替换，取消当前正在运行的作业并用新作业替换它<br></code></pre></td></tr></table></figure><h3 id="CronJob-CJ-实例"><a href="#CronJob-CJ-实例" class="headerlink" title="CronJob(CJ)实例"></a>CronJob(CJ)实例</h3><p><strong>创建pc-cronjob.yaml，内容如下：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">apiVersion<span class="hljs-punctuation">:</span> batch/v1beta1<br>kind<span class="hljs-punctuation">:</span> CronJob<br>metadata<span class="hljs-punctuation">:</span><br>  name<span class="hljs-punctuation">:</span> pc-cronjob<br>  namespace<span class="hljs-punctuation">:</span> dev<br>  labels<span class="hljs-punctuation">:</span><br>    controller<span class="hljs-punctuation">:</span> cronjob<br>spec<span class="hljs-punctuation">:</span><br>  schedule<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*/1 * * * *&quot;</span><br>  jobTemplate<span class="hljs-punctuation">:</span><br>    metadata<span class="hljs-punctuation">:</span><br>    spec<span class="hljs-punctuation">:</span><br>      template<span class="hljs-punctuation">:</span><br>        spec<span class="hljs-punctuation">:</span><br>          restartPolicy<span class="hljs-punctuation">:</span> Never<br>          containers<span class="hljs-punctuation">:</span><br>          - name<span class="hljs-punctuation">:</span> counter<br>            image<span class="hljs-punctuation">:</span> busybox<span class="hljs-punctuation">:</span><span class="hljs-number">1.30</span><br>            command<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;bin/sh&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;-c&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 3;done&quot;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>上面任务设置的是1分钟执行一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建</span><br>[root@k8s-master ~]<span class="hljs-comment"># kubectl apply -f pc-cronjob.yaml</span><br>cronjob.batch/pc-cronjob created<br>[root@k8s-master ~]<span class="hljs-comment">#</span><br>[root@k8s-master ~]<span class="hljs-comment">#</span><br> <br><span class="hljs-comment"># 查看</span><br>[root@k8s-master ~]<span class="hljs-comment"># kubectl get cronjobs -n dev</span><br>NAME         SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE<br>pc-cronjob   */1 * * * *   False     1        13s             17s<br>[root@k8s-master ~]<span class="hljs-comment">#</span><br>[root@k8s-master ~]<span class="hljs-comment">#</span><br> <br><span class="hljs-comment"># 查看job</span><br>[root@k8s-master ~]<span class="hljs-comment"># kubectl get jobs -n dev -w</span><br>NAME                  COMPLETIONS   DURATION   AGE<br>pc-cronjob-27874617   1/1           30s        66s<br>pc-cronjob-27874618   0/1           6s         6s<br>pc-cronjob-27874618   0/1           29s        29s<br>pc-cronjob-27874618   0/1           30s        30s<br>pc-cronjob-27874618   1/1           30s        30s<br>pc-cronjob-27874619   0/1                      0s<br>pc-cronjob-27874619   0/1           0s         0s<br>pc-cronjob-27874619   0/1           2s         2s<br>pc-cronjob-27874619   0/1           29s        29s<br>pc-cronjob-27874619   0/1           30s        30s<br>pc-cronjob-27874619   1/1           30s        30s<br> <br><span class="hljs-comment"># 删除</span><br>[root@k8s-master ~]<span class="hljs-comment"># kubectl delete -f pc-cronjob.yaml</span><br>cronjob.batch <span class="hljs-string">&quot;pc-cronjob&quot;</span> deleted<br></code></pre></td></tr></table></figure><h2 id="ReplicationController-和-ReplicaSet"><a href="#ReplicationController-和-ReplicaSet" class="headerlink" title="ReplicationController 和 ReplicaSet"></a>ReplicationController 和 ReplicaSet</h2><ol><li>Replication Controller</li></ol><p><strong>ReplicationController定义了一个期望的场景，即声明某种Pod的副本数量在任意时刻都符合某个预期值，所以RC的定义包含以下几个部分：</strong></p><p><strong>Pod期待的副本数（replicas）</strong><br><strong>用于筛选目标Pod的Label Selector</strong><br><strong>当Pod的副本数量小于预期数量时，用于创建新Pod的Pod模板（template）</strong></p><blockquote><p>kind：表示要新建对象的类型<br>spec.selector：表示需要管理的Pod的label，这里表示包含app: nginx的label的Pod都会被该RC管理<br>spec.replicas：表示受此RC管理的Pod需要运行的副本数<br>spec.template：表示用于定义Pod的模板，比如Pod名称、拥有的label以及Pod中运行的应用等</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: ReplicationController<br>metadata:<br>  name: nginx-rc    <span class="hljs-comment">#设置rc的元数据</span><br>spec:               <span class="hljs-comment">#设置rc的具体规格</span><br>  replicas: 3       <span class="hljs-comment">#设置Pod的具体数量</span><br>  selector:         <span class="hljs-comment">#通过selector来匹配相应的Pod的label</span><br>    app: my-nginx<br>  template:         <span class="hljs-comment">#设置Pod的模板</span><br>    metadata:<br>      name: nginx<br>      labels:<br>        app: my-nginx<br>    spec:<br>      containers:<br>      - name: nginx<br>        image: nginx<br>        imagePullPolicy: Always <span class="hljs-comment">#镜像拉取策略，分为Always,Never,IfNotPresent,默认是Always</span><br>        ports:<br>        - containerPort: 80<br></code></pre></td></tr></table></figure><h3 id="rc基础操作"><a href="#rc基础操作" class="headerlink" title="rc基础操作"></a><strong>rc基础操作</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建rc</span><br>[root@master01 k8s]<span class="hljs-comment"># kubectl apply -f nginx_rc.yaml</span><br>replicationcontroller/nginx-rc created<br><span class="hljs-comment"># 查询rc</span><br>[root@master01 k8s]<span class="hljs-comment"># kubectl get rc nginx-rc</span><br>NAME       DESIRED   CURRENT   READY   AGE<br>nginx-rc   3         3         3       74s<br><span class="hljs-comment"># 查询pod运行情况</span><br>[root@master01 k8s]<span class="hljs-comment"># kubectl get pod -l app  # -l 指定selector的key</span><br>NAME             READY   STATUS    RESTARTS   AGE<br>nginx-rc-dsn65   1/1     Running   0          3m30s<br>nginx-rc-f5d48   1/1     Running   0          3m30s<br>nginx-rc-gvn97   1/1     Running   0          3m30s<br><span class="hljs-comment"># 删除rc</span><br>[root@master01 k8s]<span class="hljs-comment"># kubectl delete -f nginx_rc.yaml</span><br>replicationcontroller <span class="hljs-string">&quot;nginx-rc&quot;</span> deleted<br></code></pre></td></tr></table></figure><h3 id="rc特性"><a href="#rc特性" class="headerlink" title="rc特性"></a><strong>rc特性</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除指定pod</span><br>[root@master01 k8s]<span class="hljs-comment"># kubectl delete pod nginx-rc-dsn65</span><br>pod <span class="hljs-string">&quot;nginx-rc-dsn65&quot;</span> deleted<br><span class="hljs-comment"># 当删除其中一个Pod或者删除全部Pod的时候，RC会自动再次创建Pod，直到满足配置文件中定义的个数</span><br>[root@master01 k8s]<span class="hljs-comment"># kubectl get pod -l app</span><br>NAME             READY   STATUS              RESTARTS   AGE<br>nginx-rc-8r9mf   0/1     ContainerCreating   0          13s<br>nginx-rc-f5d48   1/1     Running             0          6m22s<br>nginx-rc-gvn97   1/1     Running             0          6m22s<br><br></code></pre></td></tr></table></figure><h3 id="Replica-Set"><a href="#Replica-Set" class="headerlink" title="Replica Set"></a>Replica Set</h3><p><strong>RS与RC唯一的区别是：RS支持基于集合的Label <a href="https://so.csdn.net/so/search?q=Selector&spm=1001.2101.3001.7020">Selector</a>（Set-based selector），而RC只支持基于等式的Label Selector（equality-based selector），这使得Replica Set的功能更强</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ReplicaSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-rs</span>    <span class="hljs-comment">#设置rs的元数据</span><br><span class="hljs-attr">spec:</span>               <span class="hljs-comment">#设置rs的具体规格</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span>       <span class="hljs-comment">#设置Pod的具体数量</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchExpressions:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">app</span><br>        <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>        <span class="hljs-attr">values:</span> [<span class="hljs-string">nginx-rs</span>]<br>  <span class="hljs-attr">template:</span>         <span class="hljs-comment">#设置Pod的模板</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx-rs</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span> <span class="hljs-comment">#镜像拉取策略，分为Always,Never,IfNotPresent,默认是Always</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h2 id="Ingress-控制器"><a href="#Ingress-控制器" class="headerlink" title="Ingress 控制器"></a>Ingress 控制器</h2><p>通俗来讲：Ingress和之前说的Service、Deployment一样，也是一个k8s的资源类型；Ingress用于实现域名的方式访问k8s的内部应用，Service可能更适于服务间访问。</p><p>Ingress支持多种方案：包括 Nginx、Haproxy、Traefik、istio等；在实际中Ingress上面可能还有一层公司的硬件层代理。</p><p>流程图</p><p><img src="https://img-blog.csdnimg.cn/baf5bc6fbedc486d977c948478068db5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Li26YeN5piO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="什么是Ingress"><a href="#什么是Ingress" class="headerlink" title="什么是Ingress"></a>什么是Ingress</h3><p><strong>ingress公开从集群外部到集群内服务的http和https路由，流量路由由ingress资源还是那个定义规则控制（授权入站连接到达集群服务的规则集合）。由于service的IP集群外不能访问，就使用ingress方式再代理一次，即ingress代理service，service代理pod。</strong></p><p><img src="https://s2.51cto.com/images/blog/202302/13083458_63e985b29599615109.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp" alt=" K8S-Ingress控制器_IP"></p><p><strong>可以给Ingress配置提供外部可访问的URL、负载均衡、SSL、基于名称的虚拟主机等。用户通过POST Ingress资源到API server的方式来请求ingress。 Ingress controller负责实现Ingress，通常使用负载平衡器，它还可以配置边界路由和其他前端，这有助于以HA方式处理流量。</strong></p><h3 id="Ingress定义资源清单字段"><a href="#Ingress定义资源清单字段" class="headerlink" title="Ingress定义资源清单字段"></a>Ingress定义资源清单字段</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">apiVersion： v1 版本<br>kind： Ingress 类型<br>metadata 元数据<br>spec 期望状态<br><br>backend： 默认后端，能够处理与任何规则不匹配的请求<br>rules：用于配置Ingress的主机规则列表<br>tls：目前Ingress仅支持单个TLS端口<span class="hljs-number">443</span><br><br>status 当前状态<br></code></pre></td></tr></table></figure><blockquote><p>默认已安装Service，如果没有安装service的话，可以重新安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master ingress]<span class="hljs-comment"># cat service-nodeport.yaml</span><br>kind: Service<br>metadata:<br>  labels:<br>    app.kubernetes.io/component: controller<br>    app.kubernetes.io/instance: ingress-nginx<br>    app.kubernetes.io/name: ingress-nginx<br>    app.kubernetes.io/part-of: ingress-nginx<br>    app.kubernetes.io/version: 1.5.1<br>  name: ingress-nginx-controller<br>  namespace: ingress-nginx<br>spec:<br>  ipFamilies:<br>  - IPv4<br>  ipFamilyPolicy: SingleStack<br>  ports:<br>  - appProtocol: http<br>    name: http<br>    port: 80<br>    protocol: TCP<br>    targetPort: http<br>  - appProtocol: https<br>    name: https<br>    port: 443<br>    protocol: TCP<br>    targetPort: https<br>  selector:<br>    app.kubernetes.io/component: controller<br>    app.kubernetes.io/instance: ingress-nginx<br>    app.kubernetes.io/name: ingress-nginx<br>  <span class="hljs-built_in">type</span>: NodePort<br><br>---<br><br>[root@k8s-master ingress]<span class="hljs-comment"># kubectl apply -f service-nodeport.yaml</span><br>service/ingress-nginx-controller created<br></code></pre></td></tr></table></figure><p>查看各服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master ingress]<span class="hljs-comment"># kubectl get pod,svc -ningress-nginx</span><br>NAME                                            READY   STATUS      RESTARTS   AGE<br>pod/ingress-nginx-admission-create-t96bk        0/1     Completed   0          10m<br>pod/ingress-nginx-admission-patch-kwzx5         0/1     Completed   1          10m<br>pod/ingress-nginx-controller-6668b8dd46-4c8rt   1/1     Running     0          10m<br><br>NAME                                         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE<br>service/ingress-nginx-controller             NodePort    10.102.162.187   &lt;none&gt;        80:31648/TCP,443:30422/TCP   10m<br>service/ingress-nginx-controller-admission   ClusterIP   10.105.57.63     &lt;none&gt;        443/TCP                      10m<br></code></pre></td></tr></table></figure><p>至此，ingress-nginx服务已经通过deployment的方式部署至kubernetes环境中</p><h3 id="创建Ingress，代理到后端nginx服务"><a href="#创建Ingress，代理到后端nginx服务" class="headerlink" title="创建Ingress，代理到后端nginx服务"></a>创建Ingress，代理到后端nginx服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">###创建pod和service的yaml文件</span><br>[root@k8s-master ingress]<span class="hljs-comment"># cat  nginx-deploy.yaml</span><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: nginx-deployment<br>  namespace: default<br>spec:<br>  replicas: 2<br>  selector:<br>    matchLabels:<br>      app: nginx-app<br>  template:<br>    metadata:<br>      labels:<br>        app: nginx-app<br>    spec:<br>      containers:<br>      - name: nginx<br>        imagePullPolicy: Always<br>        image: nginx<br>        ports:<br>        - containerPort: 80<br>---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: nginx-service<br>  namespace: default<br>spec:<br>  selector:<br>    app: nginx-app<br>  ports:<br>  - name: nginx-port<br>    port: 80<br>    targetPort: 80<br>    protocol: TCP<br>    <br>    <br><span class="hljs-comment">###应用该yaml文件</span><br>[root@k8s-master ingress]<span class="hljs-comment"># kubectl apply -f nginx-deploy.yaml</span><br>deployment.apps/nginx-deployment created<br>service/nginx-service created<br><br><span class="hljs-comment">###查询验证</span><br>[root@k8s-master ingress]<span class="hljs-comment"># kubectl get svc</span><br>NAME            TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE<br>kubernetes      ClusterIP   10.96.0.1      &lt;none&gt;        443/TCP   160d<br>nginx-service   ClusterIP   10.108.43.35   &lt;none&gt;        80/TCP    119s<br>[root@k8s-master ingress]<span class="hljs-comment"># kubectl get pod</span><br>NAME                                      READY   STATUS    RESTARTS   AGE<br>nfs-client-provisioner-65f969c774-ccjzg   1/1     Running   0          13d<br>nginx-deployment-6f7d8d4d55-nt4k7         1/1     Running   0          2m17s<br>nginx-deployment-6f7d8d4d55-qrfzd         1/1     Running   0          2m17s<br>[root@k8s-master ingress]<span class="hljs-comment"># kubectl describe svc nginx-service</span><br>Name:              nginx-service<br>Namespace:         default<br>Labels:            &lt;none&gt;<br>Annotations:       &lt;none&gt;<br>Selector:          app=nginx-app<br>Type:              ClusterIP<br>IP Family Policy:  SingleStack<br>IP Families:       IPv4<br>IP:                10.108.43.35<br>IPs:               10.108.43.35<br>Port:              nginx-port  80/TCP<br>TargetPort:        80/TCP<br>Endpoints:         10.244.3.224:80,10.244.3.225:80<br>Session Affinity:  None<br>Events:            &lt;none&gt;<br></code></pre></td></tr></table></figure><h3 id="创建Ingress绑定后端nginx服务"><a href="#创建Ingress绑定后端nginx服务" class="headerlink" title="创建Ingress绑定后端nginx服务"></a>创建Ingress绑定后端nginx服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master ingress]<span class="hljs-comment"># cat ingress-nginx.yaml</span><br>apiVersion: networking.k8s.io/v1<br>kind: Ingress<br>metadata:<br>  name: ingress-http<br>  annotations:<br>    nginx.ingress.kubernetes.io/rewrite-target: /<br>spec:<br>  rules:<br>  - host: <span class="hljs-string">&quot;nginx.mytest.org&quot;</span><br>    http:<br>      paths:<br>      - path: <span class="hljs-string">&quot;/&quot;</span><br>        pathType: Prefix<br>        backend:<br>          service:<br>            name: nginx-service<br>            port:<br>              number: 80<br>              <br><br><span class="hljs-comment">#####host和path加双引号</span><br><br>[root@k8s-master ingress]<span class="hljs-comment"># kubectl apply -f ingress-nginx.yaml</span><br>ingress.networking.k8s.io/ingress-http created<br><br><span class="hljs-comment">###查看相关的服务</span><br>[root@k8s-master ingress]<span class="hljs-comment"># kubectl describe ingress/ingress-http</span><br>Name:             ingress-http<br>Namespace:        default<br>Address:          172.16.7.210<br>Default backend:  default-http-backend:80 (&lt;error: endpoints <span class="hljs-string">&quot;default-http-backend&quot;</span> not found&gt;)<br>Rules:<br>  Host              Path  Backends<br>  ----              ----  --------<br>  nginx.mytest.org<br>                    /   nginx-service:80 (10.244.2.187:80,10.244.3.230:80)<br>Annotations:        nginx.ingress.kubernetes.io/rewrite-target: /<br>Events:<br>  Type    Reason  Age                  From                      Message<br>  ----    ------  ----                 ----                      -------<br>  Normal  Sync    4m31s (x3 over 10m)  nginx-ingress-controller  Scheduled <span class="hljs-keyword">for</span> <span class="hljs-built_in">sync</span><br></code></pre></td></tr></table></figure><p><strong>集群外验证，通过修改hosts</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">###修改下主机的hosts文件，添加如下解析</span><br>172.16.5.194  nginx.mytest.org<br><br><span class="hljs-comment">###通过查询ingress-nginx的svc，访问80的应用端口是30358</span><br>[root@k8s-master ingress]<span class="hljs-comment"># kubectl get pod,svc -ningress-nginx</span><br>NAME                                            READY   STATUS      RESTARTS   AGE<br>pod/ingress-nginx-admission-create-sgd8f        0/1     Completed   0          170m<br>pod/ingress-nginx-admission-patch-z9nck         0/1     Completed   3          170m<br>pod/ingress-nginx-controller-5696bb69ff-jzs7n   1/1     Running     0          170m<br><br>NAME                                         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE<br>service/ingress-nginx-controller             NodePort    10.100.26.234    &lt;none&gt;        80:30358/TCP,443:31117/TCP   170m<br>service/ingress-nginx-controller-admission   ClusterIP   10.100.183.252   &lt;none&gt;        443/TCP                      170m<br></code></pre></td></tr></table></figure><h3 id="额外：限流的配置"><a href="#额外：限流的配置" class="headerlink" title="额外：限流的配置"></a>额外：限流的配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: networking.k8s.io/v1<br>kind: Ingress<br>metadata:<br>  name: ingress-http<br>  namespace: default<br>  annotations:<br>  annotations:<br>    <span class="hljs-comment"># 加上此重写配置</span><br>    nginx.ingress.kubernetes.io/rewrite-target: /<span class="hljs-variable">$2</span><br>    <span class="hljs-comment"># 限流</span><br>    nginx.ingress.kubernetes.io/limit-rps: <span class="hljs-string">&quot;1&quot;</span><br>spec:<br>  ingressClassName: nginx<br>  rules:<br>  - host: <span class="hljs-string">&quot;nginx.mytest.org&quot;</span><br>    http:<br>      paths:<br>      - path: <span class="hljs-string">&quot;/&quot;</span><br>        pathType: Prefix<br>        backend:<br>          service:<br>            name: nginx-service<br>            port:<br>              number: 80<br>  - host: <span class="hljs-string">&quot;myapp.mytest.org&quot;</span><br>    http:<br>      paths:<br>      - path: <span class="hljs-string">&quot;/&quot;</span><br>        pathType: Prefix<br>        backend:<br>          service:<br>            name: myapp<br>            port:<br>              number: 80<br></code></pre></td></tr></table></figure><h1 id="四、Label-标签"><a href="#四、Label-标签" class="headerlink" title="四、Label 标签"></a>四、Label 标签</h1><ul><li>Label：对<a href="https://so.csdn.net/so/search?q=k8s&spm=1001.2101.3001.7020">k8s</a>中各种资源进行分类、分组，添加一个具有特别属性的标签</li><li>Selector：通过一个过滤的语法进行查找到对应标签的资源</li></ul><p>Label是k8s中一个比较重要的概念。一个Label的一个key&#x3D;value的键值对，可以附加到各种资源上。</p><p>现总结后讲解：</p><h2 id="Label的匹配规则："><a href="#Label的匹配规则：" class="headerlink" title="Label的匹配规则："></a>Label的匹配规则：</h2><ul><li>name&#x3D;nginx：这类是直接匹配</li><li>name！&#x3D;nginx：匹配标签中没有name&#x3D;nginx的资源</li><li>name in （A,B）：匹配所有具有name&#x3D;A和name&#x3D;B标签的资源</li><li>name not in （A）：匹配所有不具有标签A的资源</li></ul><p><img src="https://img-blog.csdnimg.cn/27c50b28fe304918b398580b2eb7562f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Li26YeN5piO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>通过上图可以看到：frontend通过service服务匹配到backend服务器，当service的标签是app&#x3D;nginx时那么会匹配到backend的两组服务器，但是当service中筛选加上Role&#x3D;backend-app时，Selector只会筛选到backend服务器组中包含这两种标签的服务器然后进行匹配。</p><p>通过下面这条命令可以看到Pod的标签：通过–show-labels参数<br>最后一列LABELS是Pod的标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get pod --show-labels </span><br>NAME                        READY   STATUS    RESTARTS       AGE   LABELS<br>busybox                     1/1     Running   28 (16h ago)   9d    &lt;none&gt;<br>hpa-nginx-bd88bdd8f-h8vx7   1/1     Running   0              18h   app=hpa-nginx,pod-template-hash=bd88bdd8f<br></code></pre></td></tr></table></figure><p>那么我们就可以尝试着用<a href="https://so.csdn.net/so/search?q=kubectl&spm=1001.2101.3001.7020">kubectl</a>给Pod添加标签：从上列代码中我们是可以看到busybox是没有标签，通过下面这条命令在查看发现已经有标签<code>app=busybox</code>了。</p><h3 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl label pod busybox app=busybox</span><br>pod/busybox labeled<br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get pod --show-labels </span><br>NAME                        READY   STATUS    RESTARTS       AGE   LABELS<br>busybox                     1/1     Running   28 (16h ago)   9d    app=busybox<br>hpa-nginx-bd88bdd8f-h8vx7   1/1     Running   0              18h   app=hpa-nginx,pod-template-hash=bd88bdd8f<br></code></pre></td></tr></table></figure><p>如果一个集群中Pod非常多的时候，我们就可以通过用标签筛选的方式找到想要的Pod；-A参数是查看所有的Pod，但是加上-l app&#x3D;<a href="https://so.csdn.net/so/search?q=busybox&spm=1001.2101.3001.7020">busybox</a>后只会找到符合这个条件的Pod。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get pod -A -l app=busybox</span><br>NAMESPACE   NAME      READY   STATUS    RESTARTS       AGE<br>default     busybox   1/1     Running   28 (16h ago)   9d<br></code></pre></td></tr></table></figure><p>那么问题来了，要是我们不想要这个标签了或者说需要修改这个标签了怎么办？</p><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl label pod busybox app-</span><br>pod/busybox unlabeled<br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get pod --show-labels </span><br>NAME                        READY   STATUS    RESTARTS       AGE   LABELS<br>busybox                     1/1     Running   28 (16h ago)   9d    &lt;none&gt;<br>hpa-nginx-bd88bdd8f-h8vx7   1/1     Running   0              18h   app=hpa-nginx,pod-template-hash=bd88bdd8f<br></code></pre></td></tr></table></figure><p>修改标签：可以看出标签已经是修改后的了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get pod --show-labels </span><br>NAME                        READY   STATUS    RESTARTS       AGE   LABELS<br>busybox                     1/1     Running   28 (16h ago)   9d    app=busybox<br>hpa-nginx-bd88bdd8f-h8vx7   1/1     Running   0              18h   app=hpa-nginx,pod-template-hash=bd88bdd8f<br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl label pod busybox app=busybox22222 --overwrite </span><br>pod/busybox labeled<br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get pod --show-labels </span><br>NAME                        READY   STATUS    RESTARTS       AGE   LABELS<br>busybox                     1/1     Running   28 (16h ago)   9d    app=busybox22222<br>hpa-nginx-bd88bdd8f-h8vx7   1/1     Running   0              18h   app=hpa-nginx,pod-template-hash=bd88bdd8f<br></code></pre></td></tr></table></figure><p>Labels是很简单的一个东西，接下来我们看看Selector是怎么用的</p><p>我想过滤出多个条件的pod又该怎么做呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get pod -A --show-labels </span><br>NAMESPACE              NAME                                         READY   STATUS    RESTARTS         AGE   LABELS<br>default                busybox                                      1/1     Running   29 (3m19s ago)   9d    app=busybox22222<br>default                hpa-nginx-bd88bdd8f-h8vx7                    1/1     Running   0                18h   app=hpa-nginx,pod-template-hash=bd88bdd8f<br>kube-system            calico-kube-controllers-5dffd5886b-4blh6     1/1     Running   2 (2d1h ago)     9d    k8s-app=calico-kube-controllers,pod-template-hash=5dffd5886b<br>kube-system            calico-node-fvbdq                            1/1     Running   2 (2d1h ago)     9d    controller-revision-hash=79878cdc56,k8s-app=calico-node,pod-template-generation=1<br>kube-system            calico-node-g8nqd                            1/1     Running   0                9d    controller-revision-hash=79878cdc56,k8s-app=calico-node,pod-template-generation=1<br>kube-system            calico-node-mdps8                            1/1     Running   0                9d    controller-revision-hash=79878cdc56,k8s-app=calico-node,pod-template-generation=1<br>kube-system            calico-node-nf4nt                            1/1     Running   1 (4d1h ago)     9d    controller-revision-hash=79878cdc56,k8s-app=calico-node,pod-template-generation=1<br>kube-system            calico-node-sq2ml                            1/1     Running   1 (2d1h ago)     9d    controller-revision-hash=79878cdc56,k8s-app=calico-node,pod-template-generation=1<br>kube-system            calico-typha-8445487f56-mg6p8                1/1     Running   0                9d    k8s-app=calico-typha,pod-template-hash=8445487f56<br>kube-system            calico-typha-8445487f56-pxbpj                1/1     Running   1 (2d1h ago)     9d    k8s-app=calico-typha,pod-template-hash=8445487f56<br>kube-system            calico-typha-8445487f56-tnssl                1/1     Running   0                9d    k8s-app=calico-typha,pod-template-hash=8445487f56<br>kube-system            coredns-5db5696c7-67h79                      1/1     Running   1 (2d1h ago)     9d    k8s-app=kube-dns,pod-template-hash=5db5696c7<br>kube-system            metrics-server-6bf7dcd649-5fhrw              1/1     Running   2 (4d1h ago)     9d    k8s-app=metrics-server,pod-template-hash=6bf7dcd649<br>kubernetes-dashboard   dashboard-metrics-scraper-7fcdff5f4c-9kk86   1/1     Running   1 (2d1h ago)     9d    k8s-app=dashboard-metrics-scraper,pod-template-hash=7fcdff5f4c<br>kubernetes-dashboard   kubernetes-dashboard-85f59f8ff7-js9j2        1/1     Running   12 (2d1h ago)    9d    k8s-app=kubernetes-dashboard,pod-template-hash=85f59f8ff7<br></code></pre></td></tr></table></figure><p>以上就是我们的所有Pod了，我想要找到标签中包含kubernetes-dashboard和kube-dns的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get pod -A -l &#x27;k8s-app in (kubernetes-dashboard,kube-dns)&#x27;</span><br>NAMESPACE              NAME                                    READY   STATUS    RESTARTS        AGE<br>kube-system            coredns-5db5696c7-67h79                 1/1     Running   1 (2d1h ago)    9d<br>kubernetes-dashboard   kubernetes-dashboard-85f59f8ff7-js9j2   1/1     Running   12 (2d1h ago)   9d<br></code></pre></td></tr></table></figure><p>找到了这两个Pod，说明这两个Pod中包含这两个标签，可以在上面的所有容器列表里看看这两个Pod是否含有这两个标签。</p><p>还有一种情况是比如我有一批Pod的标签是这样：</p><p><img src="https://img-blog.csdnimg.cn/b9718331c94c47aaa68ab46825b38747.png" alt="在这里插入图片描述"></p><p>我想查看其中不包含ABB&#x3D;X的所有Pod，可以这样写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get po -l ABB!=X,APP=A<br></code></pre></td></tr></table></figure><h1 id="五、服务发现与负载均衡机制-Service"><a href="#五、服务发现与负载均衡机制-Service" class="headerlink" title="五、服务发现与负载均衡机制-Service"></a>五、服务发现与负载均衡机制-Service</h1><p>Service是逻辑上的一组Pod，一种可以访问Pod的策略，而且其他Pod可以通过Service访问到这个Service代理的Pod，可以把它理解为传统架构中的反向代理。<br>相对于Pod而言，Service有一个固定的名称，不会发生改变，并且提供了负载均衡的功能。<br>通过Service的定义，可以对客户端应用屏蔽后端Pod实例数量及Pod IP地址的变化，通过负载均衡策略实现请求到后端Pod实例的转发，为客户端应用提供一个稳定的服务访问入口地址。<br>Service实现的是微服务架构中的几个核心功能：全自动的服务注册、服务发现、服务负载均衡等。</p><p><img src="https://img-blog.csdnimg.cn/cf8ea52d989247efb5797f7ccd90fb82.png" alt="img"></p><h2 id="创建一个Service实例"><a href="#创建一个Service实例" class="headerlink" title="创建一个Service实例"></a>创建一个Service实例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: Service<br>metadata:<br>  labels:<br>    app: nginx-svc<br>  name: nginx-svc<br>spec:<br>  ports:<br>  - name: http <span class="hljs-comment">#service端口名称</span><br>    port: 80 <span class="hljs-comment">#service自己的端口</span><br>    protocol: TCP <span class="hljs-comment">#支持TCP UDP SCTP等</span><br>    targetPort: 80 <span class="hljs-comment">#后端应用接口</span><br>  - name: https<br>    port: 443<br>    protocol: TCP<br>    targetPort: 443<br>  selector:<br>    app: nginx  <span class="hljs-comment">#这个就是匹配规则，代理标签中有nginx的后端服务器</span><br>  sessionAffinity: None<br>  <span class="hljs-built_in">type</span>: ClusterIP<br></code></pre></td></tr></table></figure><p>执行上面的yaml文件，创建一个service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl create -f nginx-svc.yaml </span><br>service/nginx-svc created<br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get svc</span><br>NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE<br>kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP          9d<br>nginx-svc    ClusterIP   10.110.150.87   &lt;none&gt;        80/TCP,443/TCP   15s<br></code></pre></td></tr></table></figure><p>我们通过访问svc地址就能访问到后端的nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># curl 10.110.150.87</span><br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;<span class="hljs-built_in">head</span>&gt;<br>&lt;title&gt;Welcome to nginx!&lt;/title&gt;<br>&lt;style&gt;<br>html &#123; color-scheme: light dark; &#125;<br>body &#123; width: 35em; margin: 0 auto;<br>font-family: Tahoma, Verdana, Arial, sans-serif; &#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;<br>&lt;p&gt;If you see this page, the nginx web server is successfully installed and<br>working. Further configuration is required.&lt;/p&gt;<br><br>&lt;p&gt;For online documentation and support please refer to<br>&lt;a href=<span class="hljs-string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;<br>Commercial support is available at<br>&lt;a href=<span class="hljs-string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;<br><br>&lt;p&gt;&lt;em&gt;Thank you <span class="hljs-keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><ul><li>在同一个namespace中，其他Pod访问svc只需要curl <a href="http://nginx-svc就可以/">http://nginx-svc就可以</a></li><li>跨namespace的话，需要在svc名称后加<code>.namespace名称</code>就可以了，使用需谨慎，没必要不推荐</li><li>不建议通过IP地址访问，因为IP不是固定的，删除或重建后IP会随机生成</li></ul><blockquote><p>注意，以上内容只能在集群内部访问</p></blockquote><p><strong>如果集群外部想访问svc的话，在下面内容</strong></p><p><strong>使用Service代理k8s外部应用的场景</strong></p><ul><li>希望在生产中使用某个固定的名称而非IP地址进行访问外部的中间件服务</li><li>希望Service指向另一个namespace中或其他集群中的服务</li><li>某项目正在迁移至k8s集群，但是一部分服务仍然在集群外部，此时可以使用service代理外部的服务</li></ul><h2 id="创建代理外部应用的Service实例"><a href="#创建代理外部应用的Service实例" class="headerlink" title="创建代理外部应用的Service实例"></a>创建代理外部应用的Service实例</h2><p>下面我们定义一个外部应用的service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: Service<br>metadata:<br>  labels:<br>    app: nginx-svc-w<br>  name: nginx-svc-w<br>spec:<br>  ports:<br>  - name: http <br>    port: 80 <br>    protocol: TCP <br>    targetPort: 80 <br><span class="hljs-comment">#  - name: https</span><br><span class="hljs-comment">#    port: 443</span><br><span class="hljs-comment">#    protocol: TCP</span><br><span class="hljs-comment">#    targetPort: 443</span><br><span class="hljs-comment">#  selector:</span><br><span class="hljs-comment">#    app: nginx </span><br>  sessionAffinity: None<br>  <span class="hljs-built_in">type</span>: ClusterIP<br></code></pre></td></tr></table></figure><p>区别就是少了这两个参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">selector:<br>  app: nginx <br></code></pre></td></tr></table></figure><p>创建成功后查看，可以发现虽然创建成功了但是没有ENDPOINTS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get svc</span><br>NAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE<br>kubernetes    ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP          9d<br>nginx-svc     ClusterIP   10.110.150.87   &lt;none&gt;        80/TCP,443/TCP   31m<br>nginx-svc-w   ClusterIP   10.110.144.61   &lt;none&gt;        80/TCP           58s<br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get ep</span><br>NAME         ENDPOINTS                                                          AGE<br>kubernetes   192.168.10.2:6443,192.168.10.3:6443,192.168.10.4:6443              9d<br>nginx-svc    172.17.125.10:443,172.18.195.22:443,172.17.125.10:80 + 1 more...   31m<br></code></pre></td></tr></table></figure><ul><li>接下来我们需要手动创建一个自定义的ENDPOINTS</li><li>借用存在的ep生成一个新的ep文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get ep nginx-svc -o yaml &gt; nginx-ep-w.yaml</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: Endpoints<br>metadata:<br>  labels:<br>    app: nginx-svc-w<br>  name: nginx-svc-w<br>  namespace: default<br>subsets:<br>- addresses:<br>  - ip: 110.242.68.3 <span class="hljs-comment"># 代理的外部服务的地址</span><br>  ports:<br>  - name: http<br>    port: 80<br>    protocol: TCP<br></code></pre></td></tr></table></figure><p>可以看到已经有外部的代理了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl create -f nginx-ep-w.yaml </span><br>endpoints/nginx-svc-w created<br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get ep</span><br>NAME          ENDPOINTS                                                          AGE<br>kubernetes    192.168.10.2:6443,192.168.10.3:6443,192.168.10.4:6443              9d<br>nginx-svc     172.17.125.10:443,172.18.195.22:443,172.17.125.10:80 + 1 more...   47m<br>nginx-svc-w   110.242.68.3:80                                                    11s<br></code></pre></td></tr></table></figure><p>接下来试试能不能访问成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 直接访问的话是通的，返回值200</span><br>[root@k8s-master01 ~]<span class="hljs-comment"># curl baidu.com -I</span><br>HTTP/1.1 200 OK<br>Date: Mon, 14 Feb 2022 01:43:18 GMT<br>Server: Apache<br>Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT<br>ETag: <span class="hljs-string">&quot;51-47cf7e6ee8400&quot;</span><br>Accept-Ranges: bytes<br>Content-Length: 81<br>Cache-Control: max-age=86400<br>Expires: Tue, 15 Feb 2022 01:43:18 GMT<br>Connection: Keep-Alive<br>Content-Type: text/html<br><span class="hljs-comment"># 通过访问service的IP可以看到也是通的，返回值200</span><br>[root@k8s-master01 ~]<span class="hljs-comment"># curl 10.110.144.61 -I</span><br>HTTP/1.1 200 OK<br>Date: Mon, 14 Feb 2022 01:44:20 GMT<br>Server: Apache<br>Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT<br>ETag: <span class="hljs-string">&quot;51-47cf7e6ee8400&quot;</span><br>Accept-Ranges: bytes<br>Content-Length: 81<br>Cache-Control: max-age=86400<br>Expires: Tue, 15 Feb 2022 01:44:20 GMT<br>Connection: Keep-Alive<br>Content-Type: text/html<br></code></pre></td></tr></table></figure><p>访问测试一下看是否连通：这个返回501是没问题的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ~]<span class="hljs-comment"># curl 10.110.144.61 -I</span><br>HTTP/1.1 501 Not Implemented<br>Server: Tengine<br>Date: Mon, 14 Feb 2022 01:39:16 GMT<br>Content-Type: text/html<br>Content-Length: 583<br>Connection: close<br></code></pre></td></tr></table></figure><h2 id="Service反代外部域名"><a href="#Service反代外部域名" class="headerlink" title="Service反代外部域名"></a>Service反代外部域名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: Service<br>metadata:<br>  labels:<br>    app: nginx-svc-wname<br>  name: nginx-svc-wname<br>spec:<br>  <span class="hljs-built_in">type</span>: ExternalName<br>  externalName: www.baidu.com<br></code></pre></td></tr></table></figure><p>然后创建就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f nginx-svc-wname.yaml<br></code></pre></td></tr></table></figure><p>ClusterIP：在集群内部使用，默认<br>ExternalName：通过返回定义的CNAME别名<br>NodePort：在所有安装了kube-proxy的节点上打开一个端口，此端口可以代理至后端Pod，然后集群外部可以使用节点的IP地址和NodePort端口号访问到集群Pod服务。端口取值范围默认30000-32767<br>LoadBalancer：使用云服务商提供的负载均衡器公开服务</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernets安装高可用，仲裁卷</title>
    <link href="/2023/09/07/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85kubesphere%20%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84-%E4%BB%B2%E8%A3%81%E5%8D%B7/"/>
    <url>/2023/09/07/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85kubesphere%20%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84-%E4%BB%B2%E8%A3%81%E5%8D%B7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><table><thead><tr><th>主机名称</th><th>内网IP</th><th>部署服务</th><th>磁盘</th></tr></thead><tbody><tr><td>master1</td><td>192.168.40.120</td><td>keepalived、haproxy、kubesphere、glusterfs</td><td>sda:30G sdb:100G</td></tr><tr><td>master2</td><td>192.168.40.121</td><td>keepalived、haproxy、kubesphere、glusterfs</td><td>sda:30G sdb:100G</td></tr><tr><td>master3</td><td>192.168.40.122</td><td>keepalived、haproxy、kubesphere、glusterfs</td><td>sda:30G sdb:100G</td></tr><tr><td>node1</td><td>192.168.40.123</td><td>glusterfs、kubesphere</td><td>sda:30G sdb:100G  sdc:100G</td></tr><tr><td>node2</td><td>192.168.40.124</td><td>glusterfs、kubesphere</td><td>sda:30G sdb:100G  sdc:100G</td></tr><tr><td>node3</td><td>192.168.40.125</td><td>glusterfs、kubesphere</td><td>sda:30G sdb:100G  sdc:100G</td></tr></tbody></table><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>docker-ce</td><td>20.10.8</td></tr><tr><td>keepalived</td><td>1.3.5-19</td></tr><tr><td>haproxy</td><td>1.5.18-9</td></tr><tr><td>kk</td><td>1.1.1</td></tr><tr><td>glusterfs</td><td>9.4-1</td></tr><tr><td>heketi</td><td>9.0.0.</td></tr><tr><td>kubesphere</td><td>v3.1.1</td></tr><tr><td>kubenets</td><td>v1.20.6</td></tr></tbody></table><h3 id="配置基础依赖"><a href="#配置基础依赖" class="headerlink" title="配置基础依赖"></a>配置基础依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#离线安装</span><br>yum install yum-plugin-downloadonly<br>yum install --downloadonly --downloaddir=./ socat conntrack ebtables ipset<br><br>[root@node1 ~]<span class="hljs-comment"># ll socat/</span><br>总用量 828<br>-rw-r--r-- 1 root root 191000 4月   4 2020 conntrack-tools-1.4.4-7.el7.x86_64.rpm<br>-rw-r--r-- 1 root root 125448 4月  25 2018 ebtables-2.0.10-16.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  39568 8月  23 2019 ipset-7.1-1.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  65112 8月  23 2019 ipset-libs-7.1-1.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  56824 5月  26 2017 libnetfilter_conntrack-1.0.6-1.el7_3.x86_64.rpm<br>-rw-r--r-- 1 root root  18400 4月   4 2020 libnetfilter_cthelper-1.0.0-11.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  18212 4月   4 2020 libnetfilter_cttimeout-1.0.0-7.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  23584 8月  11 2017 libnetfilter_queue-1.0.2-2.el7_2.x86_64.rpm<br>-rw-r--r-- 1 root root 296632 8月  11 2017 socat-1.7.3.2-2.el7.x86_64.rpm<br><br>yum install ./*.rpm -y<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在线安装</span><br>yum -y install socat conntrack ebtables ipset<br></code></pre></td></tr></table></figure><h3 id="配置-x2F-etc-x2F-hosts"><a href="#配置-x2F-etc-x2F-hosts" class="headerlink" title="配置&#x2F;etc&#x2F;hosts"></a>配置&#x2F;etc&#x2F;hosts</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># cat /etc/hosts</span><br>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4<br>::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<br><br>192.168.40.120  master1<br>192.168.40.121  master2<br>192.168.40.122  master3<br>192.168.40.123  node1<br>192.168.40.124  node2<br>192.168.40.125  node3<br>10.0.51.33      harbor.ops.bsnbase.com<br></code></pre></td></tr></table></figure><h1 id="离线安装docker"><a href="#离线安装docker" class="headerlink" title="离线安装docker"></a>离线安装docker</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs bash">下载docker 安装包<br><br>https://mirrors.aliyun.com/docker-ce/linux/static/stable/x86_64/docker-20.10.8.tgz<br><br>tar zxf docker-20.10.8.tgz<br><span class="hljs-built_in">cp</span> docker/* /usr/bin/<br><br>创建启动脚本<br><br><span class="hljs-built_in">cat</span> /usr/lib/systemd/system/docker.service<br>[Unit]<br>Description=Docker Application Container Engine<br>Documentation=https://docs.docker.com<br>After=network-online.target firewalld.service containerd.service<br>Wants=network-online.target<br><span class="hljs-comment">#Requires=docker.socket containerd.service</span><br><br>[Service]<br>Type=notify<br><span class="hljs-comment"># the default is not to use systemd for cgroups because the delegate issues still</span><br><span class="hljs-comment"># exists and systemd currently does not support the cgroup feature set required</span><br><span class="hljs-comment"># for containers run by docker</span><br><span class="hljs-comment">#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br>ExecStart=/usr/bin/dockerd<br>ExecReload=/bin/kill -s HUP <span class="hljs-variable">$MAINPID</span><br>TimeoutSec=0<br>RestartSec=2<br>Restart=always<br><br><span class="hljs-comment"># Note that StartLimit* options were moved from &quot;Service&quot; to &quot;Unit&quot; in systemd 229.</span><br><span class="hljs-comment"># Both the old, and new location are accepted by systemd 229 and up, so using the old location</span><br><span class="hljs-comment"># to make them work for either version of systemd.</span><br>StartLimitBurst=3<br><br><span class="hljs-comment"># Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.</span><br><span class="hljs-comment"># Both the old, and new name are accepted by systemd 230 and up, so using the old name to make</span><br><span class="hljs-comment"># this option work for either version of systemd.</span><br>StartLimitInterval=60s<br><br><span class="hljs-comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span><br><span class="hljs-comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span><br>LimitNOFILE=infinity<br>LimitNPROC=infinity<br>LimitCORE=infinity<br><br><span class="hljs-comment"># Comment TasksMax if your systemd version does not support it.</span><br><span class="hljs-comment"># Only systemd 226 and above support this option.</span><br>TasksMax=infinity<br><br><span class="hljs-comment"># set delegate yes so that systemd does not reset the cgroups of docker containers</span><br>Delegate=<span class="hljs-built_in">yes</span><br><br><span class="hljs-comment"># kill only the docker process, not all processes in the cgroup</span><br>KillMode=process<br>OOMScoreAdjust=-500<br><br>[Install]<br>WantedBy=multi-user.target<br><br><span class="hljs-comment"># 创建 daemon.json</span><br><span class="hljs-built_in">mkdir</span> /etc/docker<br><span class="hljs-built_in">cat</span> /etc/docker/daemon.json<br>&#123; <br><span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://obou6wyb.mirror.aliyuncs.com&quot;</span>],<br><span class="hljs-string">&quot;log-driver&quot;</span>:<span class="hljs-string">&quot;json-file&quot;</span>,<br><span class="hljs-string">&quot;log-opts&quot;</span>:&#123;<span class="hljs-string">&quot;max-size&quot;</span> :<span class="hljs-string">&quot;100m&quot;</span>,<span class="hljs-string">&quot;max-file&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>&#125;,<br><span class="hljs-string">&quot;insecure-registries&quot;</span>:[<span class="hljs-string">&quot;harbor.ops.bsnbase.com&quot;</span>]<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>需要注意得是配置私有仓库地址 需要在&#x2F;etc&#x2F;hosts 解析相对应的地址</p></blockquote><h1 id="离线安装haproxy"><a href="#离线安装haproxy" class="headerlink" title="离线安装haproxy"></a>离线安装haproxy</h1><h3 id="获取离线部署包"><a href="#获取离线部署包" class="headerlink" title="获取离线部署包"></a>获取离线部署包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#离线安装</span><br>找一台新装的主机<br>yum install yum-plugin-downloadonly<br>yum install --downloadonly --downloaddir=./ haproxy<br><br>离线包文件<br>[root@localhost ~]<span class="hljs-comment"># ll haproxy/</span><br>总用量 2560<br>-rw-r--r-- 1 root root  854548 6月  11 2021 haproxy-1.5.18-9.el7_9.1.x86_64.rpm<br>-rw-r--r-- 1 root root  505408 10月 15 22:00 openssl-1.0.2k-22.el7_9.x86_64.rpm<br>-rw-r--r-- 1 root root 1255752 10月 15 22:00 openssl-libs-1.0.2k-22.el7_9.x86_64.rpm<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在线安装 </span><br>yum -y install haproxy<br></code></pre></td></tr></table></figure><h3 id="配置haproxy-cgf"><a href="#配置haproxy-cgf" class="headerlink" title="配置haproxy.cgf"></a>配置haproxy.cgf</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># cat /etc/haproxy/haproxy.cfg</span><br>global<br>    <span class="hljs-built_in">log</span> /dev/log  local0 warning<br>    <span class="hljs-built_in">chroot</span>      /var/lib/haproxy<br>    pidfile     /var/run/haproxy.pid<br>    maxconn     4000<br>    user        haproxy<br>    group       haproxy<br>    daemon<br>   <br>   stats socket /var/lib/haproxy/stats<br>   <br>defaults<br>  <span class="hljs-built_in">log</span> global<br>  option  httplog<br>  option  dontlognull<br>        <span class="hljs-built_in">timeout</span> connect 5000<br>        <span class="hljs-built_in">timeout</span> client 50000<br>        <span class="hljs-built_in">timeout</span> server 50000<br>   <br>frontend kube-apiserver<br>  <span class="hljs-built_in">bind</span> *:16443<br>  mode tcp<br>  option tcplog<br>  default_backend kube-apiserver<br>   <br>backend kube-apiserver<br>    mode tcp<br>    option tcplog<br>    option tcp-check<br>    balance roundrobin<br>    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100<br>    server kube-apiserver-1 192.168.40.120:6443 check <span class="hljs-comment"># Replace the IP address with your own.</span><br>    server kube-apiserver-2 192.168.40.121:6443 check <span class="hljs-comment"># Replace the IP address with your own.</span><br>    server kube-apiserver-3 192.168.40.122:6443 check <span class="hljs-comment"># Replace the IP address with your own.</span><br></code></pre></td></tr></table></figure><h3 id="启动haproxy"><a href="#启动haproxy" class="headerlink" title="启动haproxy"></a>启动haproxy</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start haproxy<br>systemctl <span class="hljs-built_in">enable</span> haproxy<br><span class="hljs-comment">#检查端口 6443</span><br></code></pre></td></tr></table></figure><h1 id="离线安装keepalived"><a href="#离线安装keepalived" class="headerlink" title="离线安装keepalived"></a>离线安装keepalived</h1><h3 id="获取离线部署包-1"><a href="#获取离线部署包-1" class="headerlink" title="获取离线部署包"></a>获取离线部署包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#离线安装</span><br>找一台新装的主机<br>yum install yum-plugin-downloadonly<br>yum install --downloadonly --downloaddir=./ keepalived<br><br>离线包文件<br>[root@localhost keepalived]<span class="hljs-comment"># ll</span><br>总用量 13648<br>-rw-r--r-- 1 root root   39568 8月  23 2019 ipset-7.1-1.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   65112 8月  23 2019 ipset-libs-7.1-1.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  339840 10月 15 2020 keepalived-1.3.5-19.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   42784 8月  23 2019 lm_sensors-libs-3.4.0-8.20160601gitf9185e5.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  723628 1月  25 2021 net-snmp-agent-libs-5.7.2-49.el7_9.1.x86_64.rpm<br>-rw-r--r-- 1 root root  769332 1月  25 2021 net-snmp-libs-5.7.2-49.el7_9.1.x86_64.rpm<br>-rw-r--r-- 1 root root 8360316 2月   4 2021 perl-5.16.3-299.el7_9.x86_64.rpm<br>-rw-r--r-- 1 root root   19672 7月   4 2014 perl-Carp-1.26-244.el7.noarch.rpm<br>-rw-r--r-- 1 root root   19244 7月   4 2014 perl-constant-1.27-2.el7.noarch.rpm<br>-rw-r--r-- 1 root root 1545440 7月   4 2014 perl-Encode-2.51-7.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   29092 7月   4 2014 perl-Exporter-5.68-3.el7.noarch.rpm<br>-rw-r--r-- 1 root root   27088 7月   4 2014 perl-File-Path-2.09-2.el7.noarch.rpm<br>-rw-r--r-- 1 root root   57680 7月   4 2014 perl-File-Temp-0.23.01-3.el7.noarch.rpm<br>-rw-r--r-- 1 root root   78236 7月   4 2014 perl-Filter-1.49-3.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   57176 4月  25 2018 perl-Getopt-Long-2.40-3.el7.noarch.rpm<br>-rw-r--r-- 1 root root   39292 7月   4 2014 perl-HTTP-Tiny-0.033-3.el7.noarch.rpm<br>-rw-r--r-- 1 root root  706128 2月   4 2021 perl-libs-5.16.3-299.el7_9.x86_64.rpm<br>-rw-r--r-- 1 root root   45324 2月   4 2021 perl-macros-5.16.3-299.el7_9.x86_64.rpm<br>-rw-r--r-- 1 root root   12592 7月   4 2014 perl-parent-0.225-244.el7.noarch.rpm<br>-rw-r--r-- 1 root root   84468 7月   4 2014 perl-PathTools-3.40-5.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   53064 2月   4 2021 perl-Pod-Escapes-1.04-299.el7_9.noarch.rpm<br>-rw-r--r-- 1 root root  114320 7月   4 2014 perl-podlators-2.5.1-3.el7.noarch.rpm<br>-rw-r--r-- 1 root root   88756 7月   4 2014 perl-Pod-Perldoc-3.20-4.el7.noarch.rpm<br>-rw-r--r-- 1 root root  221216 7月   4 2014 perl-Pod-Simple-3.28-4.el7.noarch.rpm<br>-rw-r--r-- 1 root root   27436 7月   4 2014 perl-Pod-Usage-1.63-3.el7.noarch.rpm<br>-rw-r--r-- 1 root root   36808 7月   4 2014 perl-Scalar-List-Utils-1.27-248.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   49868 4月   4 2020 perl-Socket-2.010-5.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   78888 7月   4 2014 perl-Storable-2.45-3.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   14056 7月   4 2014 perl-Text-ParseWords-3.29-4.el7.noarch.rpm<br>-rw-r--r-- 1 root root   50392 7月   4 2014 perl-threads-1.87-4.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   39868 7月   4 2014 perl-threads-shared-1.43-6.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   46304 7月   4 2014 perl-Time-HiRes-1.9725-3.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   24792 7月   4 2014 perl-Time-Local-1.2300-2.el7.noarch.rpm<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在线安装</span><br>yum -y insatll keepalived<br></code></pre></td></tr></table></figure><h3 id="安装killall"><a href="#安装killall" class="headerlink" title="安装killall"></a>安装killall</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">yum install yum-plugin-downloadonly<br>yum install <span class="hljs-params">--downloadonly</span> <span class="hljs-params">--downloaddir=</span><span class="hljs-string">./</span> psmisc<br><br>[root@localhost killall]<span class="hljs-comment"># ll</span><br>总用量 13648<br>-rw-r<span class="hljs-params">--r--</span> 1 root root   39568 8月  23 2019 psmisc-22.20-17.el7.x86_64.rpm<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在线安装</span><br>yum -y install psmisc<br></code></pre></td></tr></table></figure><h3 id="配置keepalived-conf"><a href="#配置keepalived-conf" class="headerlink" title="配置keepalived.conf"></a>配置keepalived.conf</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash">global_defs &#123;<br>  notification_email &#123;<br>  &#125;<br>  router_id LVS_DEVEL<br>  vrrp_skip_check_adv_addr<br>  vrrp_garp_interval 0<br>  vrrp_gna_interval 0<br>&#125;<br>   <br>vrrp_script chk_haproxy &#123;<br>  <span class="hljs-comment">#script &quot;killall -0 haproxy&quot;</span><br>  script <span class="hljs-string">&quot;/etc/keepalived/check_haproxy.sh&quot;</span><br>  interval 2<br>  weight 2<br>&#125;<br>   <br>vrrp_instance haproxy-vip &#123;<br>  state BACKUP<br>  priority 100<br>  interface eth0                       <span class="hljs-comment"># Network card</span><br>  virtual_router_id 60<br>  advert_int 1<br>  authentication &#123;<br>    auth_type PASS<br>    auth_pass 1111<br>  &#125;<br>  unicast_src_ip 192.168.40.120      <span class="hljs-comment"># The IP address of this machine</span><br>  unicast_peer &#123;<br>    192.168.40.121                         <span class="hljs-comment"># The IP address of peer machines</span><br>    192.168.40.122                         <span class="hljs-comment"># The IP address of peer machines</span><br>  &#125;<br>   <br>  virtual_ipaddress &#123;<br>    192.168.40.111/24                  <span class="hljs-comment"># The VIP address</span><br>  &#125;<br>   <br>  track_script &#123;<br>    chk_haproxy<br>  &#125;<br>&#125;<br><br>其他两条主机 只需要修改unicast_src_ip 为当前主机的IP unicast_peer 里面配置备节点的IP<br></code></pre></td></tr></table></figure><h3 id="配置check-haproxy-sh"><a href="#配置check-haproxy-sh" class="headerlink" title="配置check_haproxy.sh"></a>配置check_haproxy.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>killall -0 haproxy<br><span class="hljs-keyword">if</span> [[ $? != 0 ]];<span class="hljs-keyword">then</span><br>   systemctl stop keepalived<br><span class="hljs-keyword">fi</span><br>  <span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="启动keepalived"><a href="#启动keepalived" class="headerlink" title="启动keepalived"></a>启动keepalived</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start keepalived<br>systemctl <span class="hljs-built_in">enable</span> keepalived<br>检查服务 ps -ef|grep keep<br></code></pre></td></tr></table></figure><h3 id="测试vip飘移动"><a href="#测试vip飘移动" class="headerlink" title="测试vip飘移动"></a>测试vip飘移动</h3><p>在有vip的主机上 关闭systemctl stop haproxy 查看vip是否删除 并且已经在备节点中的一台生成</p><p>需要注意 关闭haproxy后 keepalived也一同关闭了 恢复需要先启动haproxy 在启动keepalived</p><h1 id="离线安装glusterfs"><a href="#离线安装glusterfs" class="headerlink" title="离线安装glusterfs"></a>离线安装glusterfs</h1><h3 id="获取离线部署包-2"><a href="#获取离线部署包-2" class="headerlink" title="获取离线部署包"></a>获取离线部署包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#配置centos源</span><br>yum install centos-release-gluster -y<br><span class="hljs-comment">#安装gluster server服务</span><br>yum -y install glusterfs-server glusterfs-fuse<br>yum install yum-plugin-downloadonly<br>yum install --downloadonly --downloaddir=./ glusterfs-server glusterfs-fuse<br><br>[root@localhost ~]<span class="hljs-comment"># ll gluserfs/</span><br>总用量 4416<br>-rw-r--r-- 1 root root   67292 4月  25 2018 attr-2.4.46-13.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  662932 10月 11 21:27 glusterfs-9.4-1.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  204440 10月 11 21:27 glusterfs-cli-9.4-1.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  874512 10月 11 21:27 glusterfs-client-xlators-9.4-1.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  164320 10月 11 21:27 glusterfs-fuse-9.4-1.el7.x86_64.rpm<br>-rw-r--r-- 1 root root 1382888 10月 11 21:27 glusterfs-server-9.4-1.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   18656 4月  25 2018 libattr-2.4.46-13.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  121260 10月 11 21:27 libgfapi0-9.4-1.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   63376 10月 11 21:27 libgfchangelog0-9.4-1.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   86384 10月 11 21:26 libgfrpc0-9.4-1.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   58144 10月 11 21:27 libgfxdr0-9.4-1.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   41656 10月 11 21:27 libglusterd0-9.4-1.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  347984 10月 11 21:26 libglusterfs0-9.4-1.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   91396 8月  23 2019 libtirpc-0.2.4-0.16.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  144636 10月 15 2020 psmisc-22.20-17.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   61360 4月   4 2020 rpcbind-0.2.0-49.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   95148 3月  11 2020 userspace-rcu-0.10.0-3.el7.x86_64.rpm<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#配置centos源</span><br>yum install centos-release-gluster -y<br><span class="hljs-comment">#安装gluster server服务</span><br>yum -y install glusterfs-server glusterfs-fuse<br><span class="hljs-comment">#在线安装</span><br></code></pre></td></tr></table></figure><h3 id="解决依赖"><a href="#解决依赖" class="headerlink" title="解决依赖"></a>解决依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">解决glusterfs openssl-devel <br>yum install yum-plugin-downloadonly<br>yum install --downloadonly --downloaddir=&lt;directory&gt; &lt;package-name&gt;<br>[root@localhost ~]<span class="hljs-comment"># ll openssl/</span><br>总用量 7764<br>-rw-r--r-- 1 root root  717384 10月 15 2020 e2fsprogs-1.42.9-19.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  172156 10月 15 2020 e2fsprogs-libs-1.42.9-19.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   38232 7月   4 2014 keyutils-libs-devel-1.5.8-3.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  279472 12月  3 05:01 krb5-devel-1.15.1-51.el7_9.x86_64.rpm<br>-rw-r--r-- 1 root root  828700 12月  3 05:01 krb5-libs-1.15.1-51.el7_9.x86_64.rpm<br>-rw-r--r-- 1 root root   43092 10月 15 2020 libcom_err-1.42.9-19.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   33016 10月 15 2020 libcom_err-devel-1.42.9-19.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  183512 12月  3 05:01 libkadm5-1.15.1-51.el7_9.x86_64.rpm<br>-rw-r--r-- 1 root root  166012 4月   4 2020 libselinux-2.5-15.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  191184 4月   4 2020 libselinux-devel-2.5-15.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  241168 4月   4 2020 libselinux-python-2.5-15.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  154876 4月   4 2020 libselinux-utils-2.5-15.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  304196 11月 12 2018 libsepol-2.5-10.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   78740 11月 12 2018 libsepol-devel-2.5-10.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   47812 10月 15 2020 libss-1.42.9-19.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   11776 7月   4 2014 libverto-devel-0.2.5-4.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  505408 10月 15 22:00 openssl-1.0.2k-22.el7_9.x86_64.rpm<br>-rw-r--r-- 1 root root 1581508 10月 15 22:00 openssl-devel-1.0.2k-22.el7_9.x86_64.rpm<br>-rw-r--r-- 1 root root 1255752 10月 15 22:00 openssl-libs-1.0.2k-22.el7_9.x86_64.rpm<br>-rw-r--r-- 1 root root  432020 8月  11 2017 pcre-8.32-17.el7.x86_64.rpm<br>-rw-r--r-- 1 root root  491272 8月  11 2017 pcre-devel-8.32-17.el7.x86_64.rpm<br>-rw-r--r-- 1 root root   92068 2月   4 2021 zlib-1.2.7-19.el7_9.x86_64.rpm<br>-rw-r--r-- 1 root root   51256 2月   4 2021 zlib-devel-1.2.7-19.el7_9.x86_64.rpm<br></code></pre></td></tr></table></figure><h3 id="启动glusterfs"><a href="#启动glusterfs" class="headerlink" title="启动glusterfs"></a>启动glusterfs</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start glusterd<br>systemctl <span class="hljs-built_in">enable</span> glusterd<br>检查服务<br>systemctl status glusterd<br></code></pre></td></tr></table></figure><h3 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">gluster peer probe node2<br>gluster peer probe node3<br>验证<br>gluster peer status<br></code></pre></td></tr></table></figure><h1 id="离线安装heketi"><a href="#离线安装heketi" class="headerlink" title="离线安装heketi"></a>离线安装heketi</h1><h3 id="获取离线部署包-3"><a href="#获取离线部署包-3" class="headerlink" title="获取离线部署包"></a>获取离线部署包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">找一台新装的主机<br>yum install yum-plugin-downloadonly<br>yum install --downloadonly --downloaddir=./ heketi heketi-client<br><br>[root@localhost ~]<span class="hljs-comment"># ll heketi</span><br>总用量 12260<br>-rw-r--r-- 1 root root 6851612 3月  11 2020 heketi-9.0.0-1.el7.x86_64.rpm<br>-rw-r--r-- 1 root root 5699400 3月  11 2020 heketi-client-9.0.0-1.el7.x86_64.rpm<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装heketi</span><br>yum -y install heketi heketi-client<br></code></pre></td></tr></table></figure><h3 id="创建heketi使用得ssh密钥"><a href="#创建heketi使用得ssh密钥" class="headerlink" title="创建heketi使用得ssh密钥"></a>创建heketi使用得ssh密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">创建sshkey<br>ssh-keygen -f /etc/heketi/heketi_key -t rsa -N <span class="hljs-string">&#x27;&#x27;</span><br>发送sshkey<br>ssh-copy-id -i /etc/heketi/heketi_key.pub node1<br>ssh-copy-id -i /etc/heketi/heketi_key.pub node2<br>ssh-copy-id -i /etc/heketi/heketi_key.pub node3<br><br>授权heketi_key 644<br><span class="hljs-built_in">chmod</span> 644 heketi_key<br></code></pre></td></tr></table></figure><h3 id="配置heketi"><a href="#配置heketi" class="headerlink" title="配置heketi"></a>配置heketi</h3><p>编辑配置文件vi &#x2F;etc&#x2F;heketi&#x2F;heketi.json 修改段落executor 处</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>  <span class="hljs-string">&quot;_port_comment&quot;</span>: <span class="hljs-string">&quot;Heketi Server Port Number&quot;</span>,<br>  <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-string">&quot;8080&quot;</span>,<br><br>  <span class="hljs-string">&quot;_use_auth&quot;</span>: <span class="hljs-string">&quot;Enable JWT authorization. Please enable for deployment&quot;</span>,<br>  <span class="hljs-string">&quot;use_auth&quot;</span>: <span class="hljs-literal">false</span>,<br><br>  <span class="hljs-string">&quot;_jwt&quot;</span>: <span class="hljs-string">&quot;Private keys for access&quot;</span>,<br>  <span class="hljs-string">&quot;jwt&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;_admin&quot;</span>: <span class="hljs-string">&quot;Admin has access to all APIs&quot;</span>,<br>    <span class="hljs-string">&quot;admin&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;key&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;_user&quot;</span>: <span class="hljs-string">&quot;User only has access to /volumes endpoint&quot;</span>,<br>    <span class="hljs-string">&quot;user&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;key&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span><br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-string">&quot;_glusterfs_comment&quot;</span>: <span class="hljs-string">&quot;GlusterFS Configuration&quot;</span>,<br>  <span class="hljs-string">&quot;glusterfs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;_executor_comment&quot;</span>: [<br>      <span class="hljs-string">&quot;Execute plugin. Possible choices: mock, ssh&quot;</span>,<br>      <span class="hljs-string">&quot;mock: This setting is used for testing and development.&quot;</span>,<br>      <span class="hljs-string">&quot;      It will not send commands to any node.&quot;</span>,<br>      <span class="hljs-string">&quot;ssh:  This setting will notify Heketi to ssh to the nodes.&quot;</span>,<br>      <span class="hljs-string">&quot;      It will need the values in sshexec to be configured.&quot;</span>,<br>      <span class="hljs-string">&quot;kubernetes: Communicate with GlusterFS containers over&quot;</span>,<br>      <span class="hljs-string">&quot;            Kubernetes exec api.&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;executor&quot;</span>: <span class="hljs-string">&quot;ssh&quot;</span>,<br><br>    <span class="hljs-string">&quot;_sshexec_comment&quot;</span>: <span class="hljs-string">&quot;SSH username and private key file information&quot;</span>,<br>    <span class="hljs-string">&quot;sshexec&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;keyfile&quot;</span>: <span class="hljs-string">&quot;/etc/heketi/heketi_key&quot;</span>,<br>      <span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;root&quot;</span>,<br>      <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-string">&quot;22&quot;</span>,<br>      <span class="hljs-string">&quot;fstab&quot;</span>: <span class="hljs-string">&quot;/etc/fstab&quot;</span><br>    &#125;,<br><br>    <span class="hljs-string">&quot;_kubeexec_comment&quot;</span>: <span class="hljs-string">&quot;Kubernetes configuration&quot;</span>,<br>    <span class="hljs-string">&quot;kubeexec&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;host&quot;</span> :<span class="hljs-string">&quot;https://kubernetes.host:8443&quot;</span>,<br>      <span class="hljs-string">&quot;cert&quot;</span> : <span class="hljs-string">&quot;/path/to/crt.file&quot;</span>,<br>      <span class="hljs-string">&quot;insecure&quot;</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;kubernetes username&quot;</span>,<br>      <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;password for kubernetes user&quot;</span>,<br>      <span class="hljs-string">&quot;namespace&quot;</span>: <span class="hljs-string">&quot;OpenShift project or Kubernetes namespace&quot;</span>,<br>      <span class="hljs-string">&quot;fstab&quot;</span>: <span class="hljs-string">&quot;Optional: Specify fstab file on node.  Default is /etc/fstab&quot;</span><br>    &#125;,<br><br>    <span class="hljs-string">&quot;_db_comment&quot;</span>: <span class="hljs-string">&quot;Database file name&quot;</span>,<br>    <span class="hljs-string">&quot;db&quot;</span>: <span class="hljs-string">&quot;/var/lib/heketi/heketi.db&quot;</span>,<br>    <span class="hljs-string">&quot;brick_max_size_gb&quot;</span> : 1024,<br>    <span class="hljs-string">&quot;brick_min_size_gb&quot;</span> : 1,<br>    <span class="hljs-string">&quot;max_bricks_per_volume&quot;</span> : 33,<br><br>    <span class="hljs-string">&quot;_loglevel_comment&quot;</span>: [<br>      <span class="hljs-string">&quot;Set log level. Choices are:&quot;</span>,<br>      <span class="hljs-string">&quot;  none, critical, error, warning, info, debug&quot;</span>,<br>      <span class="hljs-string">&quot;Default is warning&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;loglevel&quot;</span> : <span class="hljs-string">&quot;debug&quot;</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="启动heketi"><a href="#启动heketi" class="headerlink" title="启动heketi"></a>启动heketi</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start heketi.service<br>systemctl <span class="hljs-built_in">enable</span> heketi.service<br>systemctl status heketi.service<br></code></pre></td></tr></table></figure><h3 id="创建topology-json"><a href="#创建topology-json" class="headerlink" title="创建topology.json"></a>创建topology.json</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;<br> &quot;clusters&quot;: [<br>    &#123;<br>      &quot;nodes&quot;: [<br>        &#123;<br>          &quot;node&quot;: &#123;<br>            &quot;hostnames&quot;: &#123;<br>              &quot;manage&quot;: [<br>                &quot;node1&quot; <br>             ],<br>             &quot;storage&quot;: [<br>               &quot;192.168.40.123&quot; <br>             ]<br>           &#125;,<br>           &quot;zone&quot;: 1<br>         &#125;,<br>         &quot;devices&quot;: [<br>           &quot;/dev/sdc&quot; <br>         ]<br>       &#125;,<br>        &#123;<br>          &quot;node&quot;: &#123;<br>            &quot;hostnames&quot;: &#123;<br>              &quot;manage&quot;: [<br>                &quot;node2&quot; <br>             ],<br>             &quot;storage&quot;: [<br>               &quot;192.168.40.124&quot; <br>             ]<br>           &#125;,<br>           &quot;zone&quot;: 1<br>         &#125;,<br>         &quot;devices&quot;: [<br>           &quot;/dev/sdc&quot; <br>         ]<br>       &#125;,<br>       &#123;<br>          &quot;node&quot;: &#123;<br>            &quot;hostnames&quot;: &#123;<br>              &quot;manage&quot;: [<br>                &quot;node3&quot;<br>             ],<br>             &quot;storage&quot;: [<br>               &quot;192.168.40.125&quot;  <br>             ]<br>           &#125;,<br>           &quot;zone&quot;: 1<br>         &#125;,<br>         &quot;devices&quot;: [<br>           &quot;/dev/sdc&quot;<br>         ]<br>       &#125;<br>     ]<br>   &#125;<br> ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置磁盘为lvm"><a href="#配置磁盘为lvm" class="headerlink" title="配置磁盘为lvm"></a>配置磁盘为lvm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#三台主机都要执行</span><br>mkfs.xfs /dev/sdc    <span class="hljs-comment">#格式化磁盘</span><br><br>pvcreate /dev/sdc <br></code></pre></td></tr></table></figure><h3 id="加载heketi"><a href="#加载heketi" class="headerlink" title="加载heketi"></a>加载heketi</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> HEKETI_CLI_SERVER=http://localhost:8080<br>heketi-cli topology load --json=/etc/heketi/topology.json<br><br>预计输出<br>[root@localhost ~]<span class="hljs-comment"># heketi-cli topology load --json=/etc/heketi/topology.json</span><br>Creating cluster ... ID: 2a90bc8255fc44b6b6fc36f5d65cc7db<br>Allowing file volumes on cluster.<br>Allowing block volumes on cluster.<br>Creating node gfs1 ... ID: 10cd09040be405b67af4fa5e6165e50c<br>Adding device /dev/sdc ... OK<br>Creating node gfs2 ... ID: 12a2e7a7d6438bae4609e8de879e157e<br>Adding device /dev/sdc ... OK<br>Creating node gfs3 ... ID: 464f48e831dd5e9ed02d7a74350edddf<br>Adding device /dev/sdc ... OK<br></code></pre></td></tr></table></figure><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">heketi-cli cluster info 2a90bc8255fc44b6b6fc36f5d65cc7db<br>查看磁盘大小是否和实际一致<br></code></pre></td></tr></table></figure><h3 id="配置heketi-volume模式为arbiter（可选）"><a href="#配置heketi-volume模式为arbiter（可选）" class="headerlink" title="配置heketi volume模式为arbiter（可选）"></a>配置heketi volume模式为arbiter（可选）</h3><h4 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">k8s heketi管理gfs创建arbiter卷<br>https://github.com/heketi/heketi/blob/master/docs/admin/arbiter.md<br><br>创建k8s gls 模板<br>https://github.com/kubernetes/examples/tree/master/staging/persistent-volume-provisioning<br><br>官方其他选项<br>https://docs.gluster.org/en/latest/Administrator-Guide/Tuning-Volume-Options/<br></code></pre></td></tr></table></figure><h4 id="创建arbiter-条件"><a href="#创建arbiter-条件" class="headerlink" title="创建arbiter 条件"></a>创建arbiter 条件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">1、创建副本数量包含arbiter模式的卷<br>例如创建 三个副本 那么其中一个副本为arbiter（仲裁）<br><br>2、必须大于等于三副本 （只测试了三副本，未测试三副本以上）<br></code></pre></td></tr></table></figure><h4 id="创建tag指定node或device为arbiter"><a href="#创建tag指定node或device为arbiter" class="headerlink" title="创建tag指定node或device为arbiter"></a>创建tag指定node或device为arbiter</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#每个节点都需要进创建tag 如果只为arbiter节点创建了tag 那么其他节点可能会随机创建arbiter卷，tag类型只有disabled和required </span><br><br><span class="hljs-comment">#下为指定node 进行打tag</span><br><span class="hljs-comment">#查看Node ID</span><br>heketi-cli topology info<br><br><span class="hljs-comment">#为节点添加tag 为 arbiter（仲裁）</span><br>heketi-cli node settags aafc9fb7c5ea8ef79dbf9b52c2703cf2 arbiter:required<br><br><span class="hljs-comment">#为节点添加tag 不为 arbiter（仲裁）</span><br>heketi-cli node settags aafc9fb7c5ea8ef79dbf9b52c2703cf2 arbiter:disabled<br><br><span class="hljs-comment">#为节点删除tag</span><br>heketi-cli node rmtags aafc9fb7c5ea8ef79dbf9b52c2703cf2 arbiter<br><br><span class="hljs-comment">#查看节点tag</span><br>heketi-cli node info aafc9fb7c5ea8ef79dbf9b52c2703cf2<br><br><span class="hljs-comment">#输出</span><br>Node Id: aafc9fb7c5ea8ef79dbf9b52c2703cf2<br>State: online<br>Cluster Id: e06a879a7986fda7bced4677586dfdaf<br>Zone: 1<br>Management Hostname: gfs2<br>Storage Hostname: 192.168.40.101<br>Tags:<br>  arbiter: disabled<br>Devices:<br>Id:84fccf4706291becb498fc0b9f804a19   Name:/dev/sdc            State:online    Size (GiB):99      Used (GiB):8       Free (GiB):91      Bricks:4<br></code></pre></td></tr></table></figure><h4 id="K8s-glusterfs-文件"><a href="#K8s-glusterfs-文件" class="headerlink" title="K8s glusterfs 文件"></a>K8s glusterfs 文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">其中volumeoptions: <span class="hljs-string">&quot;user.heketi.arbiter true&quot;</span> 选项为配置heketi管理gfs是创建卷的类型<br><br>apiVersion: v1<br>kind: Secret<br>metadata:<br>  name: heketi-secret<br>  namespace: kube-system<br><span class="hljs-built_in">type</span>: kubernetes.io/glusterfs<br>data:<br>  key: <span class="hljs-string">&quot;MTIzNDU2&quot;</span><br>---<br>apiVersion: storage.k8s.io/v1<br>kind: StorageClass<br>metadata:<br>  annotations:<br>    storageclass.beta.kubernetes.io/is-default-class: <span class="hljs-string">&quot;true&quot;</span><br>    storageclass.kubesphere.io/supported-access-modes: <span class="hljs-string">&#x27;[&quot;ReadWriteOnce&quot;,&quot;ReadOnlyMany&quot;,&quot;ReadWriteMany&quot;]&#x27;</span><br>  name: glusterfs<br>parameters:<br>  clusterid: <span class="hljs-string">&quot;e06a879a7986fda7bced4677586dfdaf&quot;</span><br>  gidMax: <span class="hljs-string">&quot;50000&quot;</span><br>  gidMin: <span class="hljs-string">&quot;40000&quot;</span><br>  restauthenabled: <span class="hljs-string">&quot;true&quot;</span><br>  resturl: <span class="hljs-string">&quot;http://192.168.40.100:8080&quot;</span><br>  restuser: admin<br>  secretName: heketi-secret<br>  secretNamespace: kube-system<br>  volumeoptions: <span class="hljs-string">&quot;user.heketi.arbiter true&quot;</span><br>  volumetype: <span class="hljs-string">&quot;replicate:3&quot;</span><br>provisioner: kubernetes.io/glusterfs<br>reclaimPolicy: Delete<br>volumeBindingMode: Immediate<br>allowVolumeExpansion: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h1 id="离线部署Harbor"><a href="#离线部署Harbor" class="headerlink" title="离线部署Harbor"></a>离线部署Harbor</h1><h3 id="获取部署包"><a href="#获取部署包" class="headerlink" title="获取部署包"></a>获取部署包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载离线安装包</span><br>https://github.com/goharbor/harbor/releases/download<br>tar zxf harbor-offline-installer-v2.4.1.tgz<br><br>[root@localhost harbor]<span class="hljs-comment"># ll</span><br>总用量 601628<br>drwxr-xr-x 3 root root        20 1月  18 09:46 common<br>-rw-r--r-- 1 root root      3361 12月 16 12:22 common.sh<br>-rw-r--r-- 1 root root      5944 1月  18 11:25 docker-compose.yml<br>-rw-r--r-- 1 root root 616006217 12月 16 12:23 harbor.v2.4.1.tar.gz<br>-rw-r--r-- 1 root root      8997 1月  25 10:39 harbor.yml<br>-rw-r--r-- 1 root root      8999 12月 16 12:22 harbor.yml.tmpl<br>-rwxr-xr-x 1 root root      2500 12月 16 12:22 install.sh<br>-rw-r--r-- 1 root root     11347 12月 16 12:22 LICENSE<br>-rwxr-xr-x 1 root root      1881 12月 16 12:22 prepare<br><br><span class="hljs-comment"># 生成配置文件</span><br><span class="hljs-built_in">cp</span> harbor.yml.tmpl harbor.yml<br><span class="hljs-comment"># 修改配置参数</span><br>data_volume: /bsn/harbor/data            <span class="hljs-comment">#绝对路径</span><br>hostname: domin<br>harbor_admin_password: Harbor12345       <span class="hljs-comment">#默认用户admin 密码Harbor12345</span><br>location: /var/log/harbor                <span class="hljs-comment"># 默认路径为/var/log/harbor</span><br><span class="hljs-comment"># 配置https 不配置需要注释https选项</span><br>certificate: /data/harbor/ssl/tls.cert<br>private_key: /data/harbor/ssl/tls.key<br><br> <br><span class="hljs-comment"># 创建访问域证书(可选)</span><br>openssl genrsa -out tls.key 2048<br>openssl  req -new -x509 -key tls.key -out tls.cert -days 360 -subj /CN=*.bsngate.com<br><span class="hljs-comment"># 执行安装脚本</span><br>./install.sh<br><br></code></pre></td></tr></table></figure><h3 id="修改域名后镜像名称自动修改"><a href="#修改域名后镜像名称自动修改" class="headerlink" title="修改域名后镜像名称自动修改"></a>修改域名后镜像名称自动修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#修改harbor.yml 中hostname</span><br><span class="hljs-comment">#修改harbor/common/config/core/env 中EXT_ENDPOINT= 出为修改后的域名</span><br><span class="hljs-comment">#重启harbor</span><br></code></pre></td></tr></table></figure><h3 id="迁移harbor"><a href="#迁移harbor" class="headerlink" title="迁移harbor"></a>迁移harbor</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解压harbor.zip 文件</span><br><span class="hljs-comment"># 导入镜像在配置文件同级harbor.v2.4.1.tar.gz </span><br>docker load -i harbor.v2.4.1.tar.gz<br><span class="hljs-comment"># 启动habor</span><br>docker-compose up -d<br></code></pre></td></tr></table></figure><h3 id="离线部署kubesphere"><a href="#离线部署kubesphere" class="headerlink" title="离线部署kubesphere"></a>离线部署kubesphere</h3><h3 id="1、下载kubesphere离线安装包-能上网机器上执行"><a href="#1、下载kubesphere离线安装包-能上网机器上执行" class="headerlink" title="1、下载kubesphere离线安装包(能上网机器上执行)"></a>1、下载kubesphere离线安装包(能上网机器上执行)</h3><p><strong>编译kk和kubeadm</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## kubeadm</span></span><br>wget https://github.com/kubernetes/kubernetes/archive/refs/tags/v1.20.6.zip<br>unzip v1.20.6.zip<br>cd kubernetes-1.20.6<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 修改证书有效性</span></span> <br>vi  cmd/kubeadm/app/constants/constants.go<br>// CertificateValidity defines the validity for all the signed certificates generated by kubeadm<br>        // CertificateValidity = time.Hour * 24 * 365<br>        CertificateValidity = time.Hour * 24 * 365 * 100<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 修改签发年限</span></span>        <br>vim staging/src/k8s.io/client-go/util/cert/cert.go<br> // NotAfter:              now.Add(duration365d * 10).UTC(),<br>                NotAfter:              now.Add(duration365d * 100).UTC(),<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载依赖</span></span><br>yum groupinstall &quot;Development Tools&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 编译</span></span><br>make all WHAT=cmd/kubeadm GOFLAGS=-v<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 查看sha256sum</span></span><br>sha256sum kubeadm<br>3af7918faa88586d7155e778608160156740ddc48c6d85848620f37db58fac91  kubeadm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## kubukey kk</span></span><br>git  clone https://github.com/kubesphere/kubekey.git<br>git checkout -b remotes/origin/release-1.1<br>cd kubekey/pkg/files<br>vim file.go<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 修改kubeadm sha256码为上面编译好的kubeadm码</span></span><br>&quot;v1.20.6&quot;:  &quot;3af7918faa88586d7155e778608160156740ddc48c6d85848620f37db58fac91&quot;,<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/89f9b5497f3849fbb153b51b9bacb8fa.png" alt="img"></p><h5 id="下载离线安装包"><a href="#下载离线安装包" class="headerlink" title="下载离线安装包"></a>下载离线安装包</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载镜像列表</span></span><br>curl -L -O https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/images-list.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载 offline-installation-tool.sh</span></span><br>curl -L -O https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/offline-installation-tool.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 添加执行权限</span></span><br>chmod +x offline-installation-tool.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 下载 Kubernetes 二进制文件 (替换之前编译好得kubeadm)</span></span><br>./offline-installation-tool.sh -b -v v1.20.6<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#### 如果不能访问Google 添加环境变量</span></span><br>export KKZONE=cn;./offline-installation-tool.sh -b -v v1.20.6<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 拉取镜像</span></span><br>./offline-installation-tool.sh -s -l images-list.txt -d ./kubesphere-images<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 修改脚本换成自己仓库项目，推送到私有仓库</span></span><br>imageurl=$registryurl&quot;/library/&quot;$image  imageurl=$registryurl&quot;/kubesphere/&quot;$image <br>./offline-installation-tool.sh -l images-list.txt -d ./kubesphere-images -r harbor.ops.bsnbase.com <br></code></pre></td></tr></table></figure><h1 id="安装kubesphere"><a href="#安装kubesphere" class="headerlink" title="安装kubesphere"></a>安装kubesphere</h1><h6 id="官方离线文档地址"><a href="#官方离线文档地址" class="headerlink" title="官方离线文档地址"></a>官方离线文档地址</h6><p><a href="https://v3-1.docs.kubesphere.io/zh/docs/installing-on-linux/introduction/air-gapped-installation/">https://v3-1.docs.kubesphere.io/zh/docs/installing-on-linux/introduction/air-gapped-installation/</a></p><h3 id="下载-KubeKey"><a href="#下载-KubeKey" class="headerlink" title="下载 KubeKey"></a>下载 KubeKey</h3><p>先执行以下命令以确保您从正确的区域下载 KubeKey：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> KKZONE=cn<br></code></pre></td></tr></table></figure><p>执行以下命令下载 KubeKey：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sfL https://get-kk.kubesphere.io | VERSION=v1.1.1 sh -<br></code></pre></td></tr></table></figure><p>为 <code>kk</code> 文件添加可执行权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x kk<br></code></pre></td></tr></table></figure><h5 id="1、生成模板文件"><a href="#1、生成模板文件" class="headerlink" title="1、生成模板文件"></a>1、生成模板文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./kk create config --with-kubernetes v1.22.10 --with-kubesphere v3.3.0 config-sample.yaml<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubekey.kubesphere.io/v1alpha2</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Cluster</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">sample</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">master</span>, <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.6</span><span class="hljs-number">.11</span>, <span class="hljs-attr">internalAddress:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.6</span><span class="hljs-number">.11</span>, <span class="hljs-attr">user:</span> <span class="hljs-string">root</span>, <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;root&quot;</span>&#125;<br>  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">node1</span>, <span class="hljs-attr">address:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.6</span><span class="hljs-number">.12</span>, <span class="hljs-attr">internalAddress:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.6</span><span class="hljs-number">.12</span>, <span class="hljs-attr">user:</span> <span class="hljs-string">root</span>, <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;root&quot;</span>&#125;<br>  <span class="hljs-attr">roleGroups:</span><br>    <span class="hljs-attr">etcd:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br>    <span class="hljs-attr">control-plane:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br>    <span class="hljs-attr">worker:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">node1</span><br>    <span class="hljs-attr">registry:</span><br>  <span class="hljs-attr">controlPlaneEndpoint:</span><br>    <span class="hljs-comment">## Internal loadbalancer for apiservers </span><br>    <span class="hljs-comment"># internalLoadbalancer: haproxy</span><br><br>    <span class="hljs-attr">domain:</span> <span class="hljs-string">lb.kubesphere.local</span><br>    <span class="hljs-attr">address:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6443</span><br>  <span class="hljs-attr">kubernetes:</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1.22.10</span><br>    <span class="hljs-attr">clusterName:</span> <span class="hljs-string">cluster.local</span><br>    <span class="hljs-attr">autoRenewCerts:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">containerManager:</span> <span class="hljs-string">docker</span><br>  <span class="hljs-attr">etcd:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">kubekey</span><br>  <span class="hljs-attr">network:</span><br>    <span class="hljs-attr">plugin:</span> <span class="hljs-string">calico</span><br>    <span class="hljs-attr">kubePodsCIDR:</span> <span class="hljs-number">10.233</span><span class="hljs-number">.64</span><span class="hljs-number">.0</span><span class="hljs-string">/18</span><br>    <span class="hljs-attr">kubeServiceCIDR:</span> <span class="hljs-number">10.233</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/18</span><br>    <span class="hljs-comment">## multus support. https://github.com/k8snetworkplumbingwg/multus-cni</span><br>    <span class="hljs-attr">multusCNI:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">registry:</span><br>  <span class="hljs-comment">#  type: harbor</span><br>  <span class="hljs-comment">#  auths:</span><br>  <span class="hljs-comment">#    &quot;dockerhub.kubekey.local&quot;:</span><br>  <span class="hljs-comment">#      username: admin</span><br>  <span class="hljs-comment">#      password: Harbor12345</span><br>    <span class="hljs-attr">privateRegistry:</span> <span class="hljs-string">&quot;harbor.cn&quot;</span><br>    <span class="hljs-attr">namespaceOverride:</span> <span class="hljs-string">&quot;kubesphereio&quot;</span><br>    <span class="hljs-attr">registryMirrors:</span> []<br>    <span class="hljs-attr">insecureRegistries:</span> []<br>  <span class="hljs-attr">addons:</span> []<br><br><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">installer.kubesphere.io/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterConfiguration</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ks-installer</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubesphere-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v3.3.0</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">persistence:</span><br>    <span class="hljs-attr">storageClass:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">authentication:</span><br>    <span class="hljs-attr">jwtSecret:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">zone:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">local_registry:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">namespace_override:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-comment"># dev_tag: &quot;&quot;</span><br>  <span class="hljs-attr">etcd:</span><br>    <span class="hljs-attr">monitoring:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">endpointIps:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">2379</span><br>    <span class="hljs-attr">tlsEnable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">common:</span><br>    <span class="hljs-attr">core:</span><br>      <span class="hljs-attr">console:</span><br>        <span class="hljs-attr">enableMultiLogin:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">30880</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>    <span class="hljs-comment"># apiserver:</span><br>    <span class="hljs-comment">#  resources: &#123;&#125;</span><br>    <span class="hljs-comment"># controllerManager:</span><br>    <span class="hljs-comment">#  resources: &#123;&#125;</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">volumeSize:</span> <span class="hljs-string">2Gi</span><br>    <span class="hljs-attr">openldap:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">volumeSize:</span> <span class="hljs-string">2Gi</span><br>    <span class="hljs-attr">minio:</span><br>      <span class="hljs-attr">volumeSize:</span> <span class="hljs-string">10Gi</span><br>    <span class="hljs-attr">monitoring:</span><br>      <span class="hljs-comment"># type: external</span><br>      <span class="hljs-attr">endpoint:</span> <span class="hljs-string">http://prometheus-operated.kubesphere-monitoring-system.svc:9090</span><br>      <span class="hljs-attr">GPUMonitoring:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">gpu:</span><br>      <span class="hljs-attr">kinds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">resourceName:</span> <span class="hljs-string">&quot;nvidia.com/gpu&quot;</span><br>        <span class="hljs-attr">resourceType:</span> <span class="hljs-string">&quot;GPU&quot;</span><br>        <span class="hljs-attr">default:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">es:</span><br>      <span class="hljs-comment"># master:</span><br>      <span class="hljs-comment">#   volumeSize: 4Gi</span><br>      <span class="hljs-comment">#   replicas: 1</span><br>      <span class="hljs-comment">#   resources: &#123;&#125;</span><br>      <span class="hljs-comment"># data:</span><br>      <span class="hljs-comment">#   volumeSize: 20Gi</span><br>      <span class="hljs-comment">#   replicas: 1</span><br>      <span class="hljs-comment">#   resources: &#123;&#125;</span><br>      <span class="hljs-attr">logMaxAge:</span> <span class="hljs-number">7</span><br>      <span class="hljs-attr">elkPrefix:</span> <span class="hljs-string">logstash</span><br>      <span class="hljs-attr">basicAuth:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;&quot;</span><br>      <span class="hljs-attr">externalElasticsearchHost:</span> <span class="hljs-string">&quot;&quot;</span><br>      <span class="hljs-attr">externalElasticsearchPort:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">alerting:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># thanosruler:</span><br>    <span class="hljs-comment">#   replicas: 1</span><br>    <span class="hljs-comment">#   resources: &#123;&#125;</span><br>  <span class="hljs-attr">auditing:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># operator:</span><br>    <span class="hljs-comment">#   resources: &#123;&#125;</span><br>    <span class="hljs-comment"># webhook:</span><br>    <span class="hljs-comment">#   resources: &#123;&#125;</span><br>  <span class="hljs-attr">devops:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># resources: &#123;&#125;</span><br>    <span class="hljs-attr">jenkinsMemoryLim:</span> <span class="hljs-string">2Gi</span><br>    <span class="hljs-attr">jenkinsMemoryReq:</span> <span class="hljs-string">1500Mi</span><br>    <span class="hljs-attr">jenkinsVolumeSize:</span> <span class="hljs-string">8Gi</span><br>    <span class="hljs-attr">jenkinsJavaOpts_Xms:</span> <span class="hljs-string">1200m</span><br>    <span class="hljs-attr">jenkinsJavaOpts_Xmx:</span> <span class="hljs-string">1600m</span><br>    <span class="hljs-attr">jenkinsJavaOpts_MaxRAM:</span> <span class="hljs-string">2g</span><br>  <span class="hljs-attr">events:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># operator:</span><br>    <span class="hljs-comment">#   resources: &#123;&#125;</span><br>    <span class="hljs-comment"># exporter:</span><br>    <span class="hljs-comment">#   resources: &#123;&#125;</span><br>    <span class="hljs-comment"># ruler:</span><br>    <span class="hljs-comment">#   enabled: true</span><br>    <span class="hljs-comment">#   replicas: 2</span><br>    <span class="hljs-comment">#   resources: &#123;&#125;</span><br>  <span class="hljs-attr">logging:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">logsidecar:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>      <span class="hljs-comment"># resources: &#123;&#125;</span><br>  <span class="hljs-attr">metrics_server:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">monitoring:</span><br>    <span class="hljs-attr">storageClass:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">node_exporter:</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">9100</span><br>      <span class="hljs-comment"># resources: &#123;&#125;</span><br>    <span class="hljs-comment"># kube_rbac_proxy:</span><br>    <span class="hljs-comment">#   resources: &#123;&#125;</span><br>    <span class="hljs-comment"># kube_state_metrics:</span><br>    <span class="hljs-comment">#   resources: &#123;&#125;</span><br>    <span class="hljs-comment"># prometheus:</span><br>    <span class="hljs-comment">#   replicas: 1</span><br>    <span class="hljs-comment">#   volumeSize: 20Gi</span><br>    <span class="hljs-comment">#   resources: &#123;&#125;</span><br>    <span class="hljs-comment">#   operator:</span><br>    <span class="hljs-comment">#     resources: &#123;&#125;</span><br>    <span class="hljs-comment"># alertmanager:</span><br>    <span class="hljs-comment">#   replicas: 1</span><br>    <span class="hljs-comment">#   resources: &#123;&#125;</span><br>    <span class="hljs-comment"># notification_manager:</span><br>    <span class="hljs-comment">#   resources: &#123;&#125;</span><br>    <span class="hljs-comment">#   operator:</span><br>    <span class="hljs-comment">#     resources: &#123;&#125;</span><br>    <span class="hljs-comment">#   proxy:</span><br>    <span class="hljs-comment">#     resources: &#123;&#125;</span><br>    <span class="hljs-attr">gpu:</span><br>      <span class="hljs-attr">nvidia_dcgm_exporter:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-comment"># resources: &#123;&#125;</span><br>  <span class="hljs-attr">multicluster:</span><br>    <span class="hljs-attr">clusterRole:</span> <span class="hljs-string">none</span><br>  <span class="hljs-attr">network:</span><br>    <span class="hljs-attr">networkpolicy:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">ippool:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">none</span><br>    <span class="hljs-attr">topology:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">none</span><br>  <span class="hljs-attr">openpitrix:</span><br>    <span class="hljs-attr">store:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">servicemesh:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">istio:</span><br>      <span class="hljs-attr">components:</span><br>        <span class="hljs-attr">ingressGateways:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">istio-ingressgateway</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">cni:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">edgeruntime:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">kubeedge:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">cloudCore:</span><br>        <span class="hljs-attr">cloudHub:</span><br>          <span class="hljs-attr">advertiseAddress:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-attr">service:</span><br>          <span class="hljs-attr">cloudhubNodePort:</span> <span class="hljs-string">&quot;30000&quot;</span><br>          <span class="hljs-attr">cloudhubQuicNodePort:</span> <span class="hljs-string">&quot;30001&quot;</span><br>          <span class="hljs-attr">cloudhubHttpsNodePort:</span> <span class="hljs-string">&quot;30002&quot;</span><br>          <span class="hljs-attr">cloudstreamNodePort:</span> <span class="hljs-string">&quot;30003&quot;</span><br>          <span class="hljs-attr">tunnelNodePort:</span> <span class="hljs-string">&quot;30004&quot;</span><br>        <span class="hljs-comment"># resources: &#123;&#125;</span><br>        <span class="hljs-comment"># hostNetWork: false</span><br>      <span class="hljs-attr">iptables-manager:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">mode:</span> <span class="hljs-string">&quot;external&quot;</span><br>        <span class="hljs-comment"># resources: &#123;&#125;</span><br>      <span class="hljs-comment"># edgeService:</span><br>      <span class="hljs-comment">#   resources: &#123;&#125;</span><br>  <span class="hljs-attr">terminal:</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">600</span><br></code></pre></td></tr></table></figure><h5 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">1、修改hosts主机配置信息<br>2、添加registry.privateRegistry 为自己私有仓库地址 privateRegistry: harbor.ops.bsnbase.com<br>3、添加gfs存储挂载路径<br>- name: glusterfs<br>    namespace: kube-system<br>    sources:<br>      yaml:<br>        path:<br>        - /root/glusterfs-sc.yaml<br></code></pre></td></tr></table></figure><h6 id="glusterfs-sc-yaml"><a href="#glusterfs-sc-yaml" class="headerlink" title="glusterfs-sc.yaml"></a>glusterfs-sc.yaml</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">apiVersion: v1<br>kind: Secret<br>metadata:<br>  name: heketi-secret<br>  namespace: kube-system<br>type: kubernetes.io/glusterfs<br>data:<br>  key: &quot;MTIzNDU2&quot;<br>---<br>apiVersion: storage.k8s.io/v1<br>kind: StorageClass<br>metadata:<br>  annotations:<br>    storageclass.beta.kubernetes.io/is-default-class: &quot;true&quot;<br>    storageclass.kubesphere.io/supported-access-modes: &#x27;[&quot;ReadWriteOnce&quot;,&quot;ReadOnlyMany&quot;,&quot;ReadWriteMany&quot;]&#x27;<br>  name: glusterfs<br>parameters:<br>  clusterid: &quot;e06a879a7986fda7bced4677586dfdaf&quot;<br>  gidMax: &quot;50000&quot;<br>  gidMin: &quot;40000&quot;<br>  restauthenabled: &quot;true&quot;<br>  resturl: &quot;http://192.168.40.100:8080&quot;<br>  restuser: admin<br>  secretName: heketi-secret<br>  secretNamespace: kube-system<br>  volumeoptions: &quot;user.heketi.arbiter true&quot;<br>  volumetype: &quot;replicate:3&quot;<br>provisioner: kubernetes.io/glusterfs<br>reclaimPolicy: Delete<br>volumeBindingMode: Immediate<br>allowVolumeExpansion: true<br></code></pre></td></tr></table></figure><h5 id="3、启动节点"><a href="#3、启动节点" class="headerlink" title="3、启动节点"></a>3、启动节点</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 多节点集群启动</span></span><br>./kk create cluster -f config.yaml<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 安装完成后验证</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####################################################</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##              Welcome to KubeSphere!           ###</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####################################################</span></span><br><br>Console: http://192.168.0.2:30880<br>Account: admin<br>Password: P@88w0rd<br><br>NOTES：<br>  1. After you log into the console, please check the<br>     monitoring status of service components in<br>     the &quot;Cluster Management&quot;. If any service is not<br>     ready, please wait patiently until all components<br>     are up and running.<br>  2. Please change the default password after login.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####################################################</span></span><br>https://kubesphere.io             20xx-xx-xx xx:xx:xx<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####################################################</span></span><br></code></pre></td></tr></table></figure><h5 id="kubesphere中文文档地址"><a href="#kubesphere中文文档地址" class="headerlink" title="kubesphere中文文档地址"></a>kubesphere中文文档地址</h5><p><a href="https://www.bookstack.cn/read/kubesphere-3.1-zh/807436df96a6eb8a.md">https://www.bookstack.cn/read/kubesphere-3.1-zh/807436df96a6eb8a.md</a></p><h1 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#修改配置文件</span><br>---<br>apiVersion: kubekey.kubesphere.io/v1alpha2<br>kind: Cluster<br>metadata:<br>  name: sample<br>spec:<br>  hosts:<br>  - &#123;name: master, address: 10.0.6.11, internalAddress: 10.0.6.11, user: root, password: <span class="hljs-string">&quot;root&quot;</span>&#125;<br>  - &#123;name: node1, address: 10.0.6.12, internalAddress: 10.0.6.12, user: root, password: <span class="hljs-string">&quot;root&quot;</span>&#125;<br>  - &#123;name: node2, address: 10.0.6.24, internalAddress: 10.0.6.24, user: root, password: <span class="hljs-string">&quot;root&quot;</span>&#125;<br>  roleGroups:<br>    etcd:<br>    - master<br>    control-plane: <br>    - master<br>    worker:<br>    - node1<br>    - node2<br>    registry:<br>  controlPlaneEndpoint:<br><br></code></pre></td></tr></table></figure><p>执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./kk add nodes -f config-sample.yaml<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>列表</title>
    <link href="/2022/07/27/6.%E5%88%97%E8%A1%A8/"/>
    <url>/2022/07/27/6.%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">lit = [<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-number">123</span>,<span class="hljs-literal">True</span>,]<br><br>lit.append(<span class="hljs-string">&quot;abc&quot;</span>)     <span class="hljs-comment">#列表增加 追加</span><br>lit.insert(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;wang&quot;</span>)  <span class="hljs-comment">#插入</span><br>lit.extend(<span class="hljs-string">&quot;wang&quot;</span>)    <span class="hljs-comment">#迭代添加</span><br><br><span class="hljs-comment">#列表删除</span><br>lit.pop()<br><span class="hljs-built_in">print</span>(lit)         <span class="hljs-comment"># 默认删除最后一个索引</span><br>lit.pop(<span class="hljs-number">0</span>)         <span class="hljs-comment"># 可以指定索引值进行删除</span><br>lit.remove(<span class="hljs-string">&quot;123&quot;</span>)  <span class="hljs-comment">#通过元素名字进行删除 多个元素值相同默认删除第一个</span><br><span class="hljs-keyword">del</span> lit[:<span class="hljs-number">2</span>]        <span class="hljs-comment">#通过切片删除</span><br><span class="hljs-keyword">del</span> lit[<span class="hljs-number">0</span>]         <span class="hljs-comment">#通过索引删除</span><br><span class="hljs-keyword">del</span> lit[::<span class="hljs-number">2</span>]       <span class="hljs-comment">#通过步长删除</span><br>lit.clear()        <span class="hljs-comment">#清空</span><br><br><span class="hljs-comment">#列表改</span><br>lit[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;wang&quot;</span>                 <span class="hljs-comment">#通过索引修改</span><br>lit[::] = <span class="hljs-literal">True</span>,<span class="hljs-number">123</span>,<span class="hljs-string">&quot;1234&quot;</span>,<span class="hljs-number">666</span>   <span class="hljs-comment">#通过步长修改</span><br><br><span class="hljs-comment">#列表查</span><br><span class="hljs-built_in">print</span>(lit[::])                   <span class="hljs-comment">#通过切片查看</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">\\列表嵌套<br>lit = [<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-literal">True</span>,[<span class="hljs-string">&quot;wang&quot;</span>,<span class="hljs-string">&quot;yu&quot;</span>,[<span class="hljs-string">&quot;long&quot;</span>,[<span class="hljs-string">&quot;hello&quot;</span>,]]]]<br><span class="hljs-built_in">print</span>(lit[<span class="hljs-number">2</span>][-<span class="hljs-number">1</span>][-<span class="hljs-number">1</span>])<br><br>D:\python3<span class="hljs-number">.8</span>\python.exe D:/python学习/day4.py<br>[<span class="hljs-string">&#x27;hello&#x27;</span>]<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">\\元组<br><span class="hljs-comment">#元组</span><br><span class="hljs-comment">#元组是个不可变的列表</span><br>num = (<span class="hljs-number">1</span>,<span class="hljs-literal">True</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,],<span class="hljs-string">&quot;123&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> num:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>字符串</title>
    <link href="/2022/07/14/5.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95-%E6%95%B4%E5%BD%A2%E5%92%8C%E5%B8%83%E5%B0%94%E5%80%BC%E8%BD%AC%E6%8D%A2/"/>
    <url>/2022/07/14/5.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95-%E6%95%B4%E5%BD%A2%E5%92%8C%E5%B8%83%E5%B0%94%E5%80%BC%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;hello world!&quot;</span><br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])<br><span class="hljs-comment">#特性顾头不顾尾， name[起始位置:终止位置]</span><br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">0</span>:])<br><span class="hljs-comment">#某个位置不指定，默认取最后</span><br><span class="hljs-built_in">print</span>(name[-<span class="hljs-number">2</span>:-<span class="hljs-number">7</span>:-<span class="hljs-number">1</span>])<br><span class="hljs-comment">#name[起始位置:终止位置:步长]步长默认为1 表示从左往右取值，-1 表示从右往左取值</span><br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">0</span>::<span class="hljs-number">2</span>])<br><span class="hljs-comment">#修改步长会隔一个字符拿一个字符</span><br><span class="hljs-built_in">print</span>(name[:])<br><span class="hljs-comment">#输出所有索引值</span><br></code></pre></td></tr></table></figure><h2 id="字符串大小写"><a href="#字符串大小写" class="headerlink" title="字符串大小写"></a>字符串大小写</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(name.upper()) <span class="hljs-comment">#全部大写</span><br><span class="hljs-comment">#字符串大写</span><br><span class="hljs-built_in">print</span>(name.lower()) <span class="hljs-comment">#全部小写</span><br><span class="hljs-comment">#字符串小写</span><br></code></pre></td></tr></table></figure><h2 id="脱字符"><a href="#脱字符" class="headerlink" title="脱字符"></a>脱字符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(name.strip(<span class="hljs-string">&#x27;h&#x27;</span>))<br><span class="hljs-comment">#脱掉字符传的两端的空格和换行符和制表符</span><br></code></pre></td></tr></table></figure><h2 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;肉夹馍,肉夹馍&quot;</span><br><span class="hljs-built_in">print</span>(a.replace(<span class="hljs-string">&quot;肉夹馍&quot;</span>,<span class="hljs-string">&quot;驴肉火烧&quot;</span>,<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h2 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;wang yu long&quot;</span><br><span class="hljs-built_in">print</span>(s.split())<br><span class="hljs-comment">#分割：以空格和换行符制表符进行分割 [&#x27;wang&#x27;, &#x27;yu&#x27;, &#x27;long&#x27;]</span><br><span class="hljs-built_in">print</span>(s.split(<span class="hljs-string">&quot;w&quot;</span>,maxsplit=<span class="hljs-number">1</span>))<br><span class="hljs-comment"># maxsplit 指定最多匹配几次 以w为分割符</span><br></code></pre></td></tr></table></figure><h2 id="判断字符串类"><a href="#判断字符串类" class="headerlink" title="判断字符串类"></a>判断字符串类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">b = <span class="hljs-string">&quot;wang123你&quot;</span><br><span class="hljs-built_in">print</span>(b.isalnum()) <span class="hljs-comment"># 判断是不是字母数字中文</span><br>c = <span class="hljs-string">&quot;wang你&quot;</span><br><span class="hljs-built_in">print</span>(c.isalpha()) <span class="hljs-comment"># 判断是不是字母中文</span><br>d = <span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-built_in">print</span>(d.isdigit()) <span class="hljs-comment">#判断是不是都是阿拉伯数字</span><br>e = <span class="hljs-string">&quot;12&quot;</span><br><span class="hljs-built_in">print</span>(e.isdecimal()) <span class="hljs-comment">#判断是不是十进制</span><br></code></pre></td></tr></table></figure><h2 id="二进制转换"><a href="#二进制转换" class="headerlink" title="二进制转换"></a>二进制转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-number">186</span>)) <span class="hljs-comment">#bin()十进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;100010101110&quot;</span>,<span class="hljs-number">2</span>)) <span class="hljs-comment">#int(&quot;10011&quot;,2) 将二进制转换成十进制</span><br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&quot;1&quot;</span>)) <span class="hljs-comment">#数字在bool布尔值中非0都为True 否 False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">0</span>)) <span class="hljs-comment"># 字符串在bool布尔值不为空都为True 否 False</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>索引</title>
    <link href="/2022/07/04/4.%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/07/04/4.%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><strong>索引</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;123456&quot;</span><br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">1</span>])<br><span class="hljs-comment">#返回是1</span><br><span class="hljs-comment">#索引[下标]</span><br><span class="hljs-comment">#012345 从左到右</span><br><span class="hljs-comment">#-1-2-3-4-5 从右到左</span><br><br><br></code></pre></td></tr></table></figure><p><strong>切片</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;hello world!&quot;</span><br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])<br><span class="hljs-comment">#特性顾头不顾尾， name[起始位置:终止位置]</span><br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">0</span>:])<br><span class="hljs-comment">#某个位置不指定，默认取最后</span><br><span class="hljs-built_in">print</span>(name[-<span class="hljs-number">2</span>:-<span class="hljs-number">7</span>:-<span class="hljs-number">1</span>])<br><span class="hljs-comment">#name[起始位置:终止位置:步长]步长默认为1 表示从左往右取值，-1 表示从右往左取值</span><br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">0</span>::<span class="hljs-number">2</span>])<br><span class="hljs-comment">#修改步长会隔一个字符拿一个字符</span><br><br>-------------------------------------------------------------------------------<br><br>D:\python3<span class="hljs-number">.8</span>\python.exe D:/python学习/python-day1.py<br>he<br>hello world!<br>dlrow<br>hlowrd<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>运算符</title>
    <link href="/2022/06/30/3.%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2022/06/30/3.%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><table><thead><tr><th align="center">运算符</th><th align="right">描述</th><th align="center">实例</th><th></th><th></th><th></th></tr></thead><tbody><tr><td align="center">+</td><td align="right">加</td><td align="center">10+20&#x3D;30</td><td></td><td></td><td></td></tr><tr><td align="center">-</td><td align="right">减</td><td align="center">30-10&#x3D;20</td><td></td><td></td><td></td></tr><tr><td align="center">*</td><td align="right">乘</td><td align="center">2*3&#x3D;6</td><td></td><td></td><td></td></tr><tr><td align="center">&#x2F;</td><td align="right">除</td><td align="center">6&#x2F;3&#x3D;2</td><td></td><td></td><td></td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="right">取整除</td><td align="center">5&#x2F;&#x2F;2&#x3D;2</td><td></td><td></td><td></td></tr><tr><td align="center">%</td><td align="right">取余除</td><td align="center">9%2&#x3D;1</td><td></td><td></td><td></td></tr><tr><td align="center">**</td><td align="right">幂</td><td align="center">2 ** 3 &#x3D; 8</td><td></td><td></td><td></td></tr><tr><td align="center"></td><td align="right"></td><td align="center"></td><td></td><td></td><td></td></tr></tbody></table><p>在python中* 运算符还可以用于字符串列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pythoon">print(&quot;-&quot; * 50)<br>#打印节果如下<br># --------------------------------------------------<br></code></pre></td></tr></table></figure><h3 id="比较关系运算符"><a href="#比较关系运算符" class="headerlink" title="比较关系运算符"></a>比较关系运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th></th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>检查两个操作的值是否<strong>相等</strong>，如果是则条件成立，返回True</td><td></td></tr><tr><td>!&#x3D;</td><td>检查两个操作的值是否<strong>不相等</strong>，如果是则条件成立，返回True</td><td></td></tr><tr><td>&gt;</td><td>检查左边的数值是否<strong>大于</strong>右边的数值，如果条件成立，返回True</td><td></td></tr><tr><td>&lt;</td><td>检查左边的数值是否<strong>小于</strong>右边的数值，如果条件成立，返回True</td><td></td></tr><tr><td>&gt;&#x3D;</td><td>检查左边测数值是否<strong>大于等于</strong>右边的数值，如果条件成立，返回True</td><td></td></tr><tr><td>&lt;&#x3D;</td><td>检查左边的数值是否<strong>小于等于</strong>右边的数值，如果条件成立，返回True</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>只有x和y返回都为True，返回才为True，x和y只要有一个False，都会返回False</td></tr><tr><td>or</td><td>x or y</td><td>只要x和y有一个返回为True,返回为True，只有x和y都为False,才会返回False</td></tr><tr><td>not</td><td>not x</td><td>如果x为True,则返回True,如果x为Flase，则会返回为True</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>1.在python中，使用&#x3D;可以给变量赋值</p><p>2.在算数运算符的时候，为了简写代码，python还提供了一系列的与算数运算符对应的赋值运算符</p><p>3.注意：<strong>赋值运算符中间没有空格</strong></p><table><thead><tr><th>运算</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值运算符</td><td>a &#x3D; a + b 将a+b的结果赋值给c</td></tr><tr><td>+&#x3D;</td><td>加等于赋值运算符</td><td>c +&#x3D; a 等效 c &#x3D; c + a</td></tr><tr><td>-&#x3D;</td><td>减等于赋值运算符</td><td>c -&#x3D; a 等效 c &#x3D; c - a</td></tr><tr><td>*&#x3D;</td><td>乘等于赋值运算符</td><td>c * &#x3D; a 等效 c &#x3D; c * a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除等于赋值运算符</td><td>c &#x2F;&#x3D;  a  等效 c &#x3D; c &#x2F; a</td></tr><tr><td>&#x2F;&#x2F;&#x3D;</td><td>取整除赋值运算符</td><td>c &#x2F;&#x2F;&#x3D;  a  等效 c &#x3D; c &#x2F;&#x2F; a</td></tr><tr><td>%&#x3D;</td><td>区模等于赋值运算符</td><td>c %&#x3D;  a  等效 c &#x3D; c % a</td></tr><tr><td>**&#x3D;</td><td>幂赋值运算符</td><td>c * *&#x3D;  a  等效 c &#x3D; c * * a</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>幂（最高优先级）</td></tr><tr><td>* &#x2F; % &#x2F;&#x2F;</td><td>乘，除，取余除，取整除</td></tr><tr><td>+ -</td><td>加，减</td></tr><tr><td>&lt;&#x3D; &lt; &gt; &gt; &#x3D;</td><td>比较运算符</td></tr><tr><td>&#x3D;&#x3D; !&#x3D;</td><td>等于运算符</td></tr><tr><td>&#x3D; %&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; -&#x3D; +&#x3D; *&#x3D; **&#x3D;</td><td>赋值运算符</td></tr><tr><td>not or and</td><td>逻辑运算符</td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python基础语法</title>
    <link href="/2022/06/30/2.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%20if%20while/"/>
    <url>/2022/06/30/2.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%20if%20while/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入账号&quot;</span>)<br>b = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密码&quot;</span>)<br><br><span class="hljs-keyword">if</span> a == <span class="hljs-string">&quot;wang&quot;</span> <span class="hljs-keyword">and</span> b == <span class="hljs-string">&quot;123456&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;登录成功&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;账号或密码错误&quot;</span>)<br><br>    <br>    <span class="hljs-comment"># if 判断</span><br></code></pre></td></tr></table></figure><h3 id="while-死循环"><a href="#while-死循环" class="headerlink" title="while 死循环"></a>while 死循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    b = <span class="hljs-string">&quot;66&quot;</span><br>    a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt;&gt;&quot;</span>)<br>    <span class="hljs-keyword">if</span> a == b:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜对了&quot;</span>)<br>    <span class="hljs-keyword">elif</span> a &gt; b:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜大了&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜小了&quot;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="while-条件判断"><a href="#while-条件判断" class="headerlink" title="while 条件判断"></a>while 条件判断</h3><p>非零的都为True </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> a &lt;=<span class="hljs-number">9</span>:<br>    <span class="hljs-built_in">print</span>(a)<br>    a += <span class="hljs-number">1</span><br><span class="hljs-comment"># 当a = 9 时会终止循环</span><br></code></pre></td></tr></table></figure><h3 id="continue-跳出本次循环，进行下次循环"><a href="#continue-跳出本次循环，进行下次循环" class="headerlink" title="continue 跳出本次循环，进行下次循环"></a>continue 跳出本次循环，进行下次循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># continue 跳出本次循环，进行下次循环</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wang&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;long&quot;</span>)<br>    <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>)<br></code></pre></td></tr></table></figure><h3 id="break-终止本次循环"><a href="#break-终止本次循环" class="headerlink" title="break 终止本次循环"></a>break 终止本次循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wang&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;yu&quot;</span>)<br>    <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;long&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;进入下级循环&quot;</span>)<br>   <br><span class="hljs-comment">#终止本次循环，程序在本次循环结束</span><br></code></pre></td></tr></table></figure><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;&quot;&quot;-------- info --------</span><br><span class="hljs-string">name:%s</span><br><span class="hljs-string">age:%d</span><br><span class="hljs-string">job:%s</span><br><span class="hljs-string"></span><br><span class="hljs-string">-------- end --------</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;name&quot;</span>)<br>age = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;age&quot;</span>))<br>job = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;job&quot;</span>)<br><span class="hljs-built_in">print</span>(s%(name,age,job))<br><br><br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;you name:&quot;</span>)<br>b = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">你好   世界</span><br><span class="hljs-string">你好    %s%%</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(b%(a))<br><br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt;&gt;&quot;</span>)<br>name=<span class="hljs-string">f&quot;你好<span class="hljs-subst">&#123;a&#125;</span>&quot;</span><br><span class="hljs-built_in">print</span>(name)<br><br><br><br><span class="hljs-comment"># f&#123;&#125; 字符串替换</span><br><span class="hljs-comment"># %s 占的是字符串格式的占位符</span><br><span class="hljs-comment"># %d 占的是数字类型的占位符</span><br><span class="hljs-comment"># %i 占的是int 类型的占位符</span><br><span class="hljs-comment"># %% 转义</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python入门</title>
    <link href="/2022/06/30/1.python%20%E7%9A%84%E5%8E%86%E5%8F%B2/"/>
    <url>/2022/06/30/1.python%20%E7%9A%84%E5%8E%86%E5%8F%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="1-python-的历史"><a href="#1-python-的历史" class="headerlink" title="1.python 的历史"></a>1.python 的历史</h3><p>​2004 Django框架诞生了</p><p>​python2:</p><p>​源码不统一,有重复的功能代码</p><p>​python3:</p><p>​源码统一,没有重复的功能代码</p><h3 id="2-python是一个什么编程语言"><a href="#2-python是一个什么编程语言" class="headerlink" title="2.python是一个什么编程语言"></a>2.python是一个什么编程语言</h3><p>​编译型: 只翻译一次 (代表 C)</p><p>​优点: 执行速度快</p><p>​缺点: 开发速度慢</p><p>​解释型:逐行翻译 (代表 Python)</p><p>​   缺点: 执行速度慢</p><p>​   优点: 开发速度快</p><h3 id="3-python的种类"><a href="#3-python的种类" class="headerlink" title="3.python的种类"></a>3.python的种类</h3><p>cpython 从官方下载就是cpython</p><h3 id="4-变量-–-输出"><a href="#4-变量-–-输出" class="headerlink" title="4.变量 – 输出"></a>4.变量 – 输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span> <span class="hljs-comment"># 声明变量</span><br>a <span class="hljs-comment"># 变量的名字</span><br>= <span class="hljs-comment"># 赋值</span><br><span class="hljs-number">1</span> <span class="hljs-comment"># 值</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">变量定义的规则:<br><span class="hljs-number">1.</span>变量由数字,字母,下划线组成<br><span class="hljs-number">2.</span>不能以数字开头<br><span class="hljs-number">3.</span>不能使用python中关键字 <br><span class="hljs-number">4.</span>不能使用中文和拼音<br><span class="hljs-number">5.</span>区分大小写<br><span class="hljs-number">6.</span>变量名要具有描述性<br><span class="hljs-number">7.</span>推荐写法<br>    <span class="hljs-number">7.1</span>驼峰体 <br>    <span class="hljs-number">7.2</span>下划线 <br>age_of_oldboy = <span class="hljs-number">98</span>  (官方推荐)<br></code></pre></td></tr></table></figure><p>变量的小高级</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># age = 18</span><br><span class="hljs-comment"># age1 = 19</span><br><span class="hljs-comment"># age2 = age # age2 = 18</span><br><span class="hljs-comment"># age = 20</span><br><span class="hljs-comment"># # 20 19 18</span><br><span class="hljs-comment"># print(age,age1,age2)</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># a = 4</span><br><span class="hljs-comment"># b = a + 6   #在声明变量的时候先执行等号右边的内容</span><br><span class="hljs-comment"># print(b)</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 什么是变量?    </span><br><span class="hljs-meta"># 变量就是将一个临时的值存储在内容中(存储中间值/起别名)</span><br><span class="hljs-meta"># 变量能干什么?    </span><br><span class="hljs-meta"># 变量可以多次重复使用</span><br><span class="hljs-meta"># 变量在那用怎么用?    </span><br><span class="hljs-meta"># 变量在咱们程序中会频繁使用</span><br></code></pre></td></tr></table></figure><h3 id="5-常量"><a href="#5-常量" class="headerlink" title="5.常量"></a>5.常量</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 常量:ID = 11012013014066 常量就是不变的量</span><br></code></pre></td></tr></table></figure><h3 id="6-注释"><a href="#6-注释" class="headerlink" title="6.注释"></a>6.注释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">单行注释 <span class="hljs-comment"># </span><br>多行注释 <span class="hljs-string">&quot;&quot;&quot; &quot;&quot;&quot;</span>  <span class="hljs-string">&#x27;&#x27;&#x27; &#x27;&#x27;&#x27;</span> <br>被注释的内容是不是会执行的<br></code></pre></td></tr></table></figure><h3 id="7-基础据类型"><a href="#7-基础据类型" class="headerlink" title="7.基础据类型"></a>7.基础据类型</h3><p>数字： 用于计算和比较(int)</p><p>字符串：在python中只要是用引号引起来的就是字符串(str)</p><p>​加法 – 同是字符串才能相加</p><p>​乘法 – 只能和数字进行相乘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;my name&#x27;s &quot;meet&quot;&#x27;&#x27;&#x27;</span>  引号配合使用<br></code></pre></td></tr></table></figure><p>布尔值：返回真假值 用于判断(bool)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-literal">True</span> 真<br>​<span class="hljs-literal">False</span> 假<br></code></pre></td></tr></table></figure><h3 id="8-输入"><a href="#8-输入" class="headerlink" title="8.输入"></a>8.输入</h3><p>注意:input获取到的内容全都是字符串</p><p>int() –  将字符串中的数字转换成整型</p><p>type() – 查看数据类型</p><h3 id="9-if"><a href="#9-if" class="headerlink" title="9.if"></a>9.if</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> - 如果 在python是关键字<br><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span> 如果是真的，告诉大家这是真的<br><br>单<span class="hljs-keyword">if</span><br>关键字 空格 条件 冒号<br>缩进 结果<br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">3</span>&gt;<span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">else</span> 二选一<br>如果 空格 条件 冒号<br>缩进 结果<br>否则 冒号<br>缩进 结果<br><br>n = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入数字:&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">3</span>&lt;<span class="hljs-built_in">int</span>(n):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">6</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">elif</span> <span class="hljs-keyword">elif</span> 多选一或零<br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">110</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">3</span>&lt;<span class="hljs-number">2</span>: <span class="hljs-comment"># 如果</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A&quot;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-number">3</span>&gt;<span class="hljs-number">8</span>: <span class="hljs-comment"># 在如果</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;B&quot;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-number">5</span>&lt;<span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;C&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">112</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">elif</span> <span class="hljs-keyword">else</span> 多选一<br><br><span class="hljs-keyword">if</span> <span class="hljs-number">3</span> == <span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-number">3</span>&lt;<span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-number">3</span>&gt;<span class="hljs-number">10</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">4</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">9</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">if</span> 多选<br><br><span class="hljs-keyword">if</span> <span class="hljs-number">3</span>&gt;<span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">456</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">3</span>&lt;<span class="hljs-number">6</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;B&quot;</span>)<br><br><span class="hljs-keyword">if</span>嵌套<br>sex = <span class="hljs-string">&quot;女&quot;</span><br>age = <span class="hljs-number">35</span><br><span class="hljs-keyword">if</span> sex == <span class="hljs-string">&quot;女&quot;</span>:<br>    <span class="hljs-keyword">if</span> age == <span class="hljs-number">35</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;进来坐一坐&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你去隔壁找春生&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你去对门找alex&quot;</span>)<br><br><br><span class="hljs-number">1.</span>用户输入账号<br><span class="hljs-number">2.</span>用户输入密码<br><span class="hljs-number">3.</span>判断用户的账号是不是alex<br><span class="hljs-number">4.</span>如果账号是alex在继续判断密码是不是alexdsb<br><span class="hljs-number">5.</span>账号和密码都正确提示用户alex就是一个dsb<br><span class="hljs-number">6.</span>如果账号正确密码错误提示密码错误<br><span class="hljs-number">7.</span>如果账号错误提示账号错误<br><br><br>user = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入账号：&quot;</span>)<br>pwd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密码：&quot;</span>)<br><span class="hljs-keyword">if</span> user == <span class="hljs-string">&quot;alex&quot;</span>:<br>    <span class="hljs-keyword">if</span> pwd == <span class="hljs-string">&quot;alexdsb&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;alex就是一个dsb&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密码错误！&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;账号错误！&quot;</span>)<br><br>user = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入账号：&quot;</span>)<br>pwd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密码：&quot;</span>)<br><br><span class="hljs-comment"># and # 和 and前边的内容为真并且and 后边的内容为真才是真</span><br><br><span class="hljs-keyword">if</span> pwd == <span class="hljs-string">&quot;alexdsb&quot;</span> <span class="hljs-keyword">and</span> user == <span class="hljs-string">&quot;alex&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;alex就是一个dsb&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密码或账户错误！&quot;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
